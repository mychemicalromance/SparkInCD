
/* 控制器 */

var mControllers=angular.module('mControllers',['ngResource']);

/* webController */

mControllers.controller('webController',
  ['$rootScope', '$scope', '$state', '$window', '$timeout', 'cfpLoadingBar','toggleStateService',
  function($rootScope, $scope, $state, $window, $timeout, cfpLoadingBar,toggleStateService) {

    var thBar;

    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {

        if($('.wrapper > section').length)  
          thBar = $timeout(function() {
            cfpLoadingBar.start();
          }, 0);  
    });
     

    $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
          
          
        event.targetScope.$watch("$viewContentLoaded", function () {
          $timeout.cancel(thBar);
          cfpLoadingBar.complete();
        });
    });

    $rootScope.$on('$stateChangeSuccess',
      function(event, toState, toParams, fromState, fromParams) {
        // display new view from top
        //$window.scrollTo(0, 0);
        // Save the route title
        $rootScope.currTitle = $state.current.title;

      });

    $rootScope.currTitle = $state.current.title;
    $rootScope.pageTitle = function() {
      var title = $rootScope.app.name + ' - ' + ($rootScope.currTitle || $rootScope.app.description);
      document.title = title;
      return title;
    };

    /*$rootScope.openDialog=function(dialogid,controller,prea){
         ngDialog.open(
         { 
            template: dialogid,
            className: 'ngdialog-theme-default',
            controller:controller
         }
         );
     }

     $rootScope.closeDialog=function(dialogid)
     {
         ngDialog.close();
     }
*/
  
     

}]);


/* SidebarController */

mControllers.controller('SidebarController', ['$rootScope','$scope','$http','$state',
  function($rootScope,$scope,$http){

    $scope.loadSidebarMenu = function() {
     // 
      var menuJson = '/cloudui/ws/user/getPolicies',
          menuURL  = menuJson + '?v=' + (new Date().getTime());  
      $http.get(menuURL,{params:{userName:$rootScope.user.name}})
        .success(function(items) {
           $scope.menuItems = items;
        })
     };

     $scope.loadSidebarMenu();
     
     $scope.loginout=function(){
    	 $http.get('/cloudui/ws/user/logout'+'?v='+(new Date().getTime()))
    	 .success(function(data){
            if(data=='true')
            {
            	window.location='app/pages/login.html';
            }else
            {
            	return false;
            }
    	 })
     }

}]);

App.controller('Aaa', ["$scope", "$resource", function($scope, $resource) {
  'use strict';
   $scope.adv='123'

}]);

/* 创建环境 */
mControllers.controller('envCreate',['$rootScope','$scope','$http','$state','Notify',function($rootScope,$scope,$http,$state,Notify){
   $scope.formdata={}; // 表单数据
   $scope.authMsg = '';
  
   //网段分配类型
   $scope.nekworktypelist=[
     {
       value:'default',
       text:'默认'
     },
     {
       value:'user_defined',
       text:'手动指定'
     }
  ];
  $scope.formdata.networktype='default';
  // 网络种类
  $http.get('/cloudui/ws/cluster/network_kind'+'?v='+(new Date().getTime())).success(function(data){
    $scope.nekworkkindlist=data;
    $scope.formdata.networkkind=$scope.nekworkkindlist[0];
  })

  // 提交
  $('#createEnv').parsley();
  $scope.createEnvFn=function(){
      if($scope.formdata.networktype=='default')
      {
         $scope.formdata.network='';
      }
      $http.get('/cloudui/ws/cluster/checkName'+ '?name='+$scope.formdata.name+'&v=' + (new Date().getTime())) 
      .success(function(data){
          if(data.result)
          {
            $rootScope.app.layout.isShadow=true;
            // 添加环境      
              $http({
                method  : 'POST',
                url     : '/cloudui/ws/cluster',
                data    : $.param({name:$scope.formdata.name,network_kind:$scope.formdata.networkkind,network_type:$scope.formdata.networktype,network:$scope.formdata.network}),   
                headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
              })
              .then(function(response) {
                $rootScope.app.layout.isShadow=false;
                // 通过返回数据，没通过返回错误信息
                if (response.data.result) {
                   Notify.alert(
                     '<em class="fa fa-check"></em> 创建环境成功！',
                     {status: 'success'}
                   );
                   $state.go('app.cluster.nodes',{clusterid:response.data.id},{reload:true});
                }else{
                   Notify.alert(
                       '<em class="fa fa-times"></em> 创建环境失败，请重新添加！' ,
                       {status: 'danger'}
                   );
                }
              }, function(x) {
                   Notify.alert(
                       '<em class="fa fa-times"></em> 服务器请求错误！' ,
                       {status: 'danger'}
                   );
              });
          }else{
             $scope.authMsg = '此集群已存在，请重新命名！';
          }
      })
  }

}])


/* 添加主机 */
mControllers.controller('nodeAdd',['$scope','$http','ngDialog','$stateParams','$state','$interval',function($scope,$http,ngDialog,$stateParams,$state,$interval){
 
  $scope.clusterid=$stateParams.clusterid;
  $scope.clustername=$stateParams.clustername;
  
  $http.get('/cloudui/ws/cluster/'+$stateParams.clusterid+'/nodeurl'+'?v='+(new Date().getTime()),{
   params:{os_version:$stateParams.os_version}  
  }).success(function(data){
    $scope.scripturl=data;
  }) 
  
  // 验证表单
  $scope.submitted = false;
  $scope.validateInput = function(name, type) {
    var input = $scope.formaddnode[name];
    return (input.$dirty || $scope.submitted) && input.$error[type];
  };
  
  $scope.labellist=[];
  
  $scope.addLabelFn=function(){
     $scope.inserted = {
        id: $scope.labellist.length+1,
        key: '',
        val: ''
      };
      $scope.labellist.push($scope.inserted);
  }
  
  $scope.removeLabel=function(index){
    $scope.labellist.splice(index, 1);
  }
  
  $scope.formnodeData={};
  
  $scope.$watch('labellist',function(newval,oldval){
    if($scope.labellist.length>0){
          $scope.formnodeData.labels='';     
          angular.forEach($scope.labellist,function(val,key){
           if(val.val&&val.key)
         { 
             if(key+1==$scope.labellist.length)
                 {
                    $scope.formnodeData.labels+=(val.key+'='+val.val);
                 }else
                 {
                    $scope.formnodeData.labels+=(val.key+'='+val.val)+',';
                 }
         }
          })
      }
  },true)
  
  
 $scope.checkNodeName=function(){
    $scope.authMsg = '';
    if($scope.formaddnode.name.$valid) {
      $http.get('/cloudui/ws/cluster/'+$stateParams.clusterid+'/checkName',{params:{
              name:$scope.formnodeData.name
           }}).success(function(data){
             if(!data.result)
               {
               $scope.authMsg = '此主机已存在，请重新命名！';
               }
           })
    }else { 
        $scope.formaddnode.name.$dirty = true;
    }

 }
 
 $scope.link=false;
 $scope.copyContact=function(){
  $scope.link=true;
  $interval.cancel(concatnode); 
  var concatnode=$interval(function(){
    $http.get('/cloudui/ws/cluster/'+$stateParams.clusterid+'/nodestatus',{
      params:{ip:$scope.formnodeData.ip}
    }).success(function(data){
      if(data.result)
      {
        $interval.cancel(concatnode);
        $scope.link=false;
        $state.go('app.cluster.nodes',{clusterid:$stateParams.clusterid},{reload:true});
      }
    })
  },5000)
 }

}])

/* 总览  */
mControllers.controller('home',['$rootScope','$scope','$http',"$timeout",'chartGuage','$interval','ngDialog',function($rootScope,$scope,$http,$timeout,chartGuage,$interval,ngDialog){
	
	$scope.$on('$destroy', function() {
		 $interval.cancel($scope.clustertimer);  
		 $interval.cancel($scope.apptimer);  
	});
	
    // 添加主机选择模式弹出框
    
    $scope.choseNodePattern=function(param){
      
       ngDialog.open({
             template: 
                  '<p class="modal-header">请选择模式</p>' +
                  '<div class="modal-body"><div class="row"><div class="col-sm-6 text-center">' +
                    '<a class="btn btn-info radius_a" ui-sref="app.nodesystem({clusterid:'+"'"+param+"'"+'})" ng-click="closeThisDialog(0)">主机模式' +
                    '</a></div><div class="col-sm-6 text-center"><a class="btn btn-info radius_a" ui-sref="app.nodepattern({clusterid:'+"'"+param+"'"+'})" ng-click="closeThisDialog(0)">IAAS模式' +
                  '</a></div></div></div>',
            plain: true,
            className: 'ngdialog-theme-default'
       }) 
   }
	
	// 集群监控
	   
    $scope.clusterMonitorCpuM=function(item)
    {
     $http.get('/cloudui/ws/monitor/host/cluster/'+item.id+'?v='+(new Date().getTime())).success(function(data){
        $rootScope[item.name+'_cpu']=data.cpu;
        $rootScope[item.name+'_mem']=Number(((data.memusage/data.memtotal)*100).toFixed(2));
        item.monitor=data;
     })
    }
    
    $scope.nocluster=true;
    $scope.clusterpageNum=1;
	$scope.clusterpageSize=2;
	$scope.clusterlist=[];
	$scope.clusterdrop=false;
	
    $scope.getclusterlistdata = function (clusterpageNum)
    {
      $http.get('/cloudui/ws/cluster'+'?v=' + (new Date().getTime()),{
           params:
               {
                 pageNum:clusterpageNum,
                 pageSize:$scope.clusterpageSize
               }
          }).success(function(data){
             $scope.clusterItems = data;
             if($scope.clusterItems.rows.length>0)
             {
                $scope.nocluster=false;
            
               angular.forEach(data.rows,function(val,key){
	              if(val.host_num>0)
	              {
             
                    // 集群监控  
                    $scope.clusterMonitorCpuM(val);
                    $timeout(function(){
                      
                          chartGuage.chartGaugeFn('#'+val.name+'_cpu',{
                          text:'CPU使用率',
                          series:[{
                                name: 'cpu',
                                data: [0],
                                tooltip: {
                                    valueSuffix: '%'
                                }
                            }]
                        },val.name+'_cpu');

                          chartGuage.chartGaugeFn('#'+val.name+'_mem',{
                          text:'内存使用率',
                          series:[{
                                name: 'mem',
                                data: [0],
                                tooltip: {
                                    valueSuffix: '%'
                                }
                            }]
                        },val.name+'_mem');


                        });
              } 
              })
              $interval.cancel($scope.clustertimer); 
              $scope.clustertimer= $interval(function(){
                angular.forEach(data.rows,function(val,key){
                  if(val.host_num>0)
                  {
                    $scope.clusterMonitorCpuM(val);  
                  }  
                })
              },5000)
             }
             $scope.pageclusterCount=Math.ceil($scope.clusterItems.total/$scope.clusterpageSize);
             if($scope.pageclusterCount==0){
            	 $scope.pageclusterCount=1; 
             }
          })
    } 
   
 
    
    // 我的应用
	$scope.apppageNum=1;
	$scope.apppageSize=2;
	$scope.applist=[];
	$scope.appdrop=false;
	
	$scope.appMonitorCpuM=function(item)
    {
	 
      $http.get('/cloudui/ws/monitor/app/'+item.appId+'?v='+(new Date().getTime())).success(function(data){
      
    	  var itemidStr=item.appId.replace(/-/g,'');
    	  
    	  $rootScope['app'+itemidStr+'_cpu']=data.appCpu;
          $rootScope['app'+itemidStr+'_mem']=data.appMem;
          
          item.monitor=data;
      })
    }
	
	$scope.getapplistdata=function(apppageNum)
	{
		$http.get('/cloudui/ws/apps/listOperationApps'+'?v=' + (new Date().getTime()),{
		      params:
		          {
		            pageNum:apppageNum,
		            pageSize:$scope.apppageSize
		          }
		}).success(function(data){
			   $scope.appItems=data;
			   if($scope.appItems.rows.length>0)
	             {
	            
	               angular.forEach(data.rows,function(val,key){
	            	   
	                    // 应用监控  
	                    $scope.appMonitorCpuM(val);
		               
	            	   var itemidStr=val.appId.replace(/-/g,'');
	            	   
	                    $timeout(function(){
	                      
	                        chartGuage.chartGaugeFn('#app'+val.appId+'_cpu',{
	                          text:'CPU使用率',
	                          series:[{
	                                name: 'cpu',
	                                data: [0],
	                                tooltip: {
	                                    valueSuffix: '%'
	                                }
	                            }]
	                        },'app'+itemidStr+'_cpu');

	                         chartGuage.chartGaugeFn('#app'+val.appId+'_mem',{
	                          text:'内存使用率',
	                          series:[{
	                                name: 'mem',
	                                data: [0],
	                                tooltip: {
	                                    valueSuffix: '%'
	                                }
	                            }]
	                        },'app'+itemidStr+'_mem'); 


	                        });
	               
	              })
	              $interval.cancel($scope.apptimer); 
	              $scope.apptimer= $interval(function(){
	                angular.forEach(data.rows,function(val,key){
	                   
	                    $scope.appMonitorCpuM(val);  
	                     
	                })
	              },5000)
	             }
			   $scope.pageappCount=Math.ceil($scope.appItems.total/$scope.apppageSize);
			   if($scope.pageappCount==0){
				   $scope.pageappCount=1; 
			   }
		})
	}
	 
 
}]) 

/* 用户管理 */

mControllers.controller('limituser',['$scope','$http','ngDialog','Notify',function($scope,$http,ngDialog,Notify){
  
  // 用户列表  
  $http.get('/cloudui/ws/admins/listUsers'+'?v='+(new Date().getTime())).
  success(function(data){
      $scope.userlist=data;
  })
  // 新建用户弹窗
  $scope.openCreateUser=function(){
      ngDialog.open({
        template: 'app/views/dialog_createuser.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        scope: $scope,
        cache:false,
        controller:'createUser'
      });
  }
  // 删除用户  
  $scope.delUser=function(index,param){
     ngDialog.openConfirm({
        template:
             '<p class="modal-header">您确定要删除此用户吗?</p>' +
             '<div class="modal-body text-right">' +
               '<button type="button" class="btn btn-default mr20"  ng-click="closeThisDialog(0)">取消' +
               '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
             '</button></div>',
       plain: true,
       className: 'ngdialog-theme-default'
     }).then(function(){
        $http({
              method  : 'POST',
              url     : '/cloudui/ws/admins/delUser',   
              data    : $.param({userName:param}),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
        }).then(function(response){
            if(response.data.result)
            {
               Notify.alert(
                     '<em class="fa fa-check"></em> '+response.data.message ,
                     {status: 'success'}
               );
               $scope.userlist.splice(index,1);
            }else{
               Notify.alert(
                     '<em class="fa fa-times"></em> '+response.data.message ,
                     {status: 'danger'}
               );
            }
        })
     })
  }

}])

// 新建用户
mControllers.controller('createUser',['$rootScope','$scope','$http','ngDialog','$state','Notify',function($rootScope,$scope,$http,ngDialog,$state,Notify){
   
   $scope.user = {};
 
   $scope.authMsg = '';

   $scope.user.rolename='运维';

   $scope.createUserFn = function(obj) {
     
    $scope.authMsg = '';
   
    if($scope.createUserForm.$valid) {
      // 验证用户是否存在
      $http({
              method  : 'POST',
              url     : '/cloudui/ws/admins/isExitUser',   
              data    : $.param({userName:$scope.user.name}),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
      }).success(function(data){

         if(data.result)
         {
            // 创建用户  
            $http({
              method  : 'POST',
              url     : '/cloudui/ws/admins/createUser',
              data    : $.param({
                username:$scope.user.name,
                password:$scope.user.password,
                rolename:$scope.user.rolename,
                pId:$rootScope.user.id
              }),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
           }).then(function(response) {  
                if ( !response.data.result ) {
                  $scope.authMsg =response.data.message;
                }else{
                    ngDialog.close();
                    $state.go('app.limit.user',{},{ reload: true });
                }  
           },function(x) {
                $scope.authMsg = '服务器请求错误';
           })
         }else
         {
            $scope.authMsg = '此用户已存在，请重新命名！';
         }
      })

    }
    else { 
      $scope.createUserForm.name.$dirty = true;
      $scope.createUserForm.password.$dirty = true;
    }
  };
}])

/* 角色管理 */

mControllers.controller('limitrole',['$rootScope','$scope','$http','ngDialog','$state','Notify',function($rootScope,$scope,$http,ngDialog,$state,Notify){
  // 角色列表   
  $http.get('/cloudui/ws/admins/listRoles'+'?v='+(new Date().getTime())).
  success(function(data){
      $scope.rolelist=data;
  })
  // 新建角色弹窗
  $scope.openCreateRole=function(){
      ngDialog.open({
        template: 'app/views/dialog_createrole.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        scope: $scope,
        cache:false,
        controller:'createRole'
      });
  }
  // 查看权限弹窗
  /*$scope.viewLimit=function(param){
      ngDialog.open({
        template: 'app/views/dialog_jurisdiction.html',
        className: 'ngdialog-theme-default',
        scope: $scope,
        data:{roleid:param},
        controller:'jurisdiction'
      });
  }*/
  // 删除角色  
  $scope.delRole=function(index,param){
     ngDialog.openConfirm({
        template:
             '<p class="modal-header">您确定要删除此角色吗?</p>' +
             '<div class="modal-body text-right">' +
               '<button type="button" class="btn btn-default mr20"  ng-click="closeThisDialog(0)">取消' +
               '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
             '</button></div>',
       plain: true,
       className: 'ngdialog-theme-default'
     }).then(function(){
        $http({
              method  : 'POST',
              url     : '/cloudui/ws/admins/delRole',   
              data    : $.param({roleName:param}),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
        }).then(function(response){
            if(response.data.result)
            {
               Notify.alert(
                     '<em class="fa fa-check"></em> '+response.data.message ,
                     {status: 'success'}
               );
               $scope.rolelist.splice(index,1);
            }else{
               Notify.alert(
                     '<em class="fa fa-times"></em> '+response.data.message ,
                     {status: 'danger'}
               );
            }
        })
     })
  }
  
  // 权限树
  
  $scope.viewLimit=function(currole){
	  $scope.currole=currole;
	  $scope.treeoff=false;
	  $http({
	      method:'post',
	      url:'/cloudui/ws/admins/getPolicysOfRole',
	      data:$.param({
	    	  roleId:currole.roleId
	      }),
	      headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
	   }).success(function(data){
		   $scope.treeoff=true;
		   $scope.my_data=[];
		   angular.forEach(data,function(val,key){
			   var obj={};
			   obj.label=val.policy.text;
			   obj.id=val.policy.page_id;
			   obj.checked=val.have;
			   obj.children=[];
			   angular.forEach(val.policy.policyMenu,function(val2,key2){
				   var objchild={};
				   objchild.label=val2.title;
				   objchild.id=val2.id;
				   objchild.checked=val2.menu_flag;
				   obj.children.push(objchild);
			   })
			   $scope.my_data.push(obj)

		   })

		   var tree;
		   $scope.my_tree = tree = {};
		     
	   })
  }
  

 
   $scope.savetree=function(savedata,role){
      
     var policyIdsarr=[];
     var menuIdsarr=[];
 
     angular.forEach(savedata,function(val,key){
 
    	 if(val.checked)
    	 {
    		 policyIdsarr.push(val.id) 
    	 }
    	 
    	 angular.forEach(val.children,function(val2,key2){
    		 if(val2.checked){
    			 menuIdsarr.push(val2.id);
    		 }
    	 })
     })

     $http({
	  	  method:'post',
	  	  url:'/cloudui/ws/admins/savePolicysOfRole',
	  	  data: $.param({
	  		roleId:role,
	  	    policyIds:policyIdsarr.join(','),
	  	    menuIds:menuIdsarr.join(',')
	  	  }),
	  	  headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
	    }).success(function(data){
	    	if(data.result)
	    	{
	    		Notify.alert(
                 '<em class="fa fa-check"></em> '+data.message ,
                 {status: 'success'}
                );
	    		
	    		$state.go('app.limit.role',{},{reload:true});
	    		
	    	}else{
	    		Notify.alert(
                    '<em class="fa fa-times"></em> 分配权限失败' ,
                    {status: 'danger'}
                );
	    	}
	 })
   }
}])

// 新建角色用户
mControllers.controller('createRole',['$rootScope','$scope','$http','ngDialog','$state',function($rootScope,$scope,$http,ngDialog,$state){
   
   $scope.role = {};
 
   $scope.authMsg = '';
 

   $scope.createRoleFn = function(obj) {
     
    $scope.authMsg = '';
   
    if($scope.createRoleForm.$valid) {
      // 验证角色是否存在
      $http({
              method  : 'POST',
              url     : '/cloudui/ws/admins/isExitRole',   
              data    : $.param({roleName:$scope.role.name}),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
      }).success(function(data){

         if(data.result)
         {
            // 创建角色 
            $http({
              method  : 'POST',
              url     : '/cloudui/ws/admins/createRole',
              data    : $.param({
                roleName:$scope.role.name
              }),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
           }).then(function(response) {  
                if ( !response.data.result ) {
                  $scope.authMsg =response.data.message;
                }else{
                    ngDialog.close();
                    $state.go('app.limit.role',{},{ reload: true });
                }  
           },function(x) {
                $scope.authMsg = '服务器请求错误';
           })
         }else
         {
            $scope.authMsg = '此角色已存在，请重新命名！';
         }
      })

    }
    else { 
      $scope.createRoleForm.name.$dirty = true;
    }
  };
}])

/* 菜单管理 */
mControllers.controller('limitmenu',['$scope','$http','ngDialog','Notify',function($scope,$http,ngDialog,Notify){
   
   //菜单列表   
   $http.get('/cloudui/ws/admins/listPolicys'+'?v='+(new Date().getTime())).
   success(function(data){
       $scope.menulist=data;
   })
   // 新建权限弹窗
  $scope.openCreateLimit=function(){
      ngDialog.open({
        template: 'app/views/dialog_createlimit.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        cache:false,
        scope: $scope,
        controller:'createLimit'
      });
  }
  // 编辑权限弹窗
  $scope.openEditLimit=function(param){
      ngDialog.open({
        template: 'app/views/dialog_editlimit.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        cache:false,
        data:{info:param},
        controller:'editLimit'
      });
  }
  // 删除权限
  $scope.delLimit=function(index,param){
     ngDialog.openConfirm({
        template:
             '<p class="modal-header">您确定要删除此权限吗?</p>' +
             '<div class="modal-body text-right">' +
               '<button type="button" class="btn btn-default mr20"  ng-click="closeThisDialog(0)">取消' +
               '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
             '</button></div>',
       plain: true,
       className: 'ngdialog-theme-default'
     }).then(function(){
        $http({
              method  : 'POST',
              url     : '/cloudui/ws/admins/delPolicy',   
              data    : $.param({policyId:param}),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
        }).then(function(response){
            if(response.data.result)
            {
               Notify.alert(
                     '<em class="fa fa-check"></em> '+response.data.message ,
                     {status: 'success'}
               );
               $scope.menulist.splice(index,1);
            }else{
               Notify.alert(
                     '<em class="fa fa-times"></em> '+response.data.message ,
                     {status: 'danger'}
               );
            }
        })
     })
  }
}])

/* 创建权限 */
mControllers.controller('createLimit',['$scope','$http','ngDialog','$state',function($scope,$http,ngDialog,$state){
  
   $scope.limit = {};
 
   $scope.authMsg = '';
 

   $scope.createLimitFn = function() {
     
    $scope.authMsg = '';
   
    if($scope.createLimitForm.$valid) {

      var policyInfos=angular.toJson({
         text:$scope.limit.text,
         icon:$scope.limit.icon,
         sref:$scope.limit.sref,
         title:$scope.limit.title,
         type:$scope.limit.type
      })
      
      // 创建权限   
      $http({
        method  : 'POST',
        url     : '/cloudui/ws/admins/createPolicy/',
        data    : $.param({
          policyInfos:policyInfos
        }),   
        headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
      }).then(function(response){
          if ( !response.data.result ) {
            $scope.authMsg =response.data.message;
          }else{
              ngDialog.close();
              $state.go('app.limit.menu',{},{ reload: true });
          }
      },function(x) {
         $scope.authMsg = '服务器请求错误';
      })
    }
    else { 
      $scope.createLimitForm.text.$dirty = true;
    }
  };
}])

/* 编辑权限 */
mControllers.controller('editLimit',['$scope','$http','ngDialog','$state',function($scope,$http,ngDialog,$state){
  
     var menuinfo=$scope.ngDialogData.info;

     $scope.limit={};

     $scope.authMsg = '';

     $scope.limit.text=menuinfo.text;
     $scope.limit.icon=menuinfo.icon;
     $scope.limit.sref=menuinfo.sref;
     $scope.limit.title=menuinfo.title;
     $scope.limit.type=menuinfo.type; 

     $scope.editLimitFn = function() {
     
       $scope.authMsg = '';
   
       if($scope.editLimitForm.$valid) {

          var policyInfos=angular.toJson({
             policyId:menuinfo.page_id,
             text:$scope.limit.text,
             icon:$scope.limit.icon,
             sref:$scope.limit.sref,
             title:$scope.limit.title,
             type:$scope.limit.type
          })
      
          // 编辑权限   
          $http({
            method  : 'POST',
            url     : '/cloudui/ws/admins/modifyPolicy',
            data    : $.param({
              policyInfos:policyInfos
            }),   
            headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
          }).then(function(response){
              if ( !response.data.result ) {
                $scope.authMsg =response.data.message;
              }else{
                  ngDialog.close();
                  $state.go('app.limit.menu',{},{ reload: true });
              }
          },function(x) {
             $scope.authMsg = '服务器请求错误';
          })
        }
    else { 
      $scope.editLimitForm.text.$dirty = true;
    }
  };
   
}])

/* 权限详情 */
mControllers.controller('jurisdiction',['$scope','$http','$stateParams','ngDialog','Notify',function($scope,$http,$stateParams,ngDialog,Notify){
   
	$http({
        method  : 'POST',
        url     : '/cloudui/ws/admins/getPolicysOfRole',   
        data    : $.param({
          roleId:$scope.ngDialogData.roleid
        }),   
        headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
   }).then(function(response){
       $scope.jurisdictionlist=response.data;  
   })

   // 保存权限
   $scope.saveLimit=function(){
       var checkbox=$('#alllist').find('input[type="checkbox"]:checked');
       var ids=[];
       angular.forEach(checkbox,function(val,key){
          ids.push(val.id);  
       })
       ids=ids.join(',');
       $http({
              method  : 'POST',
              url     : '/cloudui/ws/admins/savePolicysOfRole',   
              data    : $.param({
                roleId:$scope.ngDialogData.roleid,
                policyIds:ids
              }),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
       }).then(function(response){
          if(response.data.result)
          {
             Notify.alert(
                 '<em class="fa fa-check"></em> '+response.data.message ,
                 {status: 'success'}
              );
             ngDialog.close();
          }else{
             Notify.alert(
                 '<em class="fa fa-times"></em> '+response.data.message ,
                 {status: 'danger'}
              );
          }
       })    
   }

}])

/* 集群列表页 */

mControllers.controller('listClutersController', ['$rootScope','$scope','$http','ngDialog','$interval','$state','$q','Notify','chartGuage','$timeout',
  function($rootScope,$scope,$http,ngDialog,$interval,$state,$q,Notify,chartGuage,$timeout){
 
	$scope.$on('$destroy', function() {
		 $interval.cancel($scope.timer);        
	});
	
	// 添加主机选择模式弹出框
	   
    $scope.choseNodePattern=function(param){
	    
	     ngDialog.open({
	           template: 
	                '<p class="modal-header">请选择模式</p>' +
	                '<div class="modal-body"><div class="row"><div class="col-sm-6 text-center">' +
	                  '<a class="btn btn-info radius_a" ui-sref="app.nodesystem({clusterid:'+"'"+param+"'"+'})" ng-click="closeThisDialog(0)">主机模式' +
	                  '</a></div><div class="col-sm-6 text-center"><a class="btn btn-info radius_a" ui-sref="app.nodepattern({clusterid:'+"'"+param+"'"+'})" ng-click="closeThisDialog(0)">IAAS模式' +
	                '</a></div></div></div>',
	          plain: true,
	          className: 'ngdialog-theme-default'
	     }) 
	 }
   
   // 新建集群弹出框
   $scope.openCreateCluster = function () {
      ngDialog.open({
        template: 'app/views/dialog_createcluster.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        scope: $scope,
        cache:false,
        controller:'createCluster'
      });
   };

   // 删除集群

   $scope.opendelCluster=function(params){
      ngDialog.openConfirm({
         template:
              '<p class="modal-header">您确定要删除此集群吗?</p>' +
              '<div class="modal-body text-right">' +
                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
              '</button></div>',
        plain: true,
        className: 'ngdialog-theme-default'
      })
      .then(
        function(){
           $http({
              method:'DELETE',
              url:'/cloudui/ws/cluster/'+params
           }).success(function(data){
               if(data.result)
               {
            	Notify.alert( 
               	   '<em class="fa fa-check"></em> 删除成功！', 
               	   {status: 'success'}
                );
                $state.go('app.listclusters',{},{reload:true});
               }else
               {
                 Notify.alert( 
                    '<em class="fa fa-times"></em> 删除失败！'+data.info+'请先删除集群上的主机', 
                    {status: 'danger'}
                 );
               }
           })
        }
      )
  }
   
  // 集群监控
	 
   $scope.clusterMonitorCpuM=function(item)
   {
     $http.get('/cloudui/ws/monitor/host/cluster/'+item.id+'?v='+(new Date().getTime())).success(function(data){
        $rootScope[item.name+'_cpu']=data.cpu;
        $rootScope[item.name+'_mem']=Number(((data.memusage/data.memtotal)*100).toFixed(2));
        
        item.monitor=data;
     })
   }

   // 集群列表 
   
   $scope.nocluster=true;
    
   $scope.pageSize=5;
   
   $scope.onPageChange = function ()
   {
	   $http.get('/cloudui/ws/cluster'+'?v=' + (new Date().getTime()),{
          params:
              {
                pageNum:$scope.pageNum,
                pageSize:$scope.pageSize
              }
         }).success(function(data){
            $scope.clusterItems = data;
            if($scope.clusterItems.rows.length>0)
            {
         	  $scope.nocluster=false;
         	 
         	  angular.forEach(data.rows,function(val,key){
         	 
         		 if(val.host_num>0)
         		 {  
         			// 集群上的应用
             		 $http.get('/cloudui/ws/monitor/host/cluster/app/'+val.id+'?v='+(new Date().getTime())).
             		 success(function(data){
             			 val.app=data;    
             		 }) 
             		 // 集群监控  
             		 $scope.clusterMonitorCpuM(val);
             		 $timeout(function(){
             			
                         chartGuage.chartGaugeFn('#'+val.name+'_cpu',{
                           text:'CPU使用率',
                           series:[{
                               name: 'cpu',
                               data: [0],
                               tooltip: {
                                   valueSuffix: '%'
                               }
                           }]
                           },val.name+'_cpu');
                        
                         chartGuage.chartGaugeFn('#'+val.name+'_mem',{
                         text:'内存使用率',
                         series:[{
                               name: 'mem',
                               data: [0],
                               tooltip: {
                                   valueSuffix: '%'
                               }
                           }]
                       },val.name+'_mem');


                       });
         		 } 
             })
             $interval.cancel($scope.timer); 
             $scope.timer= $interval(function(){
            	 angular.forEach(data.rows,function(val,key){
            		 if(val.host_num>0)
             		 {
            			 $scope.clusterMonitorCpuM(val);  
             		 }	
            	 })
             },5000)
            }
            $scope.pageCount=Math.ceil($scope.clusterItems.total/$scope.pageSize);
            if($scope.pageCount==0){
            	$scope.pageCount=1;
            }
         })
   }  
}])

/* 选择系统  */

mControllers.controller('nodesystemController',['$scope','$stateParams',function($scope,$stateParams){
	
	$scope.clusterid=$stateParams.clusterid;
	
}])

/* IAAS模式选择虚机  */

mControllers.controller('nodepatternController',['$scope','$stateParams','$http','$filter','Notify',function($scope,$stateParams,$http,$filter,Notify){
  
  $scope.clusterid=$stateParams.clusterid;
  
  $scope.checkappId=[]; // 选中的虚拟机

  // IAAS列表  

  $http.get('/cloudui/ws/iaas/name'+'?v='+(new Date().getTime())).success(function(data){
     $scope.iaaslist=data;
     $scope.iaasid=$scope.iaaslist[0].id;
     $scope.vmpage($scope.iaasid);
  }) 

 
  $scope.vmoff=false;
  $scope.vmpage=function(iaasid){
    if(iaasid)
    {   
        $scope.vmoff=true;
        $scope.pageSize=10;
        $scope.onPageChangeVm = function (param)
        {    
          $http.get('/cloudui/ws/iaas/'+iaasid+'/vm'+'?v=' + (new Date().getTime()),{
          params:
              {
                pageNum:param,
                pageSize:$scope.pageSize
              }
         }).success(function(data){
        	 
        	angular.forEach(data.rows,function(val,key){
                 var ischecked=$filter('filter')($scope.checkappId,val.id).length>0?true:false;
                 data.rows[key].ischecked=ischecked;
            })
               
            $scope.vmlist = data;
            $scope.pageCount=Math.ceil($scope.vmlist.total/$scope.pageSize);
            if($scope.pageCount==0){
            	$scope.pageCount=1;
            }
         })
        }
    }
  }

  // 加入集群
  $scope.joinClusterFn=function(iaasid){
	 var checkbox = $scope.checkappId;
     if(checkbox.length==0)
     {
        Notify.alert(
           '请选择要加入集群的虚拟机!' ,
           {status: 'info'}
        );
     }else
     {
        var vm_ids='';
        vm_ids=checkbox.join(',');
        $http({
            method  : 'PUT',
            url     : '/cloudui/ws/iaas/'+iaasid+'/vm', 
            data    : $.param({
               vm_ids:vm_ids,
               cluster_id:$scope.clusterid
            }),   
            headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
        }).success(function(data){
        	if(data.result)
            {
               Notify.alert(
                 '加入集群成功!' ,
                 {status: 'success'}
               );
               $state.go('app.cluster.nodes',{clusterid:$stateParams.clusterid},{reload:true});
  
            }else
            {
              Notify.alert(
                 '加入集群失败!' ,
                 {status: 'danger'}
              );
            }
        }) 
     }
  }
 

  $scope.changeIaas=function()
  {
    $scope.vmoff=false;
    $scope.vmpage($scope.iaasid);
  }

 

  
}])
/* 创建环境 */
mControllers.controller('createCluster',['$rootScope','$scope','$http','$state','ngDialog',function($rootScope,$scope,$http,$state,ngDialog){
   
  $scope.account = {};
 
  $scope.authMsg = '';
 
  $scope.nekworktypelist=[
     {
    	 value:'default',
    	 text:'默认'
     },
     {
    	 value:'user_defined',
    	 text:'手动指定'
     }
  ];
  
  // 网络种类
  
  $http.get('/cloudui/ws/cluster/network_kind'+'?v='+(new Date().getTime())).success(function(data){
	  $scope.nekworkkindlist=data;
	  $scope.account.networkkind=$scope.nekworkkindlist[0];
  })

  
  $scope.account.networktype='default';

  $scope.createclusterFn = function(obj) {
     
    $scope.authMsg = '';
   
    if($scope.createclusterForm.$valid) {
       if($scope.account.networktype=='default')
       {
    	   $scope.account.network='';
       }
       // 验证名字 
      $http.get('/cloudui/ws/cluster/checkName'+ '?name='+$scope.account.name+'&v=' + (new Date().getTime()))  
        .success(function(data) {
           if(data.result)
           {
              // 新增环境     
              $http({
		          method  : 'POST',
		          url     : '/cloudui/ws/cluster',
		          data    : $.param({name:$scope.account.name,network_kind:$scope.account.networkkind,network_type:$scope.account.networktype,network:$scope.account.network}),   
		          headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
		       })
              .then(function(response) {
                // 通过返回数据，没通过返回错误信息
            	 
                if ( !response.data.result ) {
                  $scope.authMsg = '创建失败，请重新添加环境！';
                }else{
                  ngDialog.close();
               
                  if(obj)
                  {

                     $state.go('app.nodesystem',{clusterid: response.data.id},{ reload: true });
                  }else
                  {
                     $state.go('app.cluster.nodes',{clusterid:response.data.id},{ reload: true });
                  }
                }
              }, function(x) {
                $scope.authMsg = '服务器请求错误';
              });
              
           }else{
              $scope.authMsg = '此环境已存在，请重新命名！';
           }

        })

    }
    else { 
      $scope.createclusterForm.name.$dirty = true;
      $scope.createclusterForm.network.$dirty = true;
    }
  };

}])


/* 重命名集群 */
mControllers.controller('changeClustername',['$rootScope','$scope','$http','$state','$stateParams','ngDialog','Notify',function($rootScope,$scope,$http,$state,$stateParams,ngDialog,Notify){
    
      
  $scope.account = {};

  $scope.account.name=$scope.ngDialogData.name;
 
  $scope.authMsg = '';

  $scope.changeclusterNameFn = function(obj) {
     
    $scope.authMsg = '';

    if($scope.changeclusterNameForm.$valid) {
 
       // 更新验证名字 

      $http.get('/cloudui/ws/cluster/checkNameByID'+'?id='+$stateParams.clusterid+'&name='+$scope.account.name+'&v=' + (new Date().getTime()))  
        .success(function(data) {
           if(data.result)
           {
              // 重命名集群  
              $http({
                 method:'PUT',
                 url:'/cloudui/ws/cluster/'+$stateParams.clusterid,
                 data: $.param({name:$scope.account.name}),   
		         headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
              }).success(function(data){
            	  if(data.result)
                  {
                     Notify.alert(
                        '<em class="fa fa-check"></em> 重命名成功!' ,
                        {status: 'success'}
                     );
                     ngDialog.close();
                     $state.go('app.cluster.nodes',{clusterid:$stateParams.clusterid},{reload:true});
                  }else{
                     Notify.alert(
                        '<em class="fa fa-times"></em> 重命名失败!' ,
                        {status: 'danger'}
                     );
                  } 
              })
           }else{
              $scope.authMsg = '此集群已存在，请重新命名！';
           }

        })

    }
    else { 
      $scope.changeclusterNameForm.name.$dirty = true;
    }
  };

}])



/* 集群信息页 */

mControllers.controller('clusterController',['$rootScope','$scope','$http','$stateParams','ngDialog','$interval','$state','Notify',function($rootScope,$scope,$http,$stateParams,ngDialog,$interval,$state,Notify){
	  
	// 添加主机选择模式弹出框
	   
    $scope.choseNodePattern=function(param){
	    
	     ngDialog.open({
	           template: 
	                '<p class="modal-header">请选择模式</p>' +
	                '<div class="modal-body"><div class="row"><div class="col-sm-6 text-center">' +
	                  '<a class="btn btn-info radius_a" ui-sref="app.nodesystem({clusterid:'+"'"+param+"'"+'})" ng-click="closeThisDialog(0)">主机模式' +
	                  '</a></div><div class="col-sm-6 text-center"><a class="btn btn-info radius_a" ui-sref="app.nodepattern({clusterid:'+"'"+param+"'"+'})" ng-click="closeThisDialog(0)">IAAS模式' +
	                '</a></div></div></div>',
	          plain: true,
	          className: 'ngdialog-theme-default'
	     }) 
  }
    
   // 重命名集群弹出框
   $scope.openchangeCluster = function (params) {
      ngDialog.open({
        template: 'app/views/dialog_changecluster.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        scope: $scope,
        cache: false,
        data:{name:params},
        controller:'changeClustername'
      });
   };

   // 删除集群
   
   $scope.opendelCluster=function(params){
      ngDialog.openConfirm({
         template:
              '<p class="modal-header">您确定要删除此集群吗?</p>' +
              '<div class="modal-body text-right">' +
                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
              '</button></div>',
        plain: true,
        className: 'ngdialog-theme-default'
      })
      .then(
        function(){
           $http({
              method:'DELETE',
              url:'/cloudui/ws/cluster/'+params
           }).success(function(data){
               if(data.result)
               {
                 Notify.alert( 
                	'<em class="fa fa-check"></em> 删除成功！', 
                	{status: 'success'}
                 );
                 $state.go('app.listclusters',{},{ reload: true });
               }else
               {
            	  Notify.alert( 
                     '<em class="fa fa-times"></em> 删除失败！'+data.info+'请先删除集群上的主机', 
                     {status: 'danger'}
                  );
               }
          })  
        }
      )
  }

  // 集群基本信息  
 
  $http.get('/cloudui/ws/cluster/'+$stateParams.clusterid).success(function(data){
      
      $scope.cluster = data; 
  })

}])

// 获取单个集群用户列表 

mControllers.controller('clusterUser',['$scope','$http','$stateParams','ngDialog','Notify','$filter','$state',function($scope,$http,$stateParams,ngDialog,Notify,$filter,$state){
   
  $scope.checkappId=[]; // 选中的用户 
  $scope.pageSize=10; 
  $scope.onPageChange = function ()
  {
     $http.get('/cloudui/ws/cluster/'+$stateParams.clusterid+'/users'+'?v='+(new Date().getTime()),{
     params:
         {
           pageNum:$scope.pageNum,
           pageSize:$scope.pageSize
         }
    }).success(function(data){

       angular.forEach(data.rows,function(val,key){
         var ischecked=$filter('filter')($scope.checkappId,val.ID).length>0?true:false;
         data.rows[key].ischecked=ischecked;
       })

       $scope.userlist = data;
      
       $scope.pageCount=Math.ceil($scope.userlist.total/$scope.pageSize);
       
       if($scope.pageCount==0){
    	   $scope.pageCount=1;
       }
        
    })
  }

  // 添加用户选择用户类型弹出框
    
  $scope.choseUserPattern=function(param){
      
       ngDialog.open({
             template: 
                  '<p class="modal-header">请选择用户类型</p>' +
                  '<div class="modal-body"><div class="row"><div class="col-sm-6 text-center">' +
                    '<a class="btn btn-info radius_a" ng-click="closeThisDialog(0);addNewUser()">新用户' +
                    '</a></div><div class="col-sm-6 text-center"><a class="btn btn-info radius_a" ng-click="closeThisDialog(0);addOldUser()">已有用户' +
                  '</a></div></div></div>',
            plain: true,
            className: 'ngdialog-theme-default',
            controller:'choseUser'
       }) 
  }
  
  // 更改用户配额
  
  $scope.updateuser=function(item){
	  ngDialog.open({
        template: 'app/views/dialog_updateuser.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        cache:false,
        data:{userinfo:item},
        controller:'updateUser'
       });  
  }

  // 删除用户
   
   $scope.delUserHttp=function(ids,index){
      
     $http({
           method:'DELETE',
           url:'/cloudui/ws/cluster/'+$stateParams.clusterid+'/deleteuser', 
           data: $.param({user_ids:ids}),   
             headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
        }).success(function(data){
            if(data.result)
            {
              Notify.alert(
                '<em class="fa fa-check"></em> 删除成功！' ,
                {status: 'success'}
              );

              if(index)
              {
                 $scope.userlist.rows.splice(index, 1);
              }else{
                $state.go('app.cluster.user',{clusterid:$stateParams.clusterid},{reload:true});
              }
              
               
            }else
            {
              Notify.alert(
                '<em class="fa fa-check"></em> 删除失败！' ,
                {status: 'danger'}
              );
            }
        }) 
   }

   $scope.delUserFn=function(params,index)
   {   
       ngDialog.openConfirm({
           template:
               '<p class="modal-header">您确定要删除吗?</p>' +
               '<div class="modal-body text-right">' +
                 '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                 '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
               '</button></div>',
           plain: true,
           className: 'ngdialog-theme-default'
       })
       .then(
       function(){

            var ids='';
            
            if(angular.isNumber(params))
            {
              ids=params;
              $scope.delUserHttp(ids,index);
            }else
            {  
              ids=params.join(',');
              $scope.delUserHttp(ids);
            }  
          }
       )
   }

   $scope.openDelUserFn=function(params,index){
       if(params)
       {
          $scope.delUserFn(params,index);
       }else
       {
           
          var checkbox = $scope.checkappId;
         
          if(checkbox.length==0)
          {
             Notify.alert(
                '请选择您要删除的用户!' ,
                {status: 'info'}
             );
          }else
          {
             $scope.delUserFn(checkbox);
          }
       }
   }

}])

// 更改用户配额
mControllers.controller('updateUser',['$scope','$http','ngDialog','$stateParams','$state',function($scope,$http,ngDialog,$stateParams,$state){
   var userinfo=$scope.ngDialogData.userinfo;
   $scope.user = {};
   $scope.user.cpu=userinfo.cpu;
   $scope.user.memory=userinfo.memory;
   $scope.user.disk=userinfo.disk;
   $scope.authMsg = '';
   
   $scope.updateUserFn = function() {
     
    $scope.authMsg = '';
   
    if($scope.updateUserForm.$valid) {
       
        // 提交用户配额
        $http({
          method  : 'PUT', 
          url     : '/cloudui/ws/cluster/'+$stateParams.clusterid+'/updateuser',
          data    : $.param({
        	ID:userinfo.ID,
            cpu:$scope.user.cpu,
            memory:$scope.user.memory,
            disk:$scope.user.disk
          }),   
          headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
       }).then(function(response) {  
            if ( !response.data.result ) {
              $scope.authMsg =response.data.info;
            }else{
                ngDialog.close();
                $state.go('app.cluster.user',{clusterid:$stateParams.clusterid},{ reload: true });
            }  
       },function(x) {
            $scope.authMsg = '服务器请求错误';
       })
       
    }
    else { 
     
      $scope.updateUserForm.cpu.$dirty = true;
      $scope.updateUserForm.memory.$dirty = true;
      $scope.updateUserForm.disk.$dirty = true;
    }
  };
   
}])


// 选择集群上添加的用户类型
mControllers.controller('choseUser',['$scope','$http','ngDialog',function($scope,$http,ngDialog){
  // 添加新用户弹窗
  $scope.addNewUser=function(){
      
      ngDialog.open({
        template: 'app/views/dialog_addnewuser.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        closeByEscape: false,
        cache:false,
        controller:'addNewUser'
      }); 
  }
  // 添加老用户弹窗
  $scope.addOldUser=function(){
      
      ngDialog.open({
        template: 'app/views/dialog_addolduser.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        closeByEscape: false,
        cache:false,
        controller:'addOldUser'
      }); 
  }

   
}])

// 在集群下添加新用户
mControllers.controller('addNewUser',['$scope','$http','$stateParams','$state','ngDialog',function($scope,$http,$stateParams,$state,ngDialog){
     
   $scope.user = {};
 
   $scope.authMsg = '';
 
   $scope.addNewUserFn = function() {
     
    $scope.authMsg = '';
   
    if($scope.addNewUserForm.$valid) {
      // 验证用户是否存在
      $http({
              method  : 'POST',
              url     : '/cloudui/ws/cluster/'+$stateParams.clusterid+'/checkuser',   
              data    : $.param({USERID:$scope.user.name}),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
      }).success(function(data){

         if(data.result)
         {
            // 添加新用户  
            $http({
              method  : 'POST',
              url     : '/cloudui/ws/cluster/'+$stateParams.clusterid+'/adduser',
              data    : $.param({
                USERID:$scope.user.name,
                USERPASSWORD:$scope.user.password,
                cpu:$scope.user.cpu,
                memory:$scope.user.memory,
                disk:$scope.user.disk
              }),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
           }).then(function(response) {  
                if ( !response.data.result ) {
                  $scope.authMsg ='添加用户失败，请重新添加！';
                }else{
                    ngDialog.close();
                    $state.go('app.cluster.user',{clusterid:$stateParams.clusterid},{ reload: true });
                }  
           },function(x) {
                $scope.authMsg = '服务器请求错误';
           })
         }else
         {
            $scope.authMsg = '此用户已存在，请重新命名！';
         }
      })

    }
    else { 
      $scope.addNewUserForm.name.$dirty = true;
      $scope.addNewUserForm.password.$dirty = true;
      $scope.addNewUserForm.cpu.$dirty = true;
      $scope.addNewUserForm.memory.$dirty = true;
      $scope.addNewUserForm.disk.$dirty = true;
    }
  };
}])

// 在集群下添加老用户
mControllers.controller('addOldUser',['$scope','$http','$stateParams','$state','ngDialog','Notify',function($scope,$http,$stateParams,$state,ngDialog,Notify){
     
  // 已有用户列表
  $scope.userList=function()
  {     
       $http.get('/cloudui/ws/cluster/'+$stateParams.clusterid+'/userlist'+'?v=' + (new Date().getTime())).success(function(data){
         if(data != null && data.length > 0){  

            for(var i = 0; i< data.length; i++){  

                $("<option value='"+data[i].ID+"'>"+data[i].USERID+"</option>").appendTo("#userd"); 
               
            }  

            $("#userd").chosen({
               no_results_text:"没有搜索到此人"
            });  
                      
        }  

      })
  }
  $scope.userList();
  
  // 添加老用户
  
  $scope.addOldUserFn=function(){
    if($scope.users)
    {
       $http({
              method  : 'POST',
              url     : '/cloudui/ws/cluster/'+$stateParams.clusterid+'/selectuser',
              data    : $.param({
                user_ids:$scope.users.join(',')
              }),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
      }).then(function(response) {
         if ( !response.data.result ) {
            $scope.authMsg ='添加用户失败，请重新添加！';
          }else{
              ngDialog.close();
              $state.go('app.cluster.user',{clusterid:$stateParams.clusterid},{ reload: true });
          }
      })
    }else
    {  
      Notify.alert(
         '请选择要添加的用户' ,
         {status: 'info'}
      );
    }
  }
 
}])

// 获取单个集群主机列表 
// 获取单个集群主机列表 

mControllers.controller('nodeslist',['$rootScope','$scope','$http','$stateParams','ngDialog','Notify','$state','$filter',function($rootScope,$scope,$http,$stateParams,ngDialog,Notify,$state,$filter){
  
  $scope.checkappId=[]; // 选中的主机
  
  // 主机列表 
  $scope.pageSize=10;
  $scope.onPageChange = function ()
  {

     $http.get('/cloudui/ws/cluster/'+$stateParams.clusterid+'/nodes'+'?v='+(new Date().getTime()),{
     params:
         {
           pageNum:$scope.pageNum,
           pageSize:$scope.pageSize,
           labels:$scope.searchval||''
         }
    }).success(function(data){
      
      angular.forEach(data.rows,function(val,key){
           var ischecked=$filter('filter')($scope.checkappId,val.id).length>0?true:false;
           data.rows[key].ischecked=ischecked;
         })
           
       $scope.nodeslist = data;
     $scope.nodelistoff=data.rows.length>0?true:false;
       $scope.warninginfo='提示：暂无主机';
         angular.forEach($scope.nodeslist.rows,function(val,key){
             
           val.orilabels=val.labels;
           
             // 主机的cpu、mem
             $http.get('/cloudui/ws/monitor/host/'+val.ip+'?v='+(new Date().getTime())).success(function(data){
               
              data.cpu=Math.ceil(data.cpu);
                val.monitor=data;    
             })
             // 主机上的应用
             $http.get('/cloudui/ws/monitor/host/app/'+val.ip+'?v='+(new Date().getTime())).success(function(data){
                val.app=data;    
             })
              
         })
       $scope.pageCount=Math.ceil($scope.nodeslist.total/$scope.pageSize);
         if($scope.pageCount==0){
           $scope.pageCount=1;
         }
    }).error(function(){
         $scope.nodelistoff=false;
         $scope.warninginfo='暂无结果';
    })
  }
     
   // 按标签名搜索主机
   $scope.searchLabel=function()
   {
       $scope.pageNum=1;
       $scope.onPageChange();
   }
   
  // 增加主机标签弹窗
    $scope.openaddLabelFn = function (params) {
      ngDialog.open({
        template: 'app/views/dialog_nodelabel.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default ngdialog-sm',
        data:{clusterid:$stateParams.clusterid,nodeid:params},
        scope: $scope,
        cache:false,
        controller:'addLabel'
      });
    };
    
    // 移动主机所属集群弹窗
    $scope.openMoveNodeFn = function (params) {
       ngDialog.open({
         template: 'app/views/dialog_movenode.html'+'?action='+(new Date().getTime()),
         className: 'ngdialog-theme-default ngdialog-sm',
         scope: $scope,
         cache: false,
         data:{nodeid:params,curClusterid:$stateParams.clusterid},
         controller:'moveNodeController'
       });
    };
    
   // 编辑标签
    
    $scope.getitemid=function(item,id,ev,index){
       $scope.itemid=id;
     $scope.editlabel=function(data){
          
         var oriarr=item.orilabels.split(',');
         var oriarrkey=[];
         angular.forEach(oriarr,function(val,key){
          oriarrkey.push(val.split('=')[0])
         })
         
         var curarr=data.split(',');
         var curarrkey=[];
         angular.forEach(curarr,function(val,key){
          curarrkey.push(val.split('=')[0])
         })
    
        var lenarr=[];
         
        for(var i=0;i<oriarrkey.length;i++)
        {
         var isexit=$filter('filter')(curarrkey,oriarrkey[i],true);
         
         if(isexit.length>1)
         {
          lenarr.push(isexit.length) 
         }
        }
       
       if(lenarr.length<=0)
       {
             $http.get('/cloudui/ws/admins/isAccess',{params:{
             userId:$rootScope.user.id,
             menuId:$(ev.target).attr('limit-id')
           }}).success(function(data){
            if(!data.result)
            {
 
               $scope.nodeslist.rows[index].labels=$scope.nodeslist.rows[index].orilabels;

                 Notify.alert( 
                      '您没有此权限！', 
                      {status: 'info'}
                   ) 

                   return false;
            }else{
             
              $http({
                        method  : 'PUT',
                        url     : '/cloudui/ws/cluster/'+$stateParams.clusterid+'/node/'+$scope.itemid+'/updatelabel',
                        data    : $.param({labels:$scope.nodeslist.rows[index].labels}),   
                      headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
                    }).success(function(data){
                        if(data.result)
                        {
                          Notify.alert(
                              '<em class="fa fa-check"></em> 修改成功！' ,
                              {status: 'success'}
                          );
                        }else
                        {
                          Notify.alert(
                             '<em class="fa fa-times"></em> 修改失败！' ,
                             {status: 'danger'}
                          );
                        }
                    }) 
            }
          })
       }else{
        Notify.alert(
                   '有重复的标签key值，请重新输入！' ,
                   {status: 'info'}
              );
       }
         

       }
    }
    
   
   // 刷新主机列表
   $scope.refreshNodeList=function()
   {
     $scope.onPageChange();
   }
    
   // 删除主机
   
   $scope.delNodeHttp=function(ids,index){
     $rootScope.app.layout.isShadow=true;
     $http({
           method:'DELETE',
           url:'/cloudui/ws/cluster/deleteNode',
           data: $.param({ids:ids}),   
         headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
        }).success(function(data){
          $rootScope.app.layout.isShadow=false;
            if(data.result)
            {
              Notify.alert(
                '<em class="fa fa-check"></em> 删除成功！' ,
                {status: 'success'}
              );
              
              if(index)
              {
                 $scope.nodeslist.rows.splice(index, 1);
              }else{
                $state.go('app.cluster.nodes',{clusterid:$stateParams.clusterid},{reload:true});
              }
              
              
            }else
            {
              Notify.alert(
                '<em class="fa fa-check"></em> 删除失败！' ,
                {status: 'danger'}
              );
            }
        }) 
   }

   $scope.delNodeFn=function(params,index,state)
   {
    
     var statearr=[];
     if(angular.isObject(params)){
       angular.forEach(params,function(val,key){
              var varstate=eval(val.split('_')[2]);
              statearr.push(varstate)
           })
           var runningState=$filter('filter')(statearr,'false').length>0?true:false;
     }else{
     var runningState=!state; 
     } 
      
     if(runningState){
       Notify.alert(
               '主机有异常，不可删除！' ,
                {status: 'info'}
            );
     }else{
       ngDialog.openConfirm({
             template:
                 '<p class="modal-header">您确定要删除吗?</p>' +
                 '<div class="modal-body text-right">' +
                   '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                   '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
                 '</button></div>',
             plain: true,
             className: 'ngdialog-theme-default'
         })
         .then(
         function(){
            var idsarr=[];
              var ids='';
              var editablearr=[];
            
              if(angular.isObject(params)){
                
                angular.forEach(params,function(val,key){
                   
                    var vareditable=eval(val.split('_')[0]);
                    var varid=val.split('_')[1];
                    editablearr.push(vareditable)
                    idsarr.push(varid);
                  })
                  
                  ids=idsarr.join(',');

                  if($filter('filter')(editablearr,false).length>0)
                  {
                    Notify.alert(
                        '某主机上有正在运行的应用，不可删除！' ,
                       {status: 'info'}
                      );
                  }else
                  {
                    $scope.delNodeHttp(ids);
                  }
              }else{
                var vareditable=eval(params.split('_')[0]);
                  ids=params.split('_')[1];
                
                  if(vareditable)
                  {
                    $scope.delNodeHttp(ids,index);
                  }else
                  {
                    Notify.alert(
                        '主机上有正在运行的应用，不可删除！' ,
                        {status: 'info'}
                      );
                    return false;
                  }
              } 
            }
         )
     }
      
   }

   $scope.openDelNodeFn=function(params,index,state){
    
       if(params)
       {
          $scope.delNodeFn(params,index,state);
       }else
       {
         var checkbox = $scope.checkappId;
          if(checkbox.length==0)
          {
             Notify.alert(
                '请选择您要删除的主机!' ,
                {status: 'info'}
             );
          }else
          {
             $scope.delNodeFn(checkbox);
          }
       }
   }  
     
     
}])
/* 单个集群监控  */
mControllers.controller('clusterMonitor',['$rootScope','$scope','$http','$stateParams','$interval','chartGuage',function($rootScope,$scope,$http,$stateParams,$interval,chartGuage){
	
   $scope.$on('$destroy', function() {
      $interval.cancel($scope.timer);       
   });

   // 集群监控应用列表  
   $scope.clusterappMonitorFn=function()
   {
	   $http.get('/cloudui/ws/monitor/host/cluster/app/'+$stateParams.clusterid+'?v='+(new Date().getTime())).success(function(data){
	      $scope.clusterappMonitor=data; 
          angular.forEach(data,function(val,key){
        	  $http.get('/cloudui/ws/monitor/app/'+val.appid+'?v='+(new Date().getTime())).
        	  success(function(data){
        		  val.monitor=data;
        	  })
          })   
	    }) 
   }
   
   $scope.clusterappMonitorFn();
	   
   // 集群监控  

   $scope.clusterMonitorFn=function()
   {  
      $http.get('/cloudui/ws/monitor/host/cluster/'+$stateParams.clusterid+'?v='+(new Date().getTime())).success(function(data){
           $scope.clusterMonitor=data; 
           $rootScope.clusterCpu=data.cpu;
           $rootScope.clusterMem=Number(((data.memusage/data.memtotal)*100).toFixed(2));;
      }) 
   }

   $scope.clusterMonitorFn();
   $interval.cancel($scope.timer);
   $scope.timer=$interval(function(){
       $scope.clusterMonitorFn();
      // $scope.clusterappMonitorFn();
   },5000)
   chartGuage.chartGaugeFn('#cluster_cpu',{
	    text:'CPU使用率',
	    series:[{
	          name: 'cpu',
	          data: [0],
	          tooltip: {
	              valueSuffix: '%'
	          }
	      }]
	    },'clusterCpu');

	    chartGuage.chartGaugeFn('#cluster_mem',{
	    text:'内存使用率',
	    series:[{
	          name: 'mem',
	          data: [0],
	          tooltip: {
	              valueSuffix: '%'
	          }
	      }]
	    },'clusterMem');
}])

// 移动主机所属集群
mControllers.controller('moveNodeController',['$scope','$http','$state','ngDialog','Notify',function($scope,$http,$state,ngDialog,Notify){
  
   // 获取当前集群以外的集群列表 

    $http.get('/cloudui/ws/cluster/'+$scope.ngDialogData.curClusterid+'/otherclusters'+'?v=' + (new Date().getTime())).success(function(data){
       $scope.otherclusterlist=data;
    })

    // 移动主机所属集群

    $scope.moveNodeFn=function(){

       var movecluster = $('#movenode tbody').find('input[type="radio"]:checked');
      
       $http({
          method:'PUT',
          url:'/cloudui/ws/cluster/'+$scope.ngDialogData.curClusterid+'/node/'+$scope.ngDialogData.nodeid+'/updatecluster',
          data    : $.param({cluster_id:movecluster.val()}),   
          headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
       }).success(function(data){
           if(data.result)
           {
             Notify.alert(
               '<em class="fa fa-check"></em> 移动成功！' ,
               {status: 'success'}
             );
             ngDialog.close();
             $state.go('app.cluster.nodes',{clusterid:$scope.ngDialogData.curClusterid},{reload:true});
           }else
           {
             Notify.alert(
               '<em class="fa fa-times"></em> 移动失败！' ,
               {status: 'danger'}
             );
           }
       })
    }

}])

/* 主机详情页 */

mControllers.controller('nodeController',['$rootScope','$scope','$http','$stateParams','$interval','ngDialog','$state','Notify','chartGuage','chartArea',function($rootScope,$scope,$http,$stateParams,$interval,ngDialog,$state,Notify,chartGuage,chartArea){
	
	$scope.$on('$destroy', function() {
        $interval.cancel($scope.nodecpumemtime); 
        $interval.cancel($scope.nodewarningtime); 
        $interval.cancel($scope.nodehistorytime); 
    });
	
    // 移动主机所属集群弹窗
    $scope.openMoveNodeFn = function (params) {
      ngDialog.open({
        template: 'app/views/dialog_movenode.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default ngdialog-sm',
        scope: $scope,
        cache: false,
        data:{nodeid:$stateParams.nodeid,curClusterid:$stateParams.clusterid},
        controller:'moveNodeController'
      });
    };
	
	// 增加主机标签弹窗
    $scope.openaddLabelFn = function () {
      ngDialog.open({
        template: 'app/views/dialog_nodelabel.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default ngdialog-sm',
        cache:false,
        data:{clusterid:$stateParams.clusterid,nodeid:$stateParams.nodeid,node:true},
        scope: $scope,
        controller:'addLabel'
      });
    };

    // 删除主机

    $scope.delNodeFn=function(params)
    {
      ngDialog.openConfirm({
          template:
              '<p class="modal-header">您确定要删除吗?</p>' +
              '<div class="modal-body text-right">' +
                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
              '</button></div>',
          plain: true,
          className: 'ngdialog-theme-default'
      })
      .then(
      function(){

           $http({
              method:'DELETE',
              url:'/cloudui/ws/cluster/deleteNode',
              data    : $.param({ids:params}),   
	          headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
           }).success(function(data){
               if(data.result)
               {
                 Notify.alert(
                   '<em class="fa fa-check"></em> 删除成功！' ,
                   {status: 'success'}
                 );
                 $state.go('app.cluster.nodes',{clusterid:$stateParams.clusterid},{reload:true});
               }else
               {
                 Notify.alert(
                    '<em class="fa fa-times"></em> 删除失败！' ,
                    {status: 'danger'}
                 );
               }
            })  
         }
      )
  }
 
 //获取单个主机信息 

 $scope.clusterid=$stateParams.clusterid;
 
 $scope.pageSize=10;
  
 $scope.content='';
 
 var promise=$http.get('/cloudui/ws/cluster/'+$stateParams.clusterid+'/node/'+$stateParams.nodeid+ '?v=' + (new Date().getTime())).success(function(data){
      $scope.node = data;
      // 修改主机资源配额（cpu）
      $scope.$watch('node.cpu',function(newval,oldval){

          if(newval==oldval)
          {
             return false;
          }else
          {
    	   	   $http.get('/cloudui/ws/admins/isAccess',{params:{
				   userId:$rootScope.user.id,
				   menuId:angular.element('#nodecpu').attr('limit-id')
			   }}).success(function(data){
				  if(!data.result)
				  {
			    	   Notify.alert( 
			              '您没有此权限！', 
			              {status: 'info'}
			           ) 
			           $state.go('app.node',{clusterid:$stateParams.clusterid,nodeid:$stateParams.nodeid},{reload:true})
				  }else{
		        	  $http({
		                  method  : 'PUT',
		                  url     : '/cloudui/ws/cluster/'+$stateParams.clusterid+'/node/'+$stateParams.nodeid+'/updateresource', 
		                  data    : $.param({cpu:newval}),   
				          headers : { 'Content-Type': 'application/x-www-form-urlencoded' }   
		               }).success(function(data){
		                  if(data.result)
		                  {
		                    Notify.alert(
		                     '<em class="fa fa-check"></em> 修改成功！' ,
		                     {status: 'success'}
		                    );
		                  }else
		                  {
		                    Notify.alert(
		                      '<em class="fa fa-times"></em> 修改失败！' ,
		                      {status: 'danger'}
		                    );
		                  }
		               })	
				  }
			   })  
          }
      })
      // 修改主机资源配额（内存）
      $scope.$watch('node.memory',function(newval,oldval){

          if(newval==oldval)
          {
             return false;
          }else
          {
        	  $http.get('/cloudui/ws/admins/isAccess',{params:{
				   userId:$rootScope.user.id,
				   menuId:angular.element('#nodememory').attr('limit-id')
			  }}).success(function(data){
				  if(!data.result)
				  {
					  Notify.alert( 
		               '您没有此权限！', 
		               {status: 'info'}
		              ) 
		              $state.go('app.node',{clusterid:$stateParams.clusterid,nodeid:$stateParams.nodeid},{reload:true}) 
				  }else{
		        	  $http({
		                  method  : 'PUT',
		                  url     : '/cloudui/ws/cluster/'+$stateParams.clusterid+'/node/'+$stateParams.nodeid+'/updateresource', 
		                  data    : $.param({memory:newval}),   
				          headers : { 'Content-Type': 'application/x-www-form-urlencoded' }   
		               }).success(function(data){
		                  if(data.result)
		                  {
		                    Notify.alert(
		                     '<em class="fa fa-check"></em> 修改成功！' ,
		                     {status: 'success'}
		                    );
		                  }else
		                  {
		                    Notify.alert(
		                      '<em class="fa fa-times"></em> 修改失败！' ,
		                      {status: 'danger'}
		                    );
		                  }
		               })
				  }
			  })  
          }
      })
      // 修改主机资源配额（磁盘）
      $scope.$watch('node.disk',function(newval,oldval){

          if(newval==oldval)
          {
             return false;
          }else
          {
        	  $http.get('/cloudui/ws/admins/isAccess',{params:{
				   userId:$rootScope.user.id,
				   menuId:angular.element('#nodedisk').attr('limit-id')
			   }}).success(function(data){
				   if(!data.result)
				   {
					   Notify.alert( 
			              '您没有此权限！', 
			              {status: 'info'}
			           ) 
			           $state.go('app.node',{clusterid:$stateParams.clusterid,nodeid:$stateParams.nodeid},{reload:true})  
				   }else{
			        	  $http({
			                  method  : 'PUT',
			                  url     : '/cloudui/ws/cluster/'+$stateParams.clusterid+'/node/'+$stateParams.nodeid+'/updateresource', 
			                  data    : $.param({disk:newval}),   
					          headers : { 'Content-Type': 'application/x-www-form-urlencoded' }   
			               }).success(function(data){
			                  if(data.result)
			                  {
			                    Notify.alert(
			                     '<em class="fa fa-check"></em> 修改成功！' ,
			                     {status: 'success'}
			                    );
			                  }else
			                  {
			                    Notify.alert(
			                      '<em class="fa fa-times"></em> 修改失败！' ,
			                      {status: 'danger'}
			                    );
			                  }
			               }) 
				   }
			   }) 
          }
      })
      // 修改主机名称
      $scope.$watch('node.name',function(newval,oldval){

          if(newval==oldval)
          {
             return false;
          }else
          {
        	  $http.get('/cloudui/ws/admins/isAccess',{params:{
				   userId:$rootScope.user.id,
				   menuId:angular.element('.nodename').attr('limit-id')
			  }}).success(function(data){
				  if(!data.result)
				  {
					  Notify.alert( 
			              '您没有此权限！', 
			              {status: 'info'}
			          ) 
			          $state.go('app.node',{clusterid:$stateParams.clusterid,nodeid:$stateParams.nodeid},{reload:true}) 
				  }else{
			             $http.get('/cloudui/ws/cluster/'+$stateParams.clusterid+'/checkNameByID',{params:{
			                 name:newval,
			                 id:$stateParams.nodeid
			              }}).success(function(data){
			                 if(data.result)
			                 {
			                    $http({
			                       method  : 'PUT',
			                       url     : '/cloudui/ws/cluster/'+$stateParams.clusterid+'/node/'+$stateParams.nodeid+'/updatename', 
			                       data    : $.param({name:newval}),   
			     		          headers : { 'Content-Type': 'application/x-www-form-urlencoded' }   
			                    }).success(function(data){
			                       if(data.result)
			                       {
			                         Notify.alert(
			                          '<em class="fa fa-check"></em> 修改成功！' ,
			                          {status: 'success'}
			                         );
			                       }else
			                       {
			                         Notify.alert(
			                           '<em class="fa fa-times"></em> 修改失败！' ,
			                           {status: 'danger'}
			                         );
			                       }
			                    })
			                 }
			              })
				  }
			  })
          }
      })

      // 修改主机标签
      $scope.$watch('node.labels',function(newval,oldval){
          if(newval==oldval)
          {
             return false;
          }else
          { 
        	  $http.get('/cloudui/ws/admins/isAccess',{params:{
				   userId:$rootScope.user.id,
				   menuId:angular.element('#nodelabels').attr('limit-id')
			   }}).success(function(data){
				   if(!data.result)
				   {
					   Notify.alert( 
			              '您没有此权限！', 
			              {status: 'info'}
			           ) 
			           $state.go('app.node',{clusterid:$stateParams.clusterid,nodeid:$stateParams.nodeid},{reload:true})
				   }else{
			              $http({
			                  method  : 'PUT',
			                  url     : '/cloudui/ws/cluster/'+$stateParams.clusterid+'/node/'+$stateParams.nodeid+'/updatelabel',
			                  data    : $.param({labels:newval}),   
					          headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
			              }).success(function(data){
			                  if(data.result)
			                  {
			                    Notify.alert(
			                      '<em class="fa fa-check"></em> 修改成功！' ,
			                      {status: 'success'}
			                    );
			                  }else
			                  {
			                    Notify.alert(
			                       '<em class="fa fa-times"></em> 修改失败！' ,
			                       {status: 'danger'}
			                    );
			                  }
			              })
				   }
			   })
          }
      })
  })
  
  $scope.$watch('ipdata',function(newval,oldval){
	 if(newval)
	 {
		 $scope.ipoff=true; 
	 }else
	 {
		 $scope.ipoff=false; 
	 }
  })
  
 
  promise.then(function(data){
	  var ip=data.data.ip;  
	  $scope.ipdata=ip;
	  
      // 主机监控
	  $scope.getNodeMonitorFn=function(){
	      $rootScope.nodeoff=false;
	      $http.get('/cloudui/ws/monitor/host/'+ip+'?v='+(new Date().getTime())).
	      success(function(data){
	         $rootScope.nodeoff=true;
	         $scope.nodeMonitor=data;
	         $rootScope.time=data.operstamp;
	         $rootScope.nodecpu=data.cpu;
	         $rootScope.nodemem=Number(((data.memusage/data.memtotal)*100).toFixed(2));
	         $rootScope.memusage=data.memusage;
	         $rootScope.memusage=data.memusage;
	         $rootScope.dickOutput=data.dickOutput;
	         $rootScope.diskInput=data.diskInput;
	         $rootScope.netOutput=data.netOutput;
	         $rootScope.netInput=data.netInput;
	      })
	 }
	  
	 $scope.getNodeMonitorFn();

     $scope.nodecpumemtime=$interval(function(){
      $scope.getNodeMonitorFn(); 
     },2000)
     
     $scope.nodewarningtime=$interval(function(){
    	 $scope.nodeWarningFn(ip);
     },60000)
     
     $scope.nodehistorytime=$interval(function(){
    	 $scope.onPageChange(ip,'',1);
     },5000)
     
     
     
	 $scope.nodeWarningFn(ip);
     
     // 表盘监控图
     chartGuage.chartGaugeFn('#node_cpu',{
	    text:'CPU使用率',
	    series:[{
	          name: 'cpu',
	          data: [0],
	          tooltip: {
	              valueSuffix: '%'
	          }
	      }]
	  },'nodecpu');
		 
	  chartGuage.chartGaugeFn('#node_mem',{
		    text:'内存使用率',
		    series:[{
		          name: 'mem',
		          data: [0],
		          tooltip: {
		              valueSuffix: '%'
		          }
		      }]
	  },'nodemem');
		   
	  // 折线监控图    
	  Highcharts.setOptions({                                                     
	        global: {                                                               
	            useUTC: false                                                       
	        }                                                                       
	  });
			  
			   
	  $http.get('/cloudui/ws/monitor/host/range/'+ip+'?v='+(new Date().getTime())).
	  success(function(data){
		 $scope.defaultData=data;
	  }).then(function(data){
		  var defaultData=data;
		  // cpu
		  chartArea.chartAreaFn('#cpucontainer',{
		        yAxis: {
		          title: {                                                            
		                    text: 'CPU使用率(%)'                                                   
		                },
		          labels:'%'
		        },
		        series: [
		        {                                                              
		            name: 'cpu使用率(%)',                                                
		            data: (function() { 

		                var dataarr = [],                                                                           
		                    i;                                                          
		                          
		                for (i = -19; i <= 0; i++) {                                    
		                  dataarr.push({                                                 
		                        x: defaultData.data[i+19].operstamp,                                     
		                        y: defaultData.data[i+19].cpu                                      
		                    });                                                         
		                }  

		                return dataarr;                                                    
		            })()                                                                
		        }]  
		      },'time','nodecpu');
			  // 内存 
			  chartArea.chartAreaFn('#memcontainer',{
			        title: {                                                                
			                text: '内存使用量'                                            
			        },
			        yAxis: {
			          title: {                                                            
			                    text: '内存使用量(MB)'                                                   
			                },
			          labels:'MB'
			        },
			        series: [
			        {                                                              
			          name: '内存使用量(MB)',                                                
			          data: (function() {                                                 

			              var dataarr = [],                                                                               
			                  i;                                                          

			              for (i = -19; i <= 0; i++) {                                    
			                dataarr.push({                                                 
			                      x: defaultData.data[i+19].operstamp,                                     
			                      y: defaultData.data[i+19].memusage                                      
			                  });                                                         
			              }  

			              return dataarr;                                                    
			          })()                                                                
			        }]  
			   },'time','memusage');
               // 磁盘
		       chartArea.chartAreaFn('#dickcontainer',{
		        title: {                                                                
		                text: '磁盘吞吐量'                                            
		        },
		        yAxis: {
		          title: {                                                            
		                    text: '磁盘吞吐量(MB)'                                                   
		                },
		          labels:'MB'
		        },
		        series: [
		        {                                                              
		            name: '磁盘吞吐量(读)(MB)',                                            
		            data: (function() {                                                 

		                var dataarr = [],                                                                                
		                    i;                                                          
		                           
		                for (i = -19; i <= 0; i++) {                                    
		                  dataarr.push({                                                 
		                        x: defaultData.data[i+19].operstamp,                                     
		                        y: defaultData.data[i+19].dickOutput                                      
		                    });                                                         
		                }  

		                return dataarr;                                                    
		            })()                                                                
		        },
		        {                                                              
		            name: '磁盘吞吐量(写)(MB)',  
		            color:'#fe8112',                                              
		            data: (function() {                                                 

		                var dataarr = [],                                                                            
		                    i;                                                          

		                for (i = -19; i <= 0; i++) {                                    
		                  dataarr.push({                                                 
		                        x: defaultData.data[i+19].operstamp,                                     
		                        y: defaultData.data[i+19].diskInput                                      
		                    });                                                         
		                }  

		                return dataarr;                                                    
		            })()                                                                
		        }
		        ]  
		      },'time','dickOutput','diskInput');
              // 网络带宽
			  chartArea.chartAreaFn('#netcontainer',{
		        title: {                                                                
		                text: '网络带宽'                                            
		        },
		        yAxis: {
		          title: {                                                            
		                    text: '网络带宽(kB)'                                                   
		                },
		          labels:'KB'
		        },
		        series: [
		        {                                                              
		            name: '网络带宽(出)(KB)',                                                
		            data: (function() {                                                 
	
		                var dataarr = [],                                                                              
		                    i;                                                          
		                           
		                for (i = -19; i <= 0; i++) {                                    
		                  dataarr.push({                                                 
		                        x: defaultData.data[i+19].operstamp,                                     
		                        y: defaultData.data[i+19].netOutput                                      
		                    });                                                         
		                }  
	
		                return dataarr;                                                    
		            })()                                                                
		        },
		        {                                                              
		            name: '网络带宽(进)(KB)',  
		            color:'#fe8112',                                              
		            data: (function() {                                                 
	
		                var dataarr = [],                                                                            
		                    i;                                                          
	
		                for (i = -19; i <= 0; i++) {                                    
		                  dataarr.push({                                                 
		                        x: defaultData.data[i+19].operstamp,                                     
		                        y: defaultData.data[i+19].netInput                                      
		                    });                                                         
		                }  
	
		                return dataarr;                                                    
		            })()                                                                
		        }
		        ]  
		      },'time','netOutput','netInput');
		})
			  
  })
  
  // 主机告警 
 
  $scope.nodeWarningFn=function(params)
  {  
     // 告警策略  
	 $http.get('/cloudui/ws/monitor/category/host/'+$stateParams.nodeid+'?v='+(new Date().getTime())).success(function(data){
	     $scope.nodeStrategyItems=data;
	     if($scope.nodeStrategyItems=='null')
         {
      	   $scope.nodeStrategyItemsoff=false;
         }else
         {
      	   $scope.nodeStrategyItemsoff=true;
         }
	 })

  }
 
 // 主机告警历史
 
 $scope.onPageChange = function (ip,cont,pageNum)
 { 
	   
	   if(!cont)
	   {
	 	  cont='*'
	   }

	   $http.get('/cloudui/ws/monitor/history/0/'+ip+'/user/'+$rootScope.user.id+'/content/'+cont+'/'+pageNum+'/'+$scope.pageSize+'?v=' + (new Date().getTime())).success(function(data){
	     $scope.nodeWarningHisrory = data;
	     $scope.pageCount=Math.ceil($scope.nodeWarningHisrory.total/$scope.pageSize);
	     if($scope.pageCount==0){
	    	 $scope.pageCount=1;
	     }
	    })  
    
 }
 
 // 搜素历史
 $scope.searchHistory=function(ip,params)
 {  
    $scope.onPageChange(ip,params,1);
 }

 // 解绑策略
 $scope.delBindNodeTactic=function(params,isrunning)
 {
  
   if(isrunning==1)
   {
	  Notify.alert(
          '<em class="fa fa-check"></em> 告警策略正在使用，请先停止告警策略，再解绑！' ,
          {status: 'info'}
      );
   }else
   {
	   $http({
	     method:'put',
	     url:'/cloudui/ws/monitor/category/resource/unbind',
	     data: $.param({
	       id:params,
	       resourceid:$stateParams.nodeid
	     }),
	     headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
	   }).success(function(data){
		   if(data.result)
	      	{
	      		 Notify.alert(
	                   '<em class="fa fa-check"></em> 解绑成功！' ,
	                   {status: 'success'}
	               );
	      		 
	      	    setInterval(function(){ 
			       $scope.$apply(function(){
			    	   $scope.nodeStrategyItemsoff=false;
			       })
			    },1)
	      	 }else
	      	 {
	      		 Notify.alert(
	                   '<em class="fa fa-times"></em> 解绑失败',
	                   {status: 'danger'}
	              ); 
	      	 } 
	   })
   }
 
 }
 
 
 
}])

/* 添加主机 */
mControllers.controller('addNode',['$scope','$http','ngDialog','$stateParams','$state','$interval',function($scope,$http,ngDialog,$stateParams,$state,$interval){
 
  $scope.clusterid=$stateParams.clusterid;
  
  $http.get('/cloudui/ws/cluster/'+$stateParams.clusterid+'/nodeurl'+'?v='+(new Date().getTime()),{
	 params:{os_version:$stateParams.os_version}  
  }).success(function(data){
	  $scope.scripturl=data;
  }) 
  
  // 验证表单
  $scope.submitted = false;
  $scope.validateInput = function(name, type) {
    var input = $scope.formaddnode[name];
    return (input.$dirty || $scope.submitted) && input.$error[type];
  };
  
  $scope.labellist=[];
  
  $scope.addLabelFn=function(){
     $scope.inserted = {
        id: $scope.labellist.length+1,
        key: '',
        val: ''
      };
      $scope.labellist.push($scope.inserted);
  }
  
  $scope.removeLabel=function(index){
    $scope.labellist.splice(index, 1);
  }
  
  $scope.formnodeData={};
  
  $scope.$watch('labellist',function(newval,oldval){
	  if($scope.labellist.length>0){
          $scope.formnodeData.labels='';     
          angular.forEach($scope.labellist,function(val,key){
        	 if(val.val&&val.key)
    		 { 
        		 if(key+1==$scope.labellist.length)
                 {
                    $scope.formnodeData.labels+=(val.key+'='+val.val);
                 }else
                 {
                    $scope.formnodeData.labels+=(val.key+'='+val.val)+',';
                 }
    		 }
          })
      }
  },true)
  
  
 $scope.checkNodeName=function(){
	  $scope.authMsg = '';
	  if($scope.formaddnode.name.$valid) {
		  $http.get('/cloudui/ws/cluster/'+$stateParams.clusterid+'/checkName',{params:{
              name:$scope.formnodeData.name
           }}).success(function(data){
        	   if(!data.result)
               {
        		   $scope.authMsg = '此主机已存在，请重新命名！';
               }
           })
	  }else { 
	      $scope.formaddnode.name.$dirty = true;
	  }

 }
 
 $scope.link=false;
 $scope.copyContact=function(){
	$scope.link=true;
	$interval.cancel(concatnode);	
	var concatnode=$interval(function(){
		$http.get('/cloudui/ws/cluster/'+$stateParams.clusterid+'/nodestatus',{
			params:{ip:$scope.formnodeData.ip}
		}).success(function(data){
			if(data.result)
			{
				$interval.cancel(concatnode);
				$scope.link=false;
				$state.go('app.cluster.nodes',{clusterid:$stateParams.clusterid},{reload:true});
			}
		})
	},5000)
 }

}])

// 添加主机标签
mControllers.controller('addLabel',['$scope','$http','$state','ngDialog','Notify',function($scope,$http,$state,ngDialog,Notify){
	 
    $scope.labellist=[];
    $scope.addLabelFn=function(){
       $scope.inserted = {
          id: $scope.labellist.length+1,
          key: '',
          val: ''
      };
      $scope.labellist.push($scope.inserted);
    }
    $scope.removeLabel=function(index){
      $scope.labellist.splice(index, 1);
    }
    // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formlabel[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
     };

    // 提交信息
    $scope.submitLabelForm=function(){
    	$scope.submitted = true;
	    if ($scope.formlabel.$valid) {
	    	if($scope.labellist.length>0){
	            $scope.labels='';
	            angular.forEach($scope.labellist,function(val,key){
	               if(key+1==$scope.labellist.length)
	               {
	                  $scope.labels+=(val.key+'='+val.val);
	               }else
	               {
	                  $scope.labels+=(val.key+'='+val.val)+',';
	               }
	               
	            })

	            if($scope.labels)
	            {
	            	$http({
	            		method:'PUT',
	            		url:'/cloudui/ws/cluster/'+$scope.ngDialogData.clusterid+'/node/'+$scope.ngDialogData.nodeid+'/updatelabel',
	            		data: $.param({labels:$scope.labels}),
	            		headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
	            	}).success(function(data){
	            		if(data.result)
            			{
            			   Notify.alert(
            	              '<em class="fa fa-check"></em> 添加成功！' ,
            	              {status: 'success'}
            	           );
            			   ngDialog.close();
            			   if($scope.ngDialogData.node)
            			   {
            				   $state.go('app.node.monitoring',{clusterid:$scope.ngDialogData.clusterid},{reload:true});  
            			   }else
            			   {
            				   $state.go('app.cluster.nodes',{clusterid:$scope.ngDialogData.clusterid},{reload:true});  
            			   }
            			   
            			}else
        				{
        				   Notify.alert(
                 	         '<em class="fa fa-times"></em> 添加失败！' ,
                 	         {status: 'danger'}
                 	       );
        				}
	            	})
	            }
	        }else
	        {
	        	Notify.alert(
	               '请添加标签!' ,
	               {status: 'info'}
	            );
	        }
	    }else
	    {
	    	Notify.alert(
		      '请输入标签的名称/值!' ,
		      {status: 'info'}
		    );
	    }
      
  

    }

}])


/* 应用列表  */

mControllers.controller('applistController',['$rootScope','$scope','$http','$state','Notify','ngDialog','$filter',function($rootScope,$scope,$http,$state,Notify,ngDialog,$filter){
   
	$scope.checkappId=[]; // 选中的应用

    // 获取应用列表 
    $scope.pageSize=10;
    $scope.appName='';

    
    
    $scope.onPageChange = function ()
    {   
      $http.get('/cloudui/ws/apps/listOperationApps'+'?v=' + (new Date().getTime()),{
      params:
          {
            pageNum:$scope.pageNum,
            pageSize:$scope.pageSize,
            appName:$scope.searchval
          }
     }).success(function(data){
    	
    	 angular.forEach(data.rows,function(val,key){
    		 var ischecked=$filter('filter')($scope.checkappId,val.appId).length>0?true:false;
    		 data.rows[key].ischecked=ischecked;
    	 })

    	 $scope.applist = data;
         $scope.pageCount=Math.ceil($scope.applist.total/$scope.pageSize);
         if($scope.pageCount==0)
         {
        	 $scope.pageCount=1;
         }
     })
    }

 // 搜素应用
    $scope.searchApp=function()
    {
         $scope.pageNum=1;
         $scope.onPageChange();
    }

 // 删除应用 

    $scope.delApp=function(index,appId)
    {
    	ngDialog.openConfirm({
            template:
                 '<p class="modal-header">您确定要删除此应用吗?</p>' +
                 '<div class="modal-body text-right">' +
                   '<button type="button" class="btn btn-default mr20"  ng-click="closeThisDialog(0)">取消' +
                   '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
                 '</button></div>',
           plain: true,
           className: 'ngdialog-theme-default'
         }).then(function(){
        	 $http({
                 method:"DELETE",
                 url:'/cloudui/ws/apps/deleteOperationApp/'+appId,
              }).then(function(response){
                 if(response.data.result)
                 {
                	 $scope.applist.rows.splice(index, 1);
                	 Notify.alert(
                       '<em class="fa fa-check"></em> ！'+response.data.message ,
                       {status: 'success'}
                     );
                 }else
                 {
                   Notify.alert(
                     '<em class="fa fa-times"></em> '+response.data.message ,
                     {status: 'danger'}
                   );
                 }
              }) 
         })
    }   

    // 导出应用模板
    $scope.outtemplate=function()
    {
    	 
    	var checkbox = $scope.checkappId;
        if(checkbox.length==0)
        {
           Notify.alert(
             '请选择要导出的应用！' ,
             {status: 'info'}
           );
        }else
        {
           var ids=[];
           var names=[];
           angular.forEach(checkbox,function(val,key){
        	   
        	   ids.push(val.split('&')[0]);
        	   names.push(val.split('&')[1]);
           })
           ids=ids.join(',');
           names=names.join(',');
        
           window.location.href = '/cloudui/ws/apps/template/export?appIds='+ids+'&appNames='+names;
        }
    }

}])

/* 应用详情   */

mControllers.controller('appController',['$rootScope','$scope','$http','$stateParams','$interval','ngDialog','$state','Notify','$timeout',function($rootScope,$scope,$http,$stateParams,$interval,ngDialog,$state,Notify,$timeout){

   // 应用基本信息  
   $http.get('/cloudui/ws/apps/getOperationAppdetail'+'?v=' + (new Date().getTime()),{params:{appId:$stateParams.appid}}).success(function(data){
       $scope.appinfo=data;
       $scope.extendoff=data.enable;
       $rootScope.status=data.status;
   })
   
   // 开启维护
 
   $scope.openextendoff=function(){
 
	   if($scope.extendoff!==undefined)
	   {
		   $http.get('/cloudui/ws/apps/updateRCScalable'+'?v='+(new Date().getTime()),{
			   params:{			   
				   appId:$stateParams.appid,
				   enable:$scope.extendoff
			   }
		   }).
		   success(function(data){
			   if(data.result)
			   {
				   Notify.alert(
	                  data.message ,
	                  {status: 'success'}
	           	  );
			   }else{
				   Notify.alert(
					  data.message ,
	                  {status: 'danger'}
	           	   );
			   }
		   })
	   }
   }

   // 升级回滚弹出框

   $scope.openRollback = function () {
	   
	   $http.get('/cloudui/ws/apps/findVersionIdAndInstancesNum/'+$stateParams.appid+'?v=' + (new Date().getTime())).
	   success(function(data){
          if(data.length<=1)
          {
        	  Notify.alert(
                  '当前应用只有一个版本，无法升级回滚实例!' ,
                  {status: 'info'}
           	  );
          }else
          {
        	  ngDialog.open({
        	        template: 'app/views/dialog_rollback.html'+'?action='+(new Date().getTime()),
        	        className: 'ngdialog-theme-default ngdialog-lg',
        	        scope: $scope,
        	        cache: false,
        	        data:{versionlist:data},
        	        controller:'RollbackController'
        	   });  
          }
	   })
   };
   
   // 查看升级.回滚进程弹出框
   $scope.openRollbackTask = function () {
	   ngDialog.open({
	        template: 'app/views/dialog_rollbacktask.html'+'?action='+(new Date().getTime()),
	        className: 'ngdialog-theme-default ngdialog-lg',
	        scope: $scope,
	        data:{appid:$stateParams.appid},
	        cache: false,
	        controller:'RollbacktaskController'
	   });    
   }

   // 版本扩展弹出框

   $scope.openextend = function () {
      ngDialog.open({
        template: 'app/views/dialog_extend.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        scope: $scope,
        cache: false,
        controller:'extendController'
      });
   };

   // 应用启动  

   $scope.start=function()
   {
	  $rootScope.app.layout.isShadow=true;
      $http.get('/cloudui/ws/apps/start/'+$stateParams.appid+'?v=' + (new Date().getTime())).success(function(data){
    	  $rootScope.app.layout.isShadow=false;
    	  if(data.result)
          {
            Notify.alert(
              '<em class="fa fa-check"></em> '+data.message ,
              {status: 'success'}
            );
            
            $timeout(function(){
            	$http.get('/cloudui/ws/apps/getOperationAppdetail'+'?v=' + (new Date().getTime()),{params:{appId:$stateParams.appid}}).success(function(data){
                	$scope.appinfo=data;
      	    	    $rootScope.status=data.status;
      	    	    $scope.extendoff=data.enable;
                 }) 
            })
            
           
           
          }else
          {
        	 Notify.alert(
                '<em class="fa fa-times"></em> '+data.message ,
                {status: 'danger'}
             );
        	  
          }
      })
   }

   // 应用停止 

   $scope.stop=function()
   {
	  $rootScope.app.layout.isShadow=true;
      $http.get('/cloudui/ws/apps/stop/'+$stateParams.appid+'?v=' + (new Date().getTime())).success(function(data){
    	  $rootScope.app.layout.isShadow=false;
    	  if(data.result)
          {
            Notify.alert(
               '<em class="fa fa-check"></em> '+data.message ,
               {status: 'success'}
            );
            
            $timeout(function(){
            	$http.get('/cloudui/ws/apps/getOperationAppdetail'+'?v=' + (new Date().getTime()),{params:{appId:$stateParams.appid}}).success(function(data){
                	$scope.appinfo=data;
      	    	    $rootScope.status=data.status;
      	    	    $scope.extendoff=data.enable;
                 })
            })
          
          
          }else
          {
        	Notify.alert(
               '<em class="fa fa-times"></em> '+data.message ,
               {status: 'danger'}
            );
        	 
          }
      })
   }

   // 应用卸载 

   $scope.destroy=function()
   {
	  $rootScope.app.layout.isShadow=true;
      $http.get('/cloudui/ws/apps/destroy/'+$stateParams.appid+'?v=' + (new Date().getTime())).success(function(data){
    	  $rootScope.app.layout.isShadow=false;
    	  if(data.result)
          {
        	  Notify.alert(
                '<em class="fa fa-check"></em> '+data.message ,
                {status: 'success'}
              );
        	  
        	  $timeout(function(){
              	$http.get('/cloudui/ws/apps/getOperationAppdetail'+'?v=' + (new Date().getTime()),{params:{appId:$stateParams.appid}}).success(function(data){
                  	$scope.appinfo=data;
        	    	    $rootScope.status=data.status;
                   })
              })
          }else
          {
        	  Notify.alert(
                 '<em class="fa fa-times"></em> '+data.message ,
                 {status: 'danger'}
              );
        	  
          }
      })
   }
   
   // 所有实例列表
  /* $http.get('/cloudui/ws/apps/getOperationAppInstances'+ '?v=' + (new Date().getTime()),{
       params:{appId:$stateParams.appid}
   }).success(function(data){
   	$scope.instances=data;
   	$scope.instanceId=data[0].instanceId;
   })*/

}])

/* 升级.回滚任务 */
mControllers.controller('RollbacktaskController',['$scope','$http','ngDialog','Notify',function($scope,$http,ngDialog,Notify){
	// 任务信息
	$http.get('/cloudui/ws/apps/rollingUpdateDetail'+'?v='+(new Date().getTime()),{
		params:{
			appId:$scope.ngDialogData.appid
		}
	}).success(function(data){
		var msg=data.message.replace(/\n/ig,"<br/>")
		$('.logcont').html(msg);
	   if(data.exist)
	   {
		   $scope.suspend=data.suspend;
		   
	   }else{
		   $scope.message=data.message;
	   }
	})
	
	// 手动暂停任务
	$scope.stopRollback=function(){
		$http.get('/cloudui/ws/apps/suspendRollingUpdate'+'?v='+(new Date().getTime()),{
			params:{
				appId:$scope.ngDialogData.appid	
			}
		}).
		success(function(data){
			if(data.result)
			{
				 Notify.alert(
   	                ''+data.message ,
   	                {status: 'info'}
   	             );
			}else{
				Notify.alert(
   	                ''+data.message ,
   	                {status: 'info'}
   	             );
			}
		})
	}
	
	// 手动恢复任务
	$scope.startRollback=function(){
		$http.get('/cloudui/ws/apps/resumeRollingUpdate'+'?v='+(new Date().getTime()),{
			params:{
				appId:$scope.ngDialogData.appid	
			}
		}).
		success(function(data){
			if(data.result)
			{
				 Notify.alert(
   	                ''+data.message ,
   	                {status: 'info'}
   	             );
			}else{
				Notify.alert(
   	                ''+data.message ,
   	                {status: 'info'}
   	             );
			}
		})
	}
	
	// 手动删除任务
	$scope.delRollback=function(){
		$http.delete('/cloudui/ws/apps/deleteRollingUpdateJob'+'?v='+(new Date().getTime()),{
			params:{
				appId:$scope.ngDialogData.appid	
			}
		}).
		success(function(data){
			if(data.result)
			{
				 Notify.alert(
   	                ''+data.message ,
   	                {status: 'info'}
   	             );
			}else{
				Notify.alert(
   	                ''+data.message ,
   	                {status: 'info'}
   	             );
			}
		})
	}
	
}])

/* 应用版本列表 */

mControllers.controller('appversionController',['$rootScope','$scope','$http','$stateParams','Notify','$state','ngDialog','$interval',function($rootScope,$scope,$http,$stateParams,Notify,$state,ngDialog,$interval){
	 
	  $scope.$on('$destroy', function() {
		 $interval.cancel($scope.vertimer);  
	  });
	
	   $scope.pageSize=10;
	   $scope.onPageChange = function ()
	    { 
		  
	      $http.get('/cloudui/ws/apps/listOperationAppVersions'+ '?v=' + (new Date().getTime()),{
	      params:
	          {
	            pageNum:$scope.pageNum,
	            pageSize:10,
	            appId:$stateParams.appid
	          }
	     }).success(function(data){
	        $scope.appVersion = data;
	        $scope.pageCount=Math.ceil($scope.appVersion.total/$scope.pageSize);
	        if($scope.pageCount==0)
	        {
	        	$scope.pageCount=1;
	        }
	     })
	    }
	   
	   // 实时更新
	   $scope.vertimer=$interval(function(){
	    	$scope.onPageChange();
	    },3000)

	    // 版本删除

	    $scope.delVersion=function(num,id)
	    {
		   if(num!==0)
		   {
			   Notify.alert(
   	                '版本上有实例，不能删除' ,
   	                {status: 'info'}
   	            ); 
			   return false;
		   }
	    	ngDialog.openConfirm({
	            template:
	                 '<p class="modal-header">您确定要删除此版本吗?</p>' +
	                 '<div class="modal-body text-right">' +
	                   '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
	                   '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
	                 '</button></div>',
	           plain: true,
	           className: 'ngdialog-theme-default'
	         }).then(function(){
	        	 $http({
	   	          method:'DELETE',
	   	          url:'/cloudui/ws/apps/deleteOperationAppVersion/'+id
	   	         }).success(function(data){
	   	           if(data.result)
	   	           {
	   	        	 
	   	             Notify.alert(
	   	                '<em class="fa fa-check"></em> '+data.message ,
	   	                {status: 'success'}
	   	             );
	   	             $state.go('app.appdetail.version',{appid:$stateParams.appid},{reload:true});
	   	           }else
	   	           {
	   	        	   Notify.alert(
	   	   	               '<em class="fa fa-times"></em> '+data.message ,
	   	   	               {status: 'danger'}
	   	   	           );
	   	           }
	   	       })
	        })
	    }

	    // 版本部署选择集群弹窗
	    $scope.openChoseCluster = function (param1,param2) {
	        ngDialog.open({
	          template: 'app/views/dialog_chosecluster.html'+'?action='+(new Date().getTime()),
	          className: 'ngdialog-theme-default ngdialog-sm',
	          scope: $scope,
	          cache: false,
	          data:{curversion:param1,app:param2},
	          controller:'chosecluster'
	        });
	   };
	    
}])

/* 版本部署选择集群 */

mControllers.controller('chosecluster',['$rootScope','$scope','$http','$stateParams','Notify','$state','ngDialog',function($rootScope,$scope,$http,$stateParams,Notify,$state,ngDialog){
	 
	$http.get('/cloudui/ws/apps/getUserCluster'+'?v=' + (new Date().getTime())).success(function(data){
		 $scope.clusterlist=data;
		 $scope.chosecluster=data[0].id;
	 })
 
	// 版本部署

	$scope.deploy=function(item,app){
	    
	  $http.post('/cloudui/ws/apps/rollingUpgrade'+ '?v=' + (new Date().getTime()),
	    {
	      appId:app.appId,
	      currentVersionId:-1,
	      newVersionId:-1
	    }
	  ).success(function(data){
	      $rootScope.app.layout.isShadow=false;
          if(data.result)
          {
              Notify.alert(
                '<em class="fa fa-check"></em> '+data.message ,
                 {status: 'success'}
              );
              $state.go('app.appdetail.version',{appid:$stateParams.appid},{reload:true});
          }else
          {
            Notify.alert(
	           '<em class="fa fa-times"></em> '+data.message ,
	           {status: 'danger'}
	        );
          }
	     })
	}
	 
	// 更新集群
	$scope.updateCluster=function(){
     $rootScope.app.layout.isShadow=true;
	 $http.get('/cloudui/ws/apps/doOperationAppClusterUpdate'+'?v=' + (new Date().getTime()),{
		 params:{
			 appId:$stateParams.appid,
			 clusterId:$scope.chosecluster,
			 versionId:$scope.ngDialogData.curversion.versionId
		 }
	 }).success(function(data){
		 ngDialog.close();
		 if(data.result)
		 {
			 $scope.deploy($scope.ngDialogData.curversion,$scope.ngDialogData.app) ;
		 }else
		 {
			 $rootScope.app.layout.isShadow=false;
			 Notify.alert(
	           '<em class="fa fa-times"></em> '+data.message ,
	           {status: 'danger'}
	         );
		 }
	 }) 
   }
}])

/* 应用监控 */
mControllers.controller('appmonitorController',['$rootScope','$scope','$http','$stateParams','$interval','chartGuage','chartArea','Notify','$filter',function($rootScope,$scope,$http,$stateParams,$interval,chartGuage,chartArea,Notify,$filter){
	
	$scope.$on('$destroy', function() {
        $interval.cancel($scope.cpumemtime);   
        $interval.cancel($scope.warningtime);
        $interval.cancel($scope.tasktimer);
        $interval.cancel($scope.apphistorytime); 
    });
	
	// 指标文本

    $scope.normtext=function(params)
    {
       switch(params)
       {
         case 'cpu':
         var text='CPU使用率';
         break;
         case 'mem':
         var text='内存使用率';
         break;
         case 'apprunningstate':
         var text='组件运行异常';
         break;
         case 'instancerunningstate':
         var text='实例运行异常';
         break;
         case 'hostrunningstate':
         var text='主机运行异常';
         break;
         case 'logscan':
         var text='组件日志扫描';
         break;
         case 'accesstimes':
         var text='访问次数';
         break;
       }
       return text;
    }

    // 条件文本

    $scope.conditiontext=function(params)
    {
       switch(params)
       {
         case 'min':
         var text='小于';
         break;
         case 'max':
         var text='大于';
         break;
         case '无':
         var text='无';
         break;
       }
       return text;
    }

    // 阈值文本

    $scope.valtext=function(param1,param2)
    {
    
      var rulename=param1.split('_')[0];
  
      if(param2=='stop')
      {
        return '无';
      }else if(rulename=='accesstimes')
      {
        return angular.fromJson(param2).value;
      }else
      {
        return param2;
      }
    }
    
    $rootScope.avgtimeSeries=[];
	
	$scope.getCpuMem=function(){
	      $http.get('/cloudui/ws/monitor/app/'+$stateParams.appid+'?v='+(new Date().getTime())).
	      success(function(data){
	         $rootScope.cpu=data.appCpu;
	         $rootScope.mem=data.appMem;
	         $scope.appMonitor=data;
	      })   
    }

	$scope.getCpuMem();
	
    $scope.$watch('curidarr',function(newval,oldval){
    	 
    	 
    	  
	      if(newval&&$scope.defaultidarr&&newval.length>0)
	      {
	    	 
	    	 
	         /*if(!angular.equals(newval,$scope.idarr))
	         {
	            console.log(11);
	            $('#requestnum').highcharts().destroy();
	            $scope.areAvgtime(); 
	         }*/
	    	  
	    	  
	    	  
	    	  if(!(newval.toString()===$scope.defaultidarr.toString()))
	    	  {
	    		  console.log(11);
	    		  console.log($scope.defaultidarr);
		    	  console.log(newval);
	    		  
		           // $('#requestnum').highcharts().destroy();
		            $scope.areAvgtime();
	    	  }
	         
	      }
    })
	
	$scope.avgTime=function(){
		   
	       $rootScope.nodeoff=false;
	       $http.get('/cloudui/ws/monitor/app/avgtime/'+$stateParams.appid+'?v='+(new Date().getTime())).
	        success(function(data){
	            $rootScope.nodeoff=true;
	            $rootScope.time=data.operstamp;
	            $scope.curidarr=[];

	            angular.forEach(data.versions,function(val,key){
	                 $scope.curidarr.push(val.versionId);
	            })
                console.log($scope.curidarr);
	            console.log($scope.defaultidarr);

	              $rootScope.avgtime1=($filter('filter')(data.versions,$scope.defaultidarr[0]))[0].value*1000; 
	              $rootScope.avgtime2=($filter('filter')(data.versions,$scope.defaultidarr[1]))[0].value*1000;
	         
	              console.log($rootScope.avgtime1);
	              console.log($rootScope.avgtime2);
	        })
	  }
    
    

    $scope.cpumemtime=$interval(function(){
      $scope.getCpuMem();
      $scope.avgTime();
    },5000)
    
    $scope.warningtime=$interval(function(){
      $scope.monitor();
    },60000)
    
    $scope.apphistorytime=$interval(function(){
        $scope.onPageChange('',1)
    },5000)

	   
	 chartGuage.chartGaugeFn('#app_cpu',{
	    text:'CPU使用率',
	    series:[{
	          name: 'cpu',
	          data: [0],
	          tooltip: {
	              valueSuffix: '%'
	          }
	      }]
	  },'cpu');
	 
	  chartGuage.chartGaugeFn('#app_mem',{
	    text:'内存使用率',
	    series:[{
	          name: 'mem',
	          data: [0],
	          tooltip: {
	              valueSuffix: '%'
	          }
	      }]
	  },'mem');
	  
     function arrayIndexOf(data, value) {
          
          var start = 0;

          for (var i=start; i<data.length; i++) {
            if (data[i] === value) {
              return i;
            }
          }
          
          return -1;

      }
		
	  // 平均响应时间监控
		
	  Highcharts.setOptions({                                                     
	        global: {                                                               
	            useUTC: false                                                       
	        }                                                                       
	  });
	  
	  $scope.areAvgtime=function(){
	   
		 var colorarr=['#7cb5ec','#fe8112'];
		 $rootScope.avgtimeSeries=[];
		  
	     var avgpromise=$http.get('/cloudui/ws/monitor/app/avgtime/'+$stateParams.appid+'?v='+(new Date().getTime()));
	     avgpromise.then(function(resp){
	    	 
	    	 $scope.defaultidarr=[];
	    	 angular.forEach(resp.data.versions,function(val,key){
	             $scope.defaultidarr.push(val.versionId);
	         })
	         
	         $http.get('/cloudui/ws/monitor/app/avgtime/range/'+$stateParams.appid+'?v='+(new Date().getTime())).then(function(res){
	        	
	        	 var rangedata=res;
	        	 
	        	 for(var j=0;j<$scope.defaultidarr.length;j++)
	 	         {
	 	             
	 	            $rootScope.avgtimeSeries.push({                                                              
	 	                name: $scope.defaultidarr[j],  
	 	                color:colorarr[j],   
	 	                data: (function() { 

	 	                    var dataarr = [], i;                                                                                
        
	 	                    for (i = -19; i <= 0; i++) { 
	 	                    
	 	                        var y=0;
	 	                  
		 	                    if(rangedata.data[i+19].versions.length==0)
		 	                    {
		 	                      y=0
		 	                    }else{
		 	                       var filterarr=$filter('filter')(rangedata.data[i+19].versions,$scope.defaultidarr[j]);
		 	                       
		 	                       if(filterarr.length>0){
		 	                    	  y=Number(filterarr[0].value)*1000; 
		 	                       }else{
		 	                    	  y=0 
		 	                       }
		 	                    }   
	 	                                            
		 	                    dataarr.push({                                                 
		 	                       x: rangedata.data[i+19].operstamp,                                     
		 	                       y:y
		 	                    });                                                         
	 	                    }  
	 	                    
	 	                  console.log(dataarr);
	 	                  
	 	                    return dataarr;                                                    
	 	                })()                                                                
	 	               })
	 	          }
	        	 
	        	 chartArea.chartAreaFn('#requestnum',{
	 	            yAxis: {
	 	              title: {                                                            
	 	                        text: '平均响应时间(毫秒)'                                                   
	 	                    },
	 	              labels:'毫秒'
	 	            },
	 	            series:$rootScope.avgtimeSeries  
	 	        },'time','avgtime1','avgtime2'); 
		     })
	         
	     })

	  }
	  
	  $scope.areAvgtime();
	  
	
	$scope.monitor=function()
	{
 
       // 监控实例列表 
       $http.get('/cloudui/ws/apps/getOperationAppInstances'+ '?v=' + (new Date().getTime()),{
    	   params:{appId:$stateParams.appid}
       }).success(function(data){
           $scope.appMonitorInstance=data;
       })
       
      // 监控策略 
       
       $http.get('/cloudui/ws/monitor/category/app/'+$stateParams.appid+'?v='+(new Date().getTime())).success(function(data){
           $scope.appStrategyItems=data; 
           
           if($scope.appStrategyItems=='null')
           {
        	   $scope.appStrategyItemsoff=false;
           }else
           {
        	   $scope.appStrategyItemsoff=true;
           }
        })  
      
      
   }
	    
    $scope.monitor();
    
 // 应用告警历史  
    
    $scope.pageSize=10;
    $scope.content='';
    $scope.onPageChange = function (cont,pageNum)
    {  
      
      if(!cont)
      {
    	  cont='*'
      }
      $http.get('/cloudui/ws/monitor/history/1/'+$stateParams.appid+'/user/'+$rootScope.user.id+'/content/'+cont+'/'+pageNum+'/'+$scope.pageSize+'?v=' + (new Date().getTime())).success(function(data){
        $scope.appWarningHisrory = data;
        $scope.pageCount=Math.ceil($scope.appWarningHisrory.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
       })
    }
    
   // 搜素历史
    $scope.searchHistory=function(params)
    {  
       $scope.onPageChange(params,1);
    }
    
 
    
	// 解绑策略
    
    $scope.delBindTactic=function(params,isrunning)
    {
      if(isrunning==1)
      {
    	  Notify.alert(
	          '<em class="fa fa-check"></em> 告警策略正在使用，请先停止告警策略，再解绑！' ,
	          {status: 'info'}
	      );
      }else
      {
    	  $http({
        	  method:'put',
        	  url:'/cloudui/ws/monitor/category/resource/unbind',
        	  data: $.param({
        		  id:params,
        		  resourceid:$stateParams.appid
        	  }),
        	  headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
          }).success(function(data){
        	 if(data.result)
        	 {
        		 Notify.alert(
                     '<em class="fa fa-check"></em> 解绑成功！' ,
                     {status: 'success'}
                 );
     
 	      	    setInterval(function(){ 
			       $scope.$apply(function(){
			    	   $scope.appStrategyItemsoff=false;
			       })
			    },1)
        	 }else
        	 {
        		 Notify.alert(
                     '<em class="fa fa-times"></em> 解绑失败',
                     {status: 'danger'}
                  ); 
        	 }
          }) 
      }
      	
    }
    
    // 任务
    
    $scope.taskFn=function(){
    	$scope.appTaskarr=[];
    	$http.get('/cloudui/ws/apps/rcMessages'+'?v='+(new Date().getTime()),{
    		params:{appId:$stateParams.appid}
    	}).success(function(data){
    		
    		
    		$scope.errorLogoff=!jQuery.isEmptyObject(data.errorLog);
            
            $scope.errorloglist=[];

            angular.forEach(data.errorLog,function(val,key){

                $scope.errorloglist.push(key+':'+val);
            })
    		
    	    angular.forEach(data.instanceTask,function(val,key){
    	        var taskobj={};
    	        taskobj.insid=key;
    	        taskobj.tasklist=val;
    	        $scope.appTaskarr.push(taskobj);  
    	    })
    	    
    	})
    }
    
    $scope.taskFn();
    
    $scope.tasktimer=$interval(function(){
    	$scope.taskFn();
    },500)
    
}])

/* 应用实例列表  */

mControllers.controller('appinstanceController',['$scope','$stateParams','$http','$state','Notify','ngDialog','$interval',function($scope,$stateParams,$http,$state,Notify,ngDialog,$interval){
	
	$scope.$on('$destroy', function() {
		 $interval.cancel($scope.instimer);  
	});
	
    $scope.pageSize=10;
    $scope.onPageChange = function ()
    {
      $http.get('/cloudui/ws/apps/list/instances/'+$stateParams.appid+'?v=' + (new Date().getTime()),{
      params:
          {
            pageNum:$scope.pageNum,
            pageSize:10
          }
     }).success(function(data){
        $scope.appInstance = data;
        $scope.pageCount=Math.ceil($scope.appInstance.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
     })
    }
    
    $scope.instimer=$interval(function(){
    	$scope.onPageChange();
    },3000)
    
    // 删除实例
    $scope.delInstance=function(params){
    	ngDialog.openConfirm({
            template:
                 '<p class="modal-header">您确定要删除此实例吗?</p>' +
                 '<div class="modal-body text-right">' +
                   '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                   '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
                 '</button></div>',
           plain: true,
           className: 'ngdialog-theme-default'
        }).then(function(){
       	 $http({
             method  : 'POST',
             url     : '/cloudui/ws/apps/doOperationInstance',
             data    : $.param({
            	 appId:$stateParams.appid,
            	 instanceId:params,
            	 op:"delete"
             }),   
             headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
          }).then(function(response) {
        	  if (response.data.result ) 
        	  {
        		  Notify.alert(
                     '<em class="fa fa-check"></em>'+response.data.message ,
                     {status: 'success'}
                  );
        		  $state.go('app.appdetail.instance',{appid:$stateParams.appid},{reload:true});
        	  }else
        	  {
        		  Notify.alert(
        	         '<em class="fa fa-times"></em>'+response.data.message ,
        	         {status: 'danger'}
        	      );  
        	  }
          }) 
        })
   }
    
 

}])

/* 容器监控 */
mControllers.controller('insWarningController',['$rootScope','$scope','$http','$interval','chartArea','$timeout','$stateParams',function($rootScope,$scope,$http,$interval,chartArea,$timeout,$stateParams){
	
	$scope.$on('$destroy', function() {
        $interval.cancel($scope.inscpumemtime); 
    });
	
	$scope.getInsMonitorFn=function(){
	      $rootScope.nodeoff=false;
	      $http.get('/cloudui/ws/monitor/instance/'+$stateParams.appId+'/'+$stateParams.instanceId+'?v='+(new Date().getTime())).
	      success(function(data){
	         $rootScope.nodeoff=true;
	         $rootScope.time=data.operstamp;
	         $rootScope.inscpu=data.cpu;
	         $rootScope.insmemusage=data.usedMem;
	         $rootScope.insdickOutput=data.dickOutput;
	         $rootScope.insdiskInput=data.diskInput;
	         $rootScope.insnetOutput=data.netOutput;
	         $rootScope.insnetInput=data.netInput;
	      })
	 }
	
	$scope.getInsMonitorFn();
	
	$scope.inscpumemtime=$interval(function(){
	    $scope.getInsMonitorFn(); 
	},2000)
	
	// 折线监控图    
	Highcharts.setOptions({                                                     
	        global: {                                                               
	            useUTC: false                                                       
	        }                                                                       
    });
	
 
	$http.get('/cloudui/ws/monitor/instance/range/'+$stateParams.appId+'/'+$stateParams.instanceId+'?v='+(new Date().getTime())).
	  success(function(data){
		 $scope.defaultData=data;
	}).then(function(data){
		  var defaultData=data;
		// cpu
		  chartArea.chartAreaFn('#cpucontainer',{
		        yAxis: {
		          title: {                                                            
		                    text: 'CPU使用率(%)'                                                   
		                },
		          labels:'%'
		        },
		        series: [
		        {                                                              
		            name: 'cpu使用率(%)',                                                
		            data: (function() { 

		                var dataarr = [],                                                  
		                   // time = (new Date()).getTime(), 
		               // time=233455677,
		                    i;                                                          
		                          
		                for (i = -19; i <= 0; i++) {                                    
		                  dataarr.push({                                                 
		                        x: defaultData.data[i+19].operstamp,                                     
		                        y: defaultData.data[i+19].cpu                                    
		                    });                                                         
		                }  

		                return dataarr;                                                    
		            })()                                                                
		        }]  
		      },'time','inscpu');
		  // 内存 
		  chartArea.chartAreaFn('#memcontainer',{
		        title: {                                                                
		                text: '内存使用量'                                            
		        },
		        yAxis: {
		          title: {                                                            
		                    text: '内存使用量(MB)'                                                   
		                },
		          labels:'MB'
		        },
		        series: [
		        {                                                              
		          name: '内存使用量(MB)',                                                
		          data: (function() {                                                 

		              var dataarr = [],                                                  
		                                              
		                  i;                                                          

		              for (i = -19; i <= 0; i++) {                                    
		                dataarr.push({                                                 
		                      x:defaultData.data[i+19].operstamp,                                     
		                      y: defaultData.data[i+19].usedMem                                     
		                  });                                                         
		              }  

		              return dataarr;                                                    
		          })()                                                                
		        }]  
		   },'time','insmemusage');
		  
		// 磁盘
	      chartArea.chartAreaFn('#dickcontainer',{
	       title: {                                                                
	               text: '磁盘吞吐量'                                            
	       },
	       yAxis: {
	         title: {                                                            
	                   text: '磁盘吞吐量(MB)'                                                   
	               },
	         labels:'MB'
	       },
	       series: [
	       {                                                              
	           name: '磁盘吞吐量(读)(MB)',                                            
	           data: (function() {                                                 

	               var dataarr = [],                                                  
	                                                  
	                   i;                                                          
	                          
	               for (i = -19; i <= 0; i++) {                                    
	                 dataarr.push({                                                 
	                       x: defaultData.data[i+19].operstamp,                                     
	                       y: defaultData.data[i+19].dickOutput                                      
	                   });                                                         
	               }  

	               return dataarr;                                                    
	           })()                                                                
	       },
	       {                                                              
	           name: '磁盘吞吐量(写)(MB)',  
	           color:'#fe8112',                                              
	           data: (function() {                                                 

	               var dataarr = [],                                                  
	                                                 
	                   i;                                                          

	               for (i = -19; i <= 0; i++) {                                    
	                 dataarr.push({                                                 
	                       x: defaultData.data[i+19].operstamp,                                     
	                       y: defaultData.data[i+19].diskInput                                      
	                   });                                                         
	               }  

	               return dataarr;                                                    
	           })()                                                                
	       }
	       ]  
	     },'time','insdickOutput','insdiskInput');
	      
	      // 网络带宽
		  chartArea.chartAreaFn('#netcontainer',{
	        title: {                                                                
	                text: '网络带宽'                                            
	        },
	        yAxis: {
	          title: {                                                            
	                    text: '网络带宽(kB)'                                                   
	                },
	          labels:'KB'
	        },
	        series: [
	        {                                                              
	            name: '网络带宽(出)(KB)',                                                
	            data: (function() {                                                 

	                var dataarr = [],                                                  
	                                                   
	                    i;                                                          
	                           
	                for (i = -19; i <= 0; i++) {                                    
	                  dataarr.push({                                                 
	                        x: defaultData.data[i+19].operstamp,                                     
	                        y: defaultData.data[i+19].netOutput                                      
	                    });                                                         
	                }  

	                return dataarr;                                                    
	            })()                                                                
	        },
	        {                                                              
	            name: '网络带宽(进)(KB)',  
	            color:'#fe8112',                                              
	            data: (function() {                                                 

	                var dataarr = [],                                                  
	                                                
	                    i;                                                          

	                for (i = -19; i <= 0; i++) {                                    
	                  dataarr.push({                                                 
	                        x: defaultData.data[i+19].operstamp,                                     
	                        y: defaultData.data[i+19].netInput                                      
	                    });                                                         
	                }  

	                return dataarr;                                                    
	            })()                                                                
	        }
	        ]  
	      },'time','insnetOutput','insnetInput');
	})
	     
}])

/* 应用日志 */

mControllers.controller('applogController',['$scope','$http','$stateParams','Notify','$timeout',function($scope,$http,$stateParams,Notify,$timeout){
    
	// 所有实例列表
    $http.get('/cloudui/ws/apps/getOperationAppInstances'+ '?v=' + (new Date().getTime()),{
       params:{appId:$stateParams.appid}
    }).success(function(data){
   	$scope.instances=data;
   	$scope.instanceId=data[0].instanceId;
   })
	// 日志查询   
   $scope.queryoff=false;
	$scope.onPageChange = function (param)
	{
		
		
		$http.get('/cloudui/ws/apps/queryInstanceLog'+'?v='+(new Date().getTime()),{
          params:
              {
        	    appId:$stateParams.appid,
  			    instanceId:$scope.instanceId,
  			    keyWord:$scope.keyWord||'',
  			    fromDate:$scope.startdate,   
  			    toDate:$scope.enddate,
                pageNum:param,
                pageSize:$scope.pageSize
              }
        }).success(function(data){
        	if(data.result)
		    {
				var msg=data.msg;
				msg=msg.replace(/\r\n/ig,"<br/>")
				$('.logcont').html(msg);
				$scope.pageCount=Math.ceil(data.total/$scope.pageSize);
				if($scope.pageCount==0){
					$scope.pageCount=1;
				}
				 
		    }else
			{
				Notify.alert(
	              '<em class="fa fa-check"></em> '+data.msg ,
	              {status: 'success'}
	            );
			}
            
            
        })
	}
   $scope.querylog=function(){
		var daterange=$('.daterange').val();
		 
		$scope.startdate=new Date(daterange.split('-')[0]).valueOf();
		$scope.enddate=new Date(daterange.split('-')[1]).valueOf();
		
		$scope.pageSize=1000;
		
	 
		 
		$scope.queryoff=false;
		
		$timeout(function(){
			$scope.queryoff=true;
		},1)
		 
	 
		 
 
	}
    
    // 日志导出
    $scope.exportlog=function(){
		var daterange=$('.daterange').val(); 
		var startdate=new Date(daterange.split('-')[0]).valueOf();
		var enddate=new Date(daterange.split('-')[1]).valueOf();
        var keyWord=$scope.keyWord||'';
		window.location.href = '/cloudui/ws/apps/exportInstanceLog?appId='+$stateParams.appid+'&instanceId='+$scope.instanceId+'&keyWord='+keyWord+'&fromDate='+startdate+'&toDate='+enddate;
    }
}])

/* 应用事件 */

mControllers.controller('appeventsController',['$scope','$http','$stateParams',function($scope,$http,$stateParams){
   // 应用事件  
   $http.get('/cloudui/ws/apps/list/events/'+$stateParams.appid).success(function(data){
       $scope.appEvents=data;
   })
}])



/* 控制台 */

mControllers.controller('controlController',['$scope','$http','ngDialog','$stateParams','Notify',function($scope,$http,ngDialog,$stateParams,Notify){
 
	 
	  // shell弹出框
	 $scope.openShell = function () {
		  $http.get('/cloudui/ws/apps/getGateOneUrl'+'?v='+(new Date().getTime()),{
		    params:{appId:$stateParams.appid}
		  }).
		  success(function(data){
		    if(data.result)
		    {
		       $scope.shellurl=data.url;
		       ngDialog.open({
			        template: 'app/views/dialog_shellip.html'+'?action='+(new Date().getTime()),
			        className: 'ngdialog-theme-default ngdialog-sm',
			        scope: $scope,
			        data:{url:$scope.shellurl},
			        cache: false,
			        controller:'shellip'
			    });
		    }else
		    {
		      
		      Notify.alert(
		                data.message ,
		                {status: 'danger'}
		      );
		    }
		    
		  })
		      
	 }; 
	
 
}])

mControllers.controller('shellip',['$scope','ngDialog',function($scope,ngDialog){
	$scope.shellip=$scope.ngDialogData.url.split('//')[1].split(':')[0];
	$scope.shellport=$scope.ngDialogData.url.split('//')[1].split(':')[1];
	$scope.shellFn=function(){
		ngDialog.open({
	        template: 'app/views/dialog_shell.html'+'?action='+(new Date().getTime()),
	        className: 'ngdialog-theme-default ngdialog-lg',
	        scope: $scope,
	        data:{ip:$scope.shellip,port:$scope.shellport},
	        cache: false,
	        controller:'shell'
	    });
	}
}])

mControllers.controller('shell',['$scope','$timeout','$sce',function($scope,$timeout,$sce){
	$scope.myURL = $sce.trustAsResourceUrl('http://'+$scope.ngDialogData.ip+':'+$scope.ngDialogData.port); 
}])

/* 升级回滚 */

mControllers.controller('RollbackController',['$rootScope','$scope','$http','$stateParams','$filter','Notify','ngDialog',function($rootScope,$scope,$http,$stateParams,$filter,Notify,ngDialog){
 
 $scope.choseVersion=function(params1,params2){
     var curchose=$filter('filter')(params2,params1)[0];

     $scope.chose_instancesNumber=curchose.instancesNumber
 }
 
 $scope.expectCurrentVNumFn=function(){
	 
     $scope.expectCurrentVNum=$scope.curVersion.instancesNumber+$scope.chose_instancesNumber-$scope.expectNewVNum;
 }
 
 $scope.versionlist=$scope.ngDialogData.versionlist;
 $scope.curVersion=$filter('filter')($scope.versionlist,'true')[0];
 $scope.otherVersion=$filter('filter')($scope.versionlist,'false');
 $scope.choseid=$scope.otherVersion[0].versionId;
 $scope.choseVersion($scope.otherVersion[0].versionId,$scope.otherVersion);
 
 $scope.updateOrRollback=function(){
	$rootScope.app.layout.isShadow=true;
    $http.post('/cloudui/ws/apps/updateOrRollbackAppInstances',{
        appId:$stateParams.appid,
        currentVersionId:$scope.curVersion.versionId,
        currentVNum:$scope.curVersion.instancesNumber,
        newVersionId:$scope.choseid,
        newVNum:$scope.chose_instancesNumber,
        expectCurrentVNum:$scope.expectCurrentVNum,
        expectNewVNum:$scope.expectNewVNum
     }).then(function(response){
    	 $rootScope.app.layout.isShadow=false;
     
         if(response.data.result)
         {
           Notify.alert(
              '<em class="fa fa-check"></em> '+response.data.message ,
              {status: 'success'}
           );
           ngDialog.close();
         }else
         {
        	Notify.alert(
                '<em class="fa fa-times"></em> '+response.data.message ,
                {status: 'danger'}
             );
        	 ngDialog.close();
         }
     })
   }
 
}])

/* 版本扩展  */
mControllers.controller('extendController',['$rootScope','$scope','$http','$state','$stateParams','Notify','ngDialog','$filter',function($rootScope,$scope,$http,$state,$stateParams,Notify,ngDialog,$filter){
    
  $scope.account = {};
 
  $scope.authMsg = '';

  $http.get('/cloudui/ws/apps/listOperationAppVersions'+ '?v=' + (new Date().getTime()),{
      params:
          {
            pageNum:1,
            pageSize:100,
            appId:$stateParams.appid
          }
  }).success(function(data){
        $scope.curv=$filter('filter')(data.rows,true,true)[0];
        $scope.othervlist=$filter('filter')(data.rows,false,true);
        $scope.account.curscaleCount=$scope.curv.instanceNumberRc;
       
        
        angular.forEach($scope.othervlist,function(val,key){
        	if(val.instancesNumber)
        	{
        		$scope.otherv=val;
        	}
        })
        
        $scope.account.otherscaleCount=$scope.otherv.instanceNumberRc;
        
  })
  
  $scope.extendFn = function(obj) {
	     
	    $scope.authMsg = '';
	    
	    $scope.scaleCount={};

	    $scope.scaleCount[$scope.curv.versionId]=$scope.account.curscaleCount;
 
	    if($scope.otherv)
	    {
	    	 $scope.scaleCount[$scope.otherv.versionId]=$scope.account.otherscaleCount;
	    }
	   
	    
	    if($scope.entendForm.$valid) {
	       $http.post('/cloudui/ws/apps/maintainAppInstances',{
	          appId:$stateParams.appid,
	          scaleCount:$scope.scaleCount
	       })
	       .then(function(response) {
	          if(response.data.result)
	          {
	        	  Notify.alert(
	                '<em class="fa fa-check"></em> '+response.data.message ,
	                {status: 'success'}
	              );
	        	  ngDialog.close();
	          }else
	          {
	        	  Notify.alert(
	                 '<em class="fa fa-times"></em> '+response.data.message ,
	                  {status: 'danger'}
	              );
	        	  ngDialog.close();
	          }
	       })

	    }
	    else { 
	      $scope.entendForm.curscaleCount.$dirty = true;
	      $scope.entendForm.otherscaleCount.$dirty = true;
	    }
	  };
	  

}])




/* 负载 */
mControllers.controller('loadController',['$rootScope','$scope','$http','$stateParams','Notify','ngDialog','$state',function($rootScope,$scope,$http,$stateParams,Notify,ngDialog,$state){

	
 $scope.opennewload=function(){
	 if($rootScope.status=='FREE')
     {
    	 Notify.alert(
        '该应用处于FREE状态，不可创建负载策略' ,
        {status: 'info'}
         );
     }else
     {
    	 ngDialog.open({
             template: 'app/views/dialog_newload.html'+'?action='+(new Date().getTime()),
             className: 'ngdialog-theme-default ngdialog-big',
             cache: false,
             controller:'newloadController'
         }); 
     }
 } 
 
 
  // 负载信息展示
	$http.get('/cloudui/ws/apps/getOperationLoadbalancer/'+'?appId='+$stateParams.appid+'&v=' + (new Date().getTime())).success(function(data){
		 
		if(data.result)
        {
          $scope.loadbaLancer=data.message;

		  switch (data.message.strategyType){ 
		  case "1" : 
			  $scope.strategyType="轮询"; 
		  break; 
		  case "2" : 
			  $scope.strategyType="优先权重"; 
		  break; 
		  default : 
			  $scope.strategyType="会话保持"; 
		  break; 
		} 
    	  
          
        }else{
        	$scope.loadbaLancer=null;
        	
        	if(data.message=='应用负载策略不存在'){
        		
        	}else{
        		Notify.alert(
                   '<em class="fa fa-check"></em> '+data.message ,
                   {status: 'success'}
                );
        	}
        }
	  })
	// 删除配置
	  $scope.delload=function(param){
		 ngDialog.openConfirm({
	         template:
	              '<p class="modal-header">您确定要删除此配置?</p>' +
	              '<div class="modal-body text-right">' +
	                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
	                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
	              '</button></div>',
	        plain: true,
	        className: 'ngdialog-theme-default'
	     }).then(function(){
	    	 $rootScope.app.layout.isShadow=true;
	    	 $http.delete('/cloudui/ws/apps/operationLoadbalancerDelete'+'?v='+(new Date().getTime()),{
		 		   params:{
		 			  appId:$stateParams.appid,
		 			  id:param
		 		   }
		 	 }).success(function(data){
		 		$rootScope.app.layout.isShadow=false;
		 		 if(data.result)
		 		 {
		 			Notify.alert(
		                '<em class="fa fa-check"></em> '+data.message ,
		                {status: 'success'}
		 	         );
		 			$state.go('app.appdetail.load',{appid:$stateParams.appid},{reload:true});
		 		 }else{
		 			Notify.alert(
		                '<em class="fa fa-times"></em> '+data.message ,
		                {status: 'danger'}
		 	         );
		 		 }
		 	 })
	     })
	  }
}])

/* 创建/更新负载 */
mControllers.controller('newloadController',['$rootScope','$scope','$http','ngDialog','$filter','$stateParams','Notify','$state','$timeout',function($rootScope,$scope,$http,ngDialog,$filter,$stateParams,Notify,$state,$timeout){

	$scope.model={}
	
	// 负载信息
	var loadPromise=$http.get('/cloudui/ws/apps/getOperationLoadbalancer/'+'?appId='+$stateParams.appid+'&v=' + (new Date().getTime()));
    
    // 优先权重展示实例列表
    $scope.changestrategyType=function(params){
	    if(params=='2')
	    {
	      $scope.instancesoff=true;
	    }else
	    {
	      $scope.instancesoff=false;
	    }
    }
    
    $scope.validateInput = function(name, type) {
        var input = $scope.formins[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };
	
	// 是否对外发布 
	$scope.ispublic=true;
	$scope.ispublicFn=function(e,params){
		  e = e || window.event;
		  if (e.preventDefault) {
		        e.preventDefault();//IE以外 
		  } else {
		      e.returnValue = false;//IE    
		  }

		  if($scope.instanceWeightlist.length==1&&!params)
		  {
			  Notify.alert(
	             '该应用只有一个实例，只能创建一级负载！',
	             {status: 'info'}
		      );
			  $scope.ispublic=!params;
		  }else
		  {
			  $scope.ispublic=params; 
		  }
	 }
	
	 // 二级负载选择已有负载均衡器

	  $scope.choseLoadLancer=function(params)
	  {
	      if(params=='newload')
	      {
	       // $scope.choseloadbaLancer=true;
	        //应用所在集群的负载均衡器
	        $http.get('/cloudui/ws/apps/listOperationLbalancers'+'?v=' + (new Date().getTime()),{
	          params:{appId:$stateParams.appid}
	        }).
	        success(function(data){
	          $scope.balancersList=data;
	          $scope.model.seleteloadbaLancedr=$scope.balancersList[0].id;
	         /* if($scope.balancersList.length>0)
	          {
	        	  $scope.choseoff=true;
	          }else
	          {
	        	  $scope.choseoff=false;
	          }*/
	        }) 
	      }else
	      {
	        //$scope.choseloadbaLancer=false; 
	      }
	  }
	  
	  
	  loadPromise.then(function(res){
		  if(res.data.result)
		  { 
			  var defaultdatainfo=res.data.message;
			  $scope.loadinfo=res.data.message;
			  $scope.baLancername=defaultdatainfo.name;
			  $scope.strategyType=Number(defaultdatainfo.strategyType);
			  $scope.ispublic=defaultdatainfo.isPublic;
			  $scope.instanceWeightlist=defaultdatainfo.weightValues;
			  $scope.baLancerid=defaultdatainfo.id;
			
			  if($scope.strategyType==2)
		      {
		       $scope.instancesoff=true;
		      // $scope.changestrategyType(2,defaultdatainfo.weightValues);
		      }
			  $scope.id=defaultdatainfo.id;
			  
			 // $scope.choseLoadLancer();
			  $scope.lisenterJson=$scope.loadinfo.lisenterJson;
			  
			  $scope.defaultdata=[];
		       
		      for(var i=0;i<defaultdatainfo.lisenterJson.length;i++)
		        {
		        	var everyport=defaultdatainfo.lisenterJson[i];
		        	var everyportdata={};
		       
		        	for(x in everyport)
			        {
			        	var obj={};
			        	obj=everyport[x];
						everyportdata[x]=obj;
					 
			        }
		        	$scope.defaultdata.push(everyportdata);
			      
		        }

		       
		        
		       // console.log($scope.defaultdata);
		  }else
		  {
			  $scope.instancesoff=false;
			  $scope.ispublic=true;
			  $scope.choseLoadLancer('newload');  
			  $scope.lisenterJson=[];
			// 实例列表
			    $http.get('/cloudui/ws/apps/getOperationAppInstances'+ '?v=' + (new Date().getTime()),{
			        params:{appId:$stateParams.appid}
			    }).success(function(data){
			    	$scope.instanceWeightlist=data;
			    })
		  }
	  })
	  
  
	
	// 负载策略
    $scope.strategyTypes = [
	  {value: 1, text: '轮询'},
	  {value: 2, text: '优先权重'},
	  {value: 3, text: '会话保持'}
    ];
    $scope.strategyType=$scope.strategyTypes[0].value;
    
    //端口协议
	
	$scope.$watch('ispublic',function(newval,oldval){
		if(newval)
		{
			$scope.potocolTypes = [
                   {value: 'https', text: 'https'},
                   {value: 'http', text: 'http'},
                   {value: 'tcp', text: 'tcp'}
             ];
		}else{
			$scope.potocolTypes = [
                   {value: 'http', text: 'http'},
                   {value: 'tcp', text: 'tcp'}
             ];
		}
	})
	
	 
	// 删除端口  
    $scope.removeport = function(index) {
      $scope.lisenterJson.splice(index, 1);
    }; 

	// 添加端口  
	$scope.addport = function() {
	    $scope.inserted = {
	      sourcePort: '',
	      targetPort: '',
	      potocolType: $scope.potocolTypes[0],
	      isTwoway:false,
	      context:''
	    };
	    
	   $scope.lisenterJson.push($scope.inserted);
	   
	};
	
	// 端口上下文验证
 
	
	$scope.portcontvalid=function(obj){
		if($scope.ispublic)
		{
			$scope.lbId=-1;
		}else{
			
			if($scope.baLancerid)
			{
				$scope.lbId=$scope.baLancerid;
			}else{
				if(!$scope.model.seleteloadbaLancedr)
				{
					Notify.alert( 
	               	   '请先选择负载均衡器！', 
	               	   {status: 'info'}
	                  );
				}else{
					$scope.lbId=$scope.model.seleteloadbaLancedr
				} 
			}
			
			
		} 
		var portValidPromise=$http.get('/cloudui/ws/apps/isExistSourcePort'+'?v='+(new Date().getTime()),{
    		params:{
    			lbId:$scope.lbId,
    			appId:$stateParams.appid,
    			isPublic:$scope.ispublic,
	    		id:obj.id||'',
	    		sourcePort:obj.sourcePort,
	    		potocolType:obj.potocolType,
	    		context:obj.context
    		}
    	}) 
    	return portValidPromise;
	}
	  
    $scope.validfocus=function(index){
    	angular.element('#portmeg'+index).html('')
    }
    
  
    $scope.$watch('lisenterJson',function(newval,oldval){

    	if(!newval)
    	{
    		return false;
    	}
    	
    	if(!oldval)
    	{
    		return false;
    	}
    	 
        
    	var iswrite=$filter('filter')(newval,'undefined');

    	if($scope.formport.$valid)
    	{
    		angular.forEach(newval,function(val,key){
    			if(!val.sourcePort)
    			{
    				iswrite=newval;
    			}
    		})
    	}

    	 
    	if($scope.formport.$valid&&newval.length>0)
    	{
    		 
    		 $scope.times=0;
             $scope.cycle=function(){

            	 if($scope.times>=newval.length)
            	 {
            		 
            		 return false;
            	 }
            	 
            	 
            	 if($scope.defaultdata)
            	 {
            		 
            		
            		 var isExit=angular.equals($scope.lisenterJson[$scope.times],$scope.defaultdata[$scope.times]);
                      
            		 if(isExit)
                	 {
            			 $scope.times+=1;
						 $scope.keeping=true;
						 $scope.cycle(); 
                		 return false;
                	 }else
                	 {
                		 
                	 }
            	 }
            	 
				 var portvalidresult=$scope.portcontvalid($scope.lisenterJson[$scope.times]);
				 portvalidresult.then(function(res){
					
					 if(res.data.result)
					 {
						 angular.element('#portmeg'+$scope.times).html('');
						 $scope.times+=1;
						 $scope.keeping=true;
						 $scope.cycle(); 
					 }else
					 {
						 $scope.kepping=false;
						 $scope.formport.$valid=false;
						 angular.element('#portmeg'+$scope.times).html(res.data.message);
					 }
				 })
			 } 
			 $scope.cycle(); 
    	}
    },true)
    
	
    // 提交创建/更新信息
    $scope.createLoadbaLancer = function (url,keeping,id) {
    	
    	 
       
        if($scope.strategyType!==2)
        {
        	$scope.formins.$valid=true;
        }
        
        if(!$scope.formins.$valid)
        {
        	
        }
        
        if(!keeping)
    	{
    	   keeping=true;
    	}
        
		if(keeping)
		{ 
			$scope.lisenterJsonarr=$scope.lisenterJson;
			ngDialog.close();
		    $rootScope.app.layout.isShadow=true; 
		    $scope.weightValues=[];
			if($scope.id){
				  var id=$scope.id; 
				 
				  if($scope.strategyType==2)
				  {
					  if($scope.loadinfo.weightValues.length>0)
					  {
						  angular.forEach($scope.instanceWeightlist,function(val,key){
							  $scope.weightValues.push({
								  id:$scope.loadinfo.weightValues[key].id||'',
								  instanceId:val.instanceId,
								  weight:val.weight
							  })
						  })
					  }else
					  {
						  angular.forEach($scope.instanceWeightlist,function(val,key){
							  $scope.weightValues.push({
								  id:'',
								  instanceId:val.instanceId,
								  weight:val.weight
							  })
						  }) 
					  }
					   
				  }


			  }else
			  {
				  if($scope.ispublic)
		          {
		             var id='';
		          }else{
		              var id=$scope.model.seleteloadbaLancedr;
		          }
			      
				  if((!$scope.ispublic)&&(!id)){
			    	  Notify.alert( 
	               	   '您还没有负载均衡器，不能创建二级负载，请先在模板里创建！', 
	               	   {status: 'info'}
	                  );
			    	  $rootScope.app.layout.isShadow=false;
			    	  return false;
			      }
				  
				  angular.forEach($scope.instanceWeightlist,function(val,key){
					  $scope.weightValues.push({
						  id:'',
						  instanceId:val.instanceId,
						  weight:val.weight
					  })
				  })
			  }
			
			$http.post(url,{
		          id:id,
		          appId:$stateParams.appid,
		          name:$scope.baLancername,
		          lisenterJson:$scope.lisenterJsonarr,
		          strategyType:$scope.strategyType,
		          weightValues:$scope.weightValues,
		          isPublic:$scope.ispublic
		       }).then(function(response){
		    	   $rootScope.app.layout.isShadow=false;
		          if(response.data.result)
		          {
		        	  ngDialog.close();
		        	  Notify.alert(
		                 '<em class="fa fa-check"></em> '+response.data.message ,
		                 {status: 'success'}
		              );
		        	  $state.go('app.appdetail.load',{appid:$stateParams.appid},{reload:true});
		          }else
		          {
		        	  ngDialog.close();
		              Notify.alert(
		               '<em class="fa fa-times"></em> '+response.data.message ,
		               {status: 'danger'}
		              );   
		          }
		       })
		}
		
		
	}

	                       
}])


/* 端口 */
mControllers.controller('portController',['$scope','$http','$stateParams','ngDialog','$state','Notify',function($scope,$http,$stateParams,ngDialog,$state,Notify){
   
   $scope.protocolList=[
      {text:'udp'},
      {text:'tcp'}
   ]
   
   $scope.addport=[]; 

   $scope.addPortFn=function()
   {
	 $scope.authMsg='';
	 $scope.submitted = false;
     $scope.inserted = {
       appId:$stateParams.appid,
       sourceIp:'',
       container_port:'',
       protocol:'udp'
     }
    
     $scope.addport.push($scope.inserted);
   }

   $scope.removePortFn=function(index){
     $scope.addport.splice(index, 1);
   }

   
   // 验证表单
   $scope.submitted = false;
   $scope.validateInput = function(name, type) {
       var input = $scope.portForm[name];
       return (input.$dirty || $scope.submitted) && input.$error[type];    
   };
   
   // 验证端口是否存在
   $scope.isExitport=function(ip,port){
	 if($scope.portForm.$valid)
     {
		 $http.get('/cloudui/ws/apps/isExistContainer'+'?v='+(new Date().getTime()),{
			 params:{
				 "appId":$stateParams.appid,              
	             "container_port":port,
	             "sourceIp":ip||'',
			 }
		 }).
		 success(function(data){
			 $scope.isExit=data.result;
			 if($scope.isExit)
			 {  
				$scope.authMsg=data.message;
				$scope.portForm.$valid=false;
			 }else
			 {
				$scope.authMsg='';
				$scope.portForm.$valid=true;
			 }
		 }).error(function(){
			 $scope.portForm.$valid=false;
		 })
     }
	 
   }
   
   // 提交
   
   $scope.submitForm = function() {
       $scope.submitted = true;
       if ($scope.portForm.$valid) {
    	   if($scope.addport)
    	      {
    	        $http.post('/cloudui/ws/apps/createOperationAppPortsMapping',{appPorts:$scope.addport})
    	        .then(function(response){
    	            if(response.data.result)
    	            {
    	              Notify.alert(
    	                  '<em class="fa fa-check"></em> '+response.data.message ,
    	                  {status: 'success'}
    	              );
    	              $state.go('app.appdetail.port',{appid:$stateParams.appid},{reload:true});
    	            }else
    	            {
    	            	Notify.alert(
    	                  '<em class="fa fa-times"></em> '+response.data.message ,
    	                  {status: 'danger'}
    	                );
    	            }
    	        })
    	      }
       }
   }

   // 删除端口

   $scope.delPort=function(index,ip,port,protocol){
      $http({
        method:'DELETE',
        url:'/cloudui/ws/apps/deletegetOperationAppAppPortsMapping',
        params:{
           ports:{
             "appId":$stateParams.appid,              
             "container_port":port,
             "sourceIp":ip||'',
             "protocol":protocol
           }
        }
      }).success(function(data){
          if(data.result)
          {
        	Notify.alert(
              '<em class="fa fa-check"></em> '+data.message ,
              {status: 'success'}
            );
            $scope.portlist.splice(index, 1);
            $state.go('app.appdetail.port',{appid:$stateParams.appid},{reload:true});
          }else
          {
        	  Notify.alert(
                 '<em class="fa fa-times"></em> '+data.message ,
                 {status: 'danger'}
              );
          }
      })
      
   }

   // 查看端口弹窗
   $scope.openViewport = function (ip,port,protocol) {
      ngDialog.open({
        template: 'app/views/dialog_port.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default ngdialog-sm',
        scope: $scope,
        cache: false,
        data:{sourceIp:ip,container_port:port,protocol:protocol},
        controller:'viewPort'
      });
   };
   // 端口展示
  $http.get('/cloudui/ws/apps/getOperationAppPorts'+'?v='+(new Date().getTime()),{params:{
     appId:$stateParams.appid,
  }}).success(function(data){
	  
     $scope.portlist=data;
  })



}])

/* 外部网络 */

mControllers.controller('networkController',['$scope','$http','$stateParams','$state','Notify','$filter',function($scope,$http,$stateParams,$state,Notify,$filter){
	$scope.addip=[]; 
	$scope.addIpFn=function()
	{
		$scope.authMsg='';
    
        $scope.inserted = {
	        ip:'',
	        port:'',
	        potocolType:'udp'
        };
     $scope.addip.push($scope.inserted);
    }
	$scope.removeIpFn=function(index){
	 $scope.addip.splice(index, 1);
	}
	
	// 协议
	$scope.protocolList=[
     {text:'udp'},
     {text:'tcp'}
    ]
	// 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
       var input = $scope.ipForm[name];
       return (input.$dirty || $scope.submitted) && input.$error[type];    
    };
    
    // 验证IP+端口是否存在
    
    $scope.$watch('addip',function(newval,oldval){
    	 
    	 if(newval.length>0&&$scope.ipForm.$valid){
        	  
        	 angular.forEach(newval,function(val,key){
        	 
        		 if(val.ip!=='')
        		 {
        			 $scope.isExitip(val.ip,val.port,val.potocolType); 
        		 }
        		
        	 })
    	 }    
         
    },true)
    
 // 验证端口是否存在
    $scope.isExitip=function(ip,port,protocol){
 	if($scope.ipForm.$valid)
      {
 		 $http.get('/cloudui/ws/apps/isExistIp'+'?v='+(new Date().getTime()),{
 			 params:{
 				 "appId":$stateParams.appid,              
 				 "outIp":ip,
         "port":port||'',
         "protocol":protocol
 			 }
 		 }).
 		 success(function(data){
 			 $scope.isExit=data.result;
 			 
 			 if($scope.isExit)
 			 {  
 				$scope.authMsg='此IP已存在，请重新输入';
 				 
 				$scope.ipForm.$valid=false;
 			 }else
 			 {
 				$scope.authMsg='';
 				$scope.ipForm.$valid=true;
 			 }
 		 }).error(function(){
 			 $scope.ipForm.$valid=false;
 		 })
      }
 	 
    }
    
    // 协议一致，ip重复输入验证
    $scope.equalIp=function(arr){
    	var repeatarr=[];
    	for(var i=0;i<arr.length-1;i++){
            var curItem=arr[i];//当前项
            for(var j=i+1;j<arr.length;j++){
	    	    if((arr[j].potocolType==curItem.potocolType)&&(arr[j].ip==curItem.ip)&&(arr[j].port==curItem.port))
	    	    {
	    	    	repeatarr.push(curItem);
	    	    }
            }
       }
    	return repeatarr;
    }
    
    // 提交
    
    $scope.submitForm = function() {
    	//console.log($scope.addip);
    	
       var norepeat=$scope.equalIp($scope.addip).length>0?false:true;
    	 
       if(!norepeat)
       {
    	   Notify.alert( 
	       	   'IP、端口、协议有重复，请重新输入！', 
	       	   {status: 'info'}
            ); 
        	return false; 
       } 
    	
        $scope.submitted = true;
        if ($scope.ipForm.$valid) {
            if($scope.addip)
            {
          	var outgoing_ips=[];
          	var outgoing='';
          	angular.forEach($scope.addip,function(val,key){
          		outgoing_ips.push({"outIp":val.ip,"port":val.port||'',"protocol":val.potocolType});
          	})
              
          	var outgoing=angular.toJson(outgoing_ips)
               
              $http({
                 method:'post',
                 url:'/cloudui/ws/apps/createOperationAppOutGoing',
                 data:$.param({
              	   'appId':$stateParams.appid,
              	   'outgoing_ips':outgoing
                 }),
                 headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
              }).success(function(data){
              	if(data.result)
                  {
              		Notify.alert(
                          '<em class="fa fa-check"></em> '+data.message ,
                          {status: 'success'}
                      );
              		$state.go('app.appdetail.network',{appid:$stateParams.appid},{reload:true})
                  }else
                  {
                  	Notify.alert(
                          '<em class="fa fa-times"></em> '+data.message ,
                           {status: 'danger'}
                      );
                  }
              }) 
            }
        }
    }
   // 删除ip
   $scope.delIp=function(param1,param2,param3,param4){
      $http({
        method:'post',
        url:'/cloudui/ws/apps/deleteOperationAppOutGoingIPs',
        data: $.param({
        	"appId":$stateParams.appid,
            "outgoing_ip":param1,
            "port":param2,
            "protocol":param3
        }),
        headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
      }).success(function(data){
          if(data.result)
          {
        	Notify.alert(
               '<em class="fa fa-check"></em> '+data.message ,
                {status: 'success'}
            );
            $scope.outgoing_ips.splice(param4, 1);
            
           // $state.go('app.appdetail.network',{appid:$stateParams.appid},{reload:true})
          }else
          {
            Notify.alert(
                '<em class="fa fa-times"></em> '+data.message ,
                 {status: 'danger'}
            );
          }
      })
   }
   // IP展示
   $http.get('/cloudui/ws/apps/getOperationAppOutGoingIPs'+'?v='+(new Date().getTime()),{params:{
      appId:$stateParams.appid,
   }}).success(function(data){
       $scope.outgoing_ips=data.outgoing_ips;
   })
}])

 
mControllers.controller('viewPort',['$scope','$http','$stateParams',function($scope,$http,$stateParams){
   
   $http.get('/cloudui/ws/apps/getOperationAppPortsMapping',{
    params:{
      appId:$stateParams.appid,
      sourceIp:$scope.ngDialogData.sourceIp,
      container_port:$scope.ngDialogData.container_port,
      protocol:$scope.ngDialogData.protocol
    }
   }).success(function(data){
      $scope.viewPort=data;
   })
}])

// 自动伸缩

mControllers.controller('scaleController',['$scope','$http','Notify','$stateParams','$timeout','$state',function($scope,$http,Notify,$stateParams,$timeout,$state){
	
	$scope.AUTOMATIC='0'; // 默认模式
	$scope.defaultvalue={};
	// 指标列表
	
    $scope.scalerules=[];
    $scope.scaleplans=[];
    
    $scope.scaleNorms = [
       {value: 'CPU_SCALE_THRESHOLD', text: 'cpu使用率'},
  	   {value: 'INSTANCE_NUMBER', text: '实例最大最小值'}   
  	];
  	
  	$scope.scaleNorm=$scope.scaleNorms[0].value;
                  	
    
	// 查看伸缩策略
	$http.get('/cloudui/ws/apps/getAutoExtendStrategy'+'?v='+(new Date().getTime()),{
		params:{
			appId:$stateParams.appid
		}
	}).success(function(data){
		 
		$scope.scaleoff=data.enable;
		$scope.defaultvalue.value=data.strategies.SCHEDULE.default;
		 
		var i=0;
		angular.forEach(data.strategies.SCHEDULE,function(val,key){
			
			if(key!=='default')
			{
			
				$scope.scaleplans.push({
					value:val
				})
			
				var t1="#timepicker"+i+"1";
				var t2="#timepicker"+i+"2";
				
				$timeout(function(){
					$(t1).val(key.split('-')[0]);
					$(t2).val(key.split('-')[1]);
				})
				i++;
				 
			}else
			{
				return false;
			}
			
		})
		
		
		
		if(data.strategies.AUTOMATIC)
		{
			$scope.AUTOMATIC='1';
		}else
		{
			$scope.AUTOMATIC='0';
		}
		
		 
		if(data.strategies.CPU)
		{
			$scope.scalerules.push({
				scaleNorm:'CPU',
				startval:data.strategies.CPU.split('-')[0],
				endval:data.strategies.CPU.split('-')[1]
			})
		}
		
		if(data.strategies.INSTANCE_NUMBER)
		{
			$scope.scalerules.push({
				scaleNorm:'INSTANCE_NUMBER',
				startval:data.strategies.INSTANCE_NUMBER.split('-')[0],
				endval:data.strategies.INSTANCE_NUMBER.split('-')[1]
			})
		}
		
		if(data.strategies.CPU_SCALE_THRESHOLD)
		{
			$scope.scalerules.push({
				scaleNorm:'CPU_SCALE_THRESHOLD',
				startval:data.strategies.CPU_SCALE_THRESHOLD.split('-')[0],
				endval:data.strategies.CPU_SCALE_THRESHOLD.split('-')[1]
			})
		}
		
		 
	})
	

    
	
    
    // 添加指标
    $scope.addScaleRule=function(list){
    	 var obj={};
         $scope[list].push(obj);  
    }
    
    
    // 删除指标
    $scope.delScaleRule=function(list,idx){
      $scope[list].splice(idx,1);
    }
    
    // 开启关闭自动伸缩
    
    $scope.AutoExtend=function(param){
    	$http.get('/cloudui/ws/apps/updateAutoExtendStatus'+'?v='+(new Date().getTime()),{
    		params:{
    			enable:param,
    			appId:$stateParams.appid
    		}
    	}).success(function(data){
    	   if(data.result)
    	   {
    		   Notify.alert(
	               '<em class="fa fa-check"></em> '+data.message ,
	               {status: 'success'}
	             );
    		   
    	   }else
    	   {
    		   Notify.alert(
	               '<em class="fa fa-times"></em> '+data.message ,
	               {status: 'danger'}
	             );
    	   }
    	})
    }
 
     
    // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formScale[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };
    
    // 提交自动伸缩策略
    $scope.submitScaleForm = function() {
      $scope.submitted = true;
       
      if ($scope.formScale.$valid) {
         $scope.strategies={};
    	 $scope.scheduledata={};
    	 $scope.scheduledata['default']=$scope.defaultvalue.value;
    	 angular.forEach($scope.scaleplans,function(val,key){
    		 var timerange=$('#timepicker'+key+'1').val()+'-'+$('#timepicker'+key+'2').val();		 
    		 $scope.scheduledata[timerange]=val.value; 
    	 })
    	  
    	  
    	 if($scope.AUTOMATIC=='1')
    	 {
    		 $scope.strategies.AUTOMATIC=true;
    	 }else
    	 {
    		 $scope.strategies.AUTOMATIC=false;
    	 }
    	 
    	 $scope.strategies.SCHEDULE=$scope.scheduledata;
    	 angular.forEach($scope.scalerules,function(val,key){
    		 $scope.strategies[val.scaleNorm]=val.startval+'-'+val.endval;
    	 })
    	 
    	 $http.post('/cloudui/ws/apps/saveAutoExtendStrategy',{
    		  appId:$stateParams.appid,
    		  strategies:$scope.strategies
    	  }).success(function(data){
    		   if(data.result)
    		   {
    			   Notify.alert(
		               '<em class="fa fa-check"></em> '+data.message ,
		               {status: 'success'}
		             );
    			   $state.go('app.appdetail.scale',{appid:$stateParams.appid},{reload:true})
    		   }else
    		   {
    			   Notify.alert(
		               '<em class="fa fa-times"></em> '+data.message ,
		               {status: 'danger'}
		             );  
    		   }
    	  })
    	 
      }
    }
    

	
}])
 
/* 应用版本信息 */
mControllers.controller('appInfoController',['$scope','$http','$stateParams',function($scope,$http,$stateParams){
	// 网络模式
	$scope.netModelList=[
	   {value:'none',text:'默认模式'},
	   {value:'host',text:'主机模式'}
	]
	
	$http.get('/cloudui/ws/apps/getAppVersionDetail'+'?v=' + (new Date().getTime()),{params:{id:$stateParams.id}}).success(function(data){
       $scope.versioninfo=data;
        
       // 更新机制
       switch(data.imageUpdateType)
       {
         case 'always':
        	 $scope.imageUpdateType='总是前置重新pull镜像';
         break;
         case 'ifnotpresent':
             $scope.imageUpdateType='不是最新时更新';
         break;
         case 'never':
             $scope.imageUpdateType='从不更新';
         break;
       }
       // 挂在路径
       $scope.volumes=[];
       $scope.volumes=data.volumes;
       /*angular.forEach(data.volumes,function(val,key){
           $scope.volumes.push({
              hostPath:key,
              containerPath:val
           })
       })*/
       // 关联应用 
       $scope.depsApps=[];
       angular.forEach(data.depsNameAndId,function(val,key){
 
    	   $scope.depsApps.push(val);
       })
       
        $scope.netModel=data.netModel;
        
      // 实例配额
      $scope.strategies=[];
       angular.forEach(data.strategies,function(val,key){
    	   if(key=='labels'||key=='cpus'||key=='cpuQuota'||key=='shareCpu'||key=='memory')
    	   {
    		   return false;
    	   }
    	   switch(key)
    	   {
    	     case 'store':
             var text='存储大小配额(GB)';
             break;
    	     case 'broadband-in':
             var text='网络宽带配额(进)';
             break;
    	     case 'broadband-out':
             var text='网络宽带配额(出)';
             break;
    	     case 'disk-read':
             var text='硬盘吞吐配额(读)';
             break;
    	     case 'disk-write':
             var text='硬盘吞吐配额(写)';
             break;
    	     case 'IOPS-read':
             var text='磁盘IOPS配额(读)';
             break;
    	     case 'IOPS-write':
             var text='磁盘IOPS配额(写)';
             break;
    	     case 'cpus':
             var text='cpu核数';
             break;
    	     case 'cpuQuota':
             var text='cpu权重';
             break;
    	     case 'memory':
             var text='内存';
             break;
    	     case 'shareCpu':
    	     var text='独占cpu';
    	     if(val)
    	     {
    	    	 val='否';
    	     }else
    	     {
    	    	 val='是';
    	     }
    	     break;
    	     case 'sameHost':
    	     var text='1实例：1主机';
    	     if(val)
    	     {
    	    	 val='否';
    	     }else
    	     {
    	    	 val='是';
    	     }
    	     break;
    	     case 'shareHost':
        	 var text='独占主机';
        	 if(val)
    	     {
    	    	 val='否'
    	     }else
    	     {
    	    	 val='是'
    	     }
        	 break;
    	     case 'replicas':
             var text='正在运行的实例';
             break;
    	   }
           $scope.strategies.push({
              key:key,
              text:text,
              val:val
           })
       })
       
      $scope.outgoing_ips=data.outgoing_ips;
 
      // 环境变量
      $scope.envs=[];
      angular.forEach(data.envs,function(val,key){
           $scope.envs.push({
              key:key,
              val:val
           })
      })
      
      // 标签
      $scope.labelsarr=[];
      angular.forEach(data.strategies.labels,function(val,key){
           $scope.labelsarr.push({
              key:key,
              val:val
           })
      })
       
       
  })
}])

/* 创建组件 */
mControllers.controller('assemblyCreate',['$rootScope','$scope','$http','$filter','$modal','$state','$stateParams','Notify','$timeout','ngDialog',function($rootScope,$scope,$http,$filter,$modal,$state,$stateParams,Notify,$timeout,ngDialog){
  
  
  
  $scope.openAddResource=function(){
    $rootScope.offsideinclude="app/views/partials/addResourcebar.html";
  }
  

  // 添加资源弹出框
   $scope.openResourceList = function () {
      ngDialog.open({
        template: 'app/views/dialog_resourcelist.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default ngdialog-lg',
        scope: $scope,
        cache:false,
        controller:'resourceListController'
      });
   };
  $scope.formdata={}; // 表单数据
   $scope.labelsarr=[]; //标签
   $scope.ips=[]; // 外部网络
   $scope.strategies=[]; // 实例配额 
   $scope.envs=[]; // 环境变量集
   $scope.volumes=[];  // 挂载路径集
   $scope.domainarr=[]; //静态域名
   $scope.formdata.deps=[]; // 关联的应用
   // 网络协议
   $scope.protocolList=[
     {text:'tcp'},
     {text:'udp'}
    ]
   // 网络模式
   $scope.netModelList=[
       {value:'none',text:'默认模式'},
       {value:'host',text:'主机模式'}
   ]
   $scope.formdata.netModel='none';
   // 更新机制
   $scope.resourceUpdateTypeList=[
       {value:'never',text:'从不更新'},
       {value:'ifnotpresent',text:'不是最新时更新'},
       {value:'always',text:'总是前置重新pull镜像'}
   ]
   $scope.formdata.resourceUpdateType='never';

   // 添加 
   $scope.add=function(list){
        var obj={};
        switch(list){
          case 'ips':
            obj.protocol=$scope.protocolList[0].text;
            obj.port='';
          break;
          case 'strategies':
            obj.key='store';
          break;
        }
        $scope[list].push(obj);   
    }
    // 删除 
   $scope.del=function(list,idx){
        $scope[list].splice(idx,1);
    }
    // 验证ip、端口、协议是否有重复
    window.ParsleyValidator.addValidator('equalip', function (value, requirement) {
        var curip=requirement.cur;
        var ips=requirement.arr;
        var end=requirement.index;
        var repeatarr=0;
        var previousIps=requirement.arr.slice(0,end)
       
        for(var i=0;i<previousIps.length;i++)
        {
          var equalresult=angular.equals(curip,previousIps[i]);
          if(equalresult){
            repeatarr+=1;
          }
        }

        return repeatarr>0?false:true;
      }, 32).addMessage('en', 'equalip', 'repeat').addMessage('fr', 'equalip', 'repeat');
 
    $scope.$watch('ips',function(newval,oldval){
       $('.parsley-equalip').parent().prev().removeClass('parsley-error')
       $('.parsley-equalip').html('')
    },true)

 
    // 获取资源名称
    $scope.getResourceNameFn=function(param){
       $scope.resourceName=param;
       $scope.getTags($scope.resourceName);
    }

    // 是否弹出选择资源框
    $scope.goResource=function(resourceName){
      
       
        if(!resourceName)
        {
          $scope.openResourceList();
        }  
    }

    // 获取资源版本
    $scope.getTags=function(resourceName){
      $http.get('/cloudui/ws/apps/registry/getResourceVersionListForDeploy'+'?v='+(new Date().getTime()),{params:{
         registryId:3,
         resourceName:resourceName
      }}).success(function(data){
         $scope.resource_version=data;
         $scope.formdata.tag=$scope.resource_version[0];
         $scope.formdata.tag.registryId=registryId;
      }) 
    }

    // 根据版本获取端口
    $scope.$watch('formdata.tag',function(newval,oldval){
        if(newval)
        {
          $scope.formdata.accessPort=newval.startPort;
          $scope.formdata.cmd=newval.startScript; 
          $scope.formdata.tag.registryId=$scope.registryId;
        }
   },true)

   // 关联应用

   $scope.depsFn=function(depsSelectedArr)
   {
      $http.get('/cloudui/ws/apps/list/apps'+'?v=' + (new Date().getTime())).success(function(data){
       $scope.applist=data;
       if(data != null && data.length > 0){  
           for(var i = 0; i< data.length; i++){  
             $("<option value='"+data[i].APP_ID+"'>"+data[i].APP_NAME+"</option>").appendTo("#st"); 
           }  

            $("#st").chosen({
               no_results_text:"没有搜索到此应用"
            });  
                    
         } 
      })
    }

    $scope.depsFn();

     // 选择关联应用的环境变量
    $scope.dropopen=function(param,defaultval){
        angular.element('.dropdown-menu-right').hide();
        if($scope.applist.length>0)
        {
         angular.element('.dropdown-menu-right').eq(param).show();
        }else
        {
         Notify.alert(
                '您还没有创建应用，请先创建应用!',
                 {status: 'info'}
            ); 
        }
     }

   
    
   
    var formInstance=$('#createAppForm').parsley();

    $scope.createAppFn=function(){
         
       $rootScope.app.layout.isShadow=true;

       // 环境变量传值
       $scope.envsData={};
       angular.forEach($scope.envs,function(val,key){
         $scope.envsData[val.key]=val.val;
       })
       // 标签传值
       $scope.labelsData={};
       angular.forEach($scope.labelsarr,function(val,key){
         $scope.labelsData[val.key]=val.val;
       })
       // 挂载路径传值
 
       $scope.volumesData=[];
       
       angular.forEach($scope.volumes,function(val,key){
         var volumobj={};
         volumobj.host_dir=val.host_dir;
         volumobj.container_dir=val.container_dir;
         if(val.rw)
         {
           volumobj.rw='ro'; 
         }else
         {
           volumobj.rw='rw'; 
         }
         
         $scope.volumesData.push(volumobj) 
      
       })
       // 实例配额传值
       $scope.strategiesData={};
       angular.forEach($scope.strategies,function(val,key){
         $scope.strategiesData[val.key]=val.val;
       })

       $scope.strategiesData.sameHost=!$scope.formdata.sameHost;
       $scope.strategiesData.shareHost=!$scope.formdata.shareHost;
       $scope.strategiesData.labels=$scope.labelsData;
       if($scope.registryId==3)
       {
           $scope.strategiesData.shareCpu=true;
           $scope.strategiesData.cpus=1;
           $scope.strategiesData.memory=128;
       }else{
           $scope.strategiesData.shareCpu=!$scope.formdata.shareCpu;
           $scope.strategiesData.cpus=Number($scope.formdata.cpus);
           $scope.strategiesData.memory=Number($scope.formdata.memory);
           if(!$scope.formdata.shareCpu)
           {
             $scope.strategiesData.cpuQuota=$scope.formdata.cpuQuota; 
           }
       }

       if($scope.formdata.netModel=='host')
       {
         $scope.ips=[];
         $scope.domainarr=[];
       }

       // 提交的数据
       if($scope.registryId==3)
       {
          $scope.data={
                  appName:$scope.formdata.appName,
                  description:$scope.formdata.description||'',
                  reourceVersionId:$scope.formdata.tag.id,
                  resourceUpdateType:$scope.formdata.resourceUpdateType,
                  replicas:Number($scope.formdata.replicas),
                  cmd:$scope.formdata.cmd,
                  volumes:[],
                  strategies:$scope.strategiesData,
                  accessPort:$scope.formdata.accessPort,
                  envs:$scope.envsData,
                  logDirs:$scope.formdata.logPaths||'',
                  outgoing_ips:[],
                  deps:[],
                  netModel:'host',
                  dockerApp:$scope.isDocker
            }
       }else{  
          $scope.data={
                appName:$scope.formdata.appName,
                description:$scope.formdata.description||'',
                reourceVersionId:$scope.formdata.tag.id,
                resourceUpdateType:$scope.formdata.resourceUpdateType,
                replicas:Number($scope.formdata.replicas),
                cmd:$scope.formdata.cmd,
                volumes:$scope.volumesData,
                strategies:$scope.strategiesData,
                accessPort:$scope.formdata.accessPort,
                envs:$scope.envsData,
                logDirs:$scope.formdata.logPaths||'',
                outgoing_ips:$scope.ips,
                deps:$scope.formdata.deps,
                netModel:$scope.formdata.netModel,
                dockerApp:$scope.isDocker,
                domainName_mappings:$scope.domainarr
          }
       }
      
       
      
      //创建应用 
      $http.post('/cloudui/ws/apps/create',$scope.data).then(function(response) {   
        $rootScope.app.layout.isShadow=false;
          // 通过返回数据，没通过返回错误信息
          if(response.data.result)
          {
            
            Notify.alert(
                '<em class="fa fa-check"></em> '+response.data.message ,
                {status: 'success'}
            );
            $state.go('app.listapps',{},{reload:true});

          }else{
            Notify.alert(
                '<em class="fa fa-times"></em> '+response.data.message ,
                {status: 'danger'}
            );
            $state.go('app.listapps',{},{reload:true});
          }

          return false;

      }, function(x) {
        $scope.authMsg = '服务器请求错误';
      });
    }
 
}])

/* 已有资源 */
mControllers.controller('resourceListController',['$scope','$http',function($scope,$http){
   var picname=['tomcat','centos','mysql','redis','django','lamp','mongodb','nginx','node','ubuntu','zookeeper','memcache'];  
   $scope.pageSize=5;
   $scope.search={};
   $scope.onPageChange = function (pageNum)
   { 
      $scope.loadoff=true;
      $http.get('/cloudui/ws/apps/registry/getResourcesByPage'+ '?v=' + (new Date().getTime()),{
          params:
          {
                pageNum:pageNum,
                pageSize:$scope.pageSize,
                registryId:3,
                keyword:$scope.search.val
          }
      }).success(function(data){
          $scope.loadoff=false;
          $scope.resultoff=data.rows.length>0?true:false;
          $scope.warninginfo='无';
              
          if($scope.resultoff){
            for(var i=0;i<data.rows.length;i++)
            {
               var pic=''
               for(var j=0;j<picname.length;j++)
               {
                  if(data.rows[i].resource_name.indexOf(picname[j])!==-1)
                  {
                    var pic=picname[j]
                  }
               }
               if(!pic){
                 pic='custom' 
               }
               data.rows[i].pic=pic;
               $scope.resourcelist=data;
            }
          }else{
            $scope.resourcelist=data; 
          }
              
          $scope.pageCount=Math.ceil(data.total/$scope.pageSize);
          if($scope.pageCount==0){
                $scope.pageCount=1;
          }
          }).error(function(){
               $scope.resultoff=false;
               $scope.warninginfo='暂无结果';
          })
   }
   //搜素镜像
   $scope.searchResource=function(e)
   {  
     if(e.type=='click')
     {
         $scope.loadoff=false;
         $scope.onPageChange(1); 
     }else if(e.type=='keyup')
     {
        var keycode = window.event?e.keyCode:e.which;
        if(keycode==13)
        {
           $scope.loadoff=false;
           $scope.onPageChange(1);     
        }
     }
     if($scope.search.val.length==0)
     {
        $scope.onPageChange(1); 
     }
   }
}])

/* 添加资源 */
mControllers.controller('addResourceCtrl',['$scope','$http','FileUploader','Notify',function($scope,$http,FileUploader,Notify){
  $scope.resourceformdata={};

  // 验证表单
  $scope.submitted = false;
  $scope.validateInput = function(name, type) {
      var input = $scope.addResourceForm[name];
      return (input.$dirty || $scope.submitted) && input.$error[type];
  };
    
  var uploader = $scope.uploader = new FileUploader({
        url: 'server/upload.php'
  });

  // FILTERS

  uploader.filters.push({
      name: 'customFilter',
      fn: function(item /*{File|FileLikeObject}*/, options) {
            return this.queue.length < 1;
      }
  });

  // CALLBACKS

  uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
      Notify.alert(
         '<em class="fa fa-check"></em> 只能添加一个文件!',
          {status: 'success'}
      );
  };

  uploader.onSuccessItem = function(fileItem, response, status, headers) {
        $scope.uuid=response;
  };


    $scope.addResourceFn=function(){
         
         if(uploader.queue.length>0){
             if(uploader.progress==100){
                  $scope.submitted = true;
                  
                          if($scope.addResourceForm.$valid){
                               $http.post('/cloudui/ws/apps/registry/registResourceNew',{
                         resourceName:$scope.resourceName,
                         versionName:$scope.versionName,
                         packagePath:$scope.uuid,
                         startScript:$scope.startScript,
                         startPort:$scope.startPort,
                         description:$scope.description,
                             description_resource:$scope.description_resource
                       }).success(function(data){
                          if(data.result)
                          {
                            Notify.alert(
                                 '<em class="fa fa-check"></em> 创建成功!',
                                  {status: 'success'}
                              );
                            $state.go('app.resource',{},{ reload: true });
                          }else
                          {
                              Notify.alert(
                                '<em class="fa fa-times"></em> '+data.reason ,
                                {status: 'danger'}
                              );
                          }
                      })
                  }
              
                 
             }else if(uploader.progress==0){
                 Notify.alert(
                   '<em class="fa fa-check"></em> 请上传您的资源包!',
                    {status: 'success'}
                 );
             }else{
                 Notify.alert(
                   '<em class="fa fa-check"></em> 文件正在上传，请稍等!',
                    {status: 'success'}
                 ); 
             }
         }else{
             Notify.alert(
                   '<em class="fa fa-check"></em> 请添加资源包!',
                    {status: 'success'}
             );
         }
    
    }
}])


/* 创建应用  */

mControllers.controller('createappController',['$rootScope','$scope','$http','$filter','$modal','$state','$stateParams','Notify',function($rootScope,$scope,$http,$filter,$modal,$state,$stateParams,Notify){
    
    // 打开高级配置
    $scope.bOff=function(){
      $scope.highoff=!$scope.highoff;
    }
    $scope.volumes=[];  // 挂载路径集
    $scope.strategies=[]; // 实例配额集
    $scope.envs=[]; // 环境变量集
    $scope.logPaths=''; // 日志
    $scope.ips=[]; // 外部网络
    $scope.labelsarr=[];//标签
  
    $scope.replicas=1; // 实例数
    $scope.deps=[]; // 关联应用
    $scope.showport=false;
    $scope.cpuQuota=1;
    
    var scope = $rootScope.$new(); 
    scope.radio= {};
    
    
    // 协议
	$scope.protocolList=[
     {text:'udp'},
     {text:'tcp'}
    ]
    
    // 网络模式
	$scope.netModelList=[
	   {value:'none',text:'默认模式'},
	   {value:'host',text:'主机模式'}
	]
	$scope.netModel='none';
 
    // 推荐资源
    $scope.openModal=function(size){
 
      $http.get('/cloudui/ws/apps/registry/getResourceListForDeploy'+'?v=' + (new Date().getTime()),{
        params:{registryId:3}
      }).success(function(data){
         scope.resourceList=data;
      })

      var modalInstance = $modal.open({
        templateUrl: '/myModalContent.html',
        controller: ModalInstanceCtrl,
        size: size,
        scope:scope
      });

      modalInstance.result.then(function () {
          $scope.resource=scope.radio.item;
          
          // 资源版本号
          $http.get('/cloudui/ws/apps/registry/getResourceVersionListForDeploy'+'?v=' + (new Date().getTime()),{params:{
             registryId:3,
             resourceName:$scope.resource
          }}).success(function(data){
              $scope.resource_version=data;
              $scope.showport=true;
              $scope.resourceversion=$scope.resource_version[0];
          })
          
          $scope.$watch('resourceversion',function(newval,oldval){
        	  if(newval)
        	  {
        		  $scope.accessPort=newval.startPort;
                  $scope.cmd=newval.startScript; 
                 
        	  }
          })


      }, function () {
          return false;
      });


    }

    // 关联应用
    $scope.depsFn=function(depsSelectedArr)
    {
     $http.get('/cloudui/ws/apps/list/apps'+'?v=' + (new Date().getTime())).success(function(data){
    	 $scope.applist=data;
    	 if(data != null && data.length > 0){  
	    	 for(var i = 0; i< data.length; i++){  
	           $("<option value='"+data[i].APP_ID+"'>"+data[i].APP_NAME+"</option>").appendTo("#st"); 
	         }  

	          $("#st").chosen({
	             no_results_text:"没有搜索到此应用"
	          });  
                    
         } 
     })
    }

    $scope.depsFn();
    // 选择关联应用的环境变量
    $scope.dropopen=function(param,defaultval){
        angular.element('.dropdown-menu-right').hide();
        if($scope.applist.length>0)
        {
     	   angular.element('.dropdown-menu-right').eq(param).show();
        }else
        {
     	   Notify.alert(
                '您还没有创建应用，请先创建应用!',
                 {status: 'info'}
            ); 
        }
     }

    // 添加变量
    $scope.add=function(list){
    	var obj={};
        switch(list){
          case 'ips':
            obj.protocol=$scope.protocolList[0].text;
          break;
          case 'strategies':
            obj.key='store';
          break;
        }
        $scope[list].push(obj);   
    }
    // 删除变量
    $scope.del=function(list,idx){
        $scope[list].splice(idx,1);
    }
    
   // 验证IP+端口是否存在
    
    $scope.$watch('ips',function(newval,oldval){
      
      if(newval.length>0){
           angular.forEach(newval,function(val,key){
           
             if(val.outIp&&val.outIp!=='')
             {
               $scope.isExitip(val.outIp,val.port,val.protocol); 
             }
            
           })
       } 
         
    },true)
    
    // 验证端口是否存在
    $scope.isExitip=function(ip,port,protocol){
       $http.get('/cloudui/ws/apps/isExistIp'+'?v='+(new Date().getTime()),{
         params:{
           "appId":$stateParams.appid,              
           "outIp":ip,
           "port":port||'',
           "protocol":protocol
         }
       }).success(function(data){
          $scope.isExit=data.result;
       
           if($scope.isExit)
           {  
            $scope.authMsgip='此IP已存在，请重新输入';
  
           }else
           {
            $scope.authMsgip='';
           }
     }) 
    }
    
    // 协议一致，ip重复输入验证
    $scope.equalIp=function(arr){
      var repeatarr=[];
      for(var i=0;i<arr.length-1;i++){
            var curItem=arr[i];//当前项
            for(var j=i+1;j<arr.length;j++){
            if((arr[j].protocol==curItem.protocol)&&(arr[j].outIp==curItem.outIp)&&(arr[j].port==curItem.port))
            {
              repeatarr.push(curItem);
            }
            }
       }
      return repeatarr;
    }

    // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formValidate[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };

    // 提交应用信息
    $scope.submitForm = function() {
    	var norepeat=$scope.equalIp($scope.ips).length>0?false:true;
        
        if(!norepeat)
        {
          Notify.alert( 
              'IP、端口、协议有重复，请重新输入！', 
              {status: 'info'}
             ); 
           return false; 
        } 
        
         $scope.submitted = true;
         if ($scope.formValidate.$valid) {
        	 $rootScope.app.layout.isShadow=true;
             // 环境变量传值
             $scope.envsData={};
             angular.forEach($scope.envs,function(val,key){
               $scope.envsData[val.key]=val.val;
             })
             
             // 标签传值
             $scope.labelsData={};
             angular.forEach($scope.labelsarr,function(val,key){
               $scope.labelsData[val.key]=val.val;
             })
             
             // 挂载路径传值
 
             $scope.volumesData=[];
             
             angular.forEach($scope.volumes,function(val,key){
            	 var volumobj={};
            	 volumobj.host_dir=val.host_dir;
            	 volumobj.container_dir=val.container_dir;
            	 if(val.rw)
            	 {
            		 volumobj.rw='ro'; 
            	 }else
            	 {
            		 volumobj.rw='rw'; 
            	 }
            	 
            	 $scope.volumesData.push(volumobj) 
            
             })
             
          
             // 实例配额传值
             $scope.strategiesData={};
             angular.forEach($scope.strategies,function(val,key){
            	 $scope.strategiesData[val.key]=val.val;
             })
             /*$scope.strategiesData.sameHost=!$scope.sameHost;
             $scope.strategiesData.shareHost=!$scope.shareHost;
             $scope.strategiesData.shareCpu=!$scope.shareCpu;
             $scope.strategiesData.cpus=$scope.cpus;*/
             $scope.strategiesData.sameHost=!$scope.sameHost;
             $scope.strategiesData.shareHost=!$scope.shareHost;
             $scope.strategiesData.shareCpu=true;
             $scope.strategiesData.cpus=1;
             $scope.strategiesData.memory=128;
             $scope.strategiesData.labels=$scope.labelsData;
            
             /*if(!$scope.shareCpu)
             {
            	 $scope.strategiesData.cpuQuota=$scope.cpuQuota; 
             }
*/
            // 提交的数据
            $scope.data={
                  appName:$scope.appName,
                  description:$scope.description||'',
                  versionId:$scope.resourceversion.id,
                  imageUpdateType:'',
                  replicas:$scope.replicas,
                  cmd:$scope.cmd,
                  volumes:[],
                  strategies:$scope.strategiesData,
                  accessPort:$scope.accessPort,
                  envs:$scope.envsData,
                  logDirs:$scope.logPaths,
                  outgoing_ips:[],
                  deps:[],
                  netModel:'host'
            }

            //创建应用 
            $http.post('/cloudui/ws/apps/create',$scope.data).then(function(response) {   
            	$rootScope.app.layout.isShadow=false;
                // 通过返回数据，没通过返回错误信息
                if(response.data.result)
                {
                  
                  Notify.alert(
                      '<em class="fa fa-check"></em> '+response.data.message ,
                      {status: 'success'}
                  );
                  $state.go('app.listapps',{},{reload:true});

                }else{
                  Notify.alert(
                      '<em class="fa fa-times"></em> '+response.data.message ,
                      {status: 'danger'}
                  );
                  $state.go('app.listapps',{},{reload:true});
                }
   
            }, function(x) {
              $scope.authMsg = '服务器请求错误';
            });
         }
    }

}])

/* 更新应用 */

mControllers.controller('updateController',['$rootScope','$scope','$http','$filter','$modal','$state','$stateParams','Notify',function($rootScope,$scope,$http,$filter,$modal,$state,$stateParams,Notify){
	$scope.highoff=true;
    // 打开高级配置
    $scope.bOff=function(){
      $scope.highoff=!$scope.highoff;
    }

    $scope.versionStrategyId=$stateParams.id; // 版本id
    
    // 协议
	$scope.protocolList=[
     {text:'udp'},
     {text:'tcp'}
    ]
	
	// 网络模式
	$scope.netModelList=[
	   {value:'none',text:'默认模式'},
	   {value:'host',text:'主机模式'}
	]
    
    // 选择环境变量key
    $scope.dropopen=function(param,defaultval,off){
        angular.element('.dropdown-menu-right').hide();
        if(off)
        {
        	angular.element('#envbody .dropdown-menu-right').eq(param).show();	
        }else
        {
        	angular.element('#addenvbody .dropdown-menu-right').eq(param).show();
        }  
     }


    $scope.volumes=[];// 挂载路径
    $scope.labelsarr=[];//标签
   

    // 关联应用
   
    $scope.deps=[]; 
    
    $scope.depsFn=function(depsSelectedArr)
    {
       $http.get('/cloudui/ws/apps/list/apps'+'?v=' + (new Date().getTime())).success(function(data){
    	   var depslist=[];
           if(data != null && data.length > 0){
               for(var i=0;i<data.length;i++)
               {
                   if(data[i].APP_NAME!==$scope.appName)
                   {
                       depslist.push(data[i]);
                   }
               }
           }
           $scope.applist=depslist;
           if(depslist.length > 0){  
        	   for(var i = 0; i< depslist.length; i++){  
                   var dataSelected=$filter('filter')(depsSelectedArr,depslist[i].APP_NAME);
                  
                   if(dataSelected&&dataSelected.length>0)
                   {
                       $scope.deps.push(depslist[i].APP_ID);
                       
                      $("<option value='"+depslist[i].APP_ID+"' selected>"+depslist[i].APP_NAME+"</option>").appendTo("#st"); 
                   }else
                   {
                       $("<option value='"+depslist[i].APP_ID+"'>"+depslist[i].APP_NAME+"</option>").appendTo("#st"); 
                   }
                   
                } 
           }
           
           $("#st").chosen({
               no_results_text:"没有搜索到此应用"
           }); 
       })
    }

    // 所有实例配额项

    $scope.strategiesalllist = [
       {value: 'store', text: '存储大小配额(GB)'},
       {value: 'broadband-in', text: '网络宽带配额(进)'},
       {value: 'broadband-out', text: '网络宽带配额(出)'},
       {value: 'disk-read', text: '硬盘吞吐配额(读)'},
       {value: 'disk-write', text: '硬盘吞吐配额(写)'}
       /*{value: 'IOPS-read', text: '磁盘IOPS配额(读)'},
       {value: 'IOPS-write', text: '磁盘IOPS配额(写)'}*/
   ];

   $scope.addstrategies=[]; // 添加实例配额列表
 
   $scope.envs=[]; // 应用环境变量
   $scope.addenvs=[];
   
   $scope.labelsarr=[];// 标签
   $scope.addlabels=[];
   $scope.outgoing_ips=[] ; // 外部网络
   
    // 添加变量
    $scope.add=function(list){
      var obj={};
      $scope[list].push(obj); 
    }
    // 删除变量
    $scope.del=function(list,idx){
        $scope[list].splice(idx,1);
    }

    

    if($scope.versionStrategyId)
    {
      // 信息展示
      $http.get('/cloudui/ws/apps/getAppVersionDetail'+'?v=' + (new Date().getTime()),{
        params:{id:$scope.versionStrategyId}
      }).success(function(data){

          $scope.data=data;
          $scope.appName=data.appName;
          $scope.description=data.description||'';
          $scope.appId=data.appId;
          $scope.logPaths=data.logDirs;
          $scope.resource=data.resource;
         
          
          // 资源版本
          $http.get('/cloudui/ws/apps/registry/getResourceVersionListForDeploy'+'?v=' + (new Date().getTime()),{params:{
              registryId:3,
              resourceName:data.resourceName
           }}).success(function(data){
               $scope.resource_version=data;
               $scope.resourceversion=$filter('filter')(data,$scope.versionName)[0];
               
           }) 
           
           
           $scope.depsFn();
           
          
         /*  $scope.$watch('resourceversion',function(newval,oldval){
        	  if(newval)
        	  {
        		  $scope.accessPort=newval.startPort;
                  $scope.cmd=newval.startScript; 
        	  }
          })
*/
         
          
   
        
         $scope.replicas=Number(data.replicas);
         $scope.cmd=data.startScript;
         $scope.accessPort=data.startPort;
         
         $scope.sameHost=!data.strategies.sameHost;
         $scope.shareHost=!data.strategies.shareHost;
          
         
        // $scope.memory=Number(data.strategies.memory);
         
         // 实例配额已有项
         $scope.strategieshasList=[];
        
         angular.forEach(data.strategies,function(val,key){

             if(!(key=='sameHost'||key=='shareHost'||key=='shareCpu'||key=='replicas'||key=='cpuQuota'||key=='cpus'||key=='memory'||key=='labels')) 
             {
            	 $scope.strategieshasList.push({
                     key:key,
                     val:val
                 })
                 
             }
          })
          
          
          // 环境变量
         angular.forEach(data.envs,function(val,key){
            $scope.envs.push({
               key:key,
               val:val
            })

         })
 
  
          
         // 标签展示
         angular.forEach(data.strategies.labels,function(val,key){
            $scope.labelsarr.push({
               key:key,
               val:val
            })
         })
         
         

      })

    } 

    
    // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formValidate[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };

    // 更新应用信息
    $scope.submitForm = function() {
       $scope.submitted = true;
       if ($scope.formValidate.$valid) {
 
         
          // 标签传值
          $scope.labelsData={};
          angular.forEach($scope.labelsarr,function(val,key){
             $scope.labelsData[val.key]=val.val;
          })
          angular.forEach($scope.addlabels,function(val,key){
             $scope.labelsData[val.key]=val.val;
          })
          
           // 环境变量传值
          $scope.envsData={};
          angular.forEach($scope.envs,function(val,key){
             $scope.envsData[val.key]=val.val;
          })
          angular.forEach($scope.addenvs,function(val,key){
             $scope.envsData[val.key]=val.val;
          })

          

          // 实例配额传值

          $scope.strategiesData={};
          angular.forEach($scope.strategieshasList,function(val,key){
        	  $scope.strategiesData[val.key]=val.val;
          }
          )
 
          
  
            $scope.strategiesData.sameHost=!$scope.sameHost;
            $scope.strategiesData.shareHost=!$scope.shareHost;
             $scope.strategiesData.shareCpu=false;
             $scope.strategiesData.cpus=1;
            $scope.strategiesData.memory=128;
            $scope.strategiesData.labels=$scope.labelsData;
    
         $scope.data={
        	      appId:$scope.appId,
                  appName:$scope.appName,
                  description:$scope.description,
                  versionId:$scope.resourceversion.id,
                  imageUpdateType:'',
                  replicas:$scope.replicas,
                  cmd:$scope.cmd,
                  volumes:[],
                  strategies:$scope.strategiesData,
                  accessPort:$scope.accessPort,
                  envs:{},
                  logDirs:$scope.logPaths,
                  deps:[],
                  outgoing_ips:[],
                  netModel:'host'
       }
          
           

       //更新应用 
       $http.post('/cloudui/ws/apps/updateOperationApp',$scope.data).then(function(response) {   
    
            // 通过返回数据，没通过返回错误信息
            if(response.data.result)
            {
              Notify.alert(
                 '<em class="fa fa-check"></em> '+response.data.message ,
                  {status: 'success'}
              );
            
              $state.go('app.appdetail.version',{appid:$scope.appId},{reload:true});
            }else{
              Notify.alert(
                 '<em class="fa fa-times"></em> '+response.data.message ,
                  {status: 'danger'}
              );
              $state.go('app.appdetail.version',{appid:$scope.appId},{reload:true});
            }

        }, function(x) {
          $scope.authMsg = '服务器请求错误';
        });

       }
    }

}])

/* 模板资源列表 */

mControllers.controller('templateResourceController',['$rootScope','$scope','$http','ngDialog','Notify','$state',function($rootScope,$scope,$http,ngDialog,Notify,$state){

	// 公有模板列表
    $scope.pageSize=10;

    $scope.oncomPageChange = function (pageNum,search)
    {    
      $http.get('/cloudui/ws/apps/template/listTemplates'+'?v=' + (new Date().getTime()),{
      params:
          {
            pageNum:pageNum,
            pageSize:$scope.pageSize,
            templateName:search||'',
            isPublic:true
          }
     }).success(function(data){
        $scope.tempresourcelistcom = data;
        $scope.pageCountcom=Math.ceil($scope.tempresourcelistcom.total/$scope.pageSize);
        if($scope.pageCountcom==0){
        	$scope.pageCountcom=1;
        }
     })
    }
    
    $scope.onownPageChange = function (pageNum,search)
    {   
      $http.get('/cloudui/ws/apps/template/listTemplates'+'?v=' + (new Date().getTime()),{
      params:
          {
            pageNum:pageNum,
            pageSize:$scope.pageSize,
            templateName:search,
            isPublic:false
          }
     }).success(function(data){
        $scope.tempresourcelistown = data;
        $scope.pageCountown=Math.ceil($scope.tempresourcelistown.total/$scope.pageSize);
        if($scope.pageCountown==0){
        	$scope.pageCountown=1;
        }
     })
    }

    // 搜素公有模板
    $scope.searchcomTemp=function(search)
    {
         $scope.oncomPageChange(1,search);
    }
    
    // 搜素私有模板
    $scope.searchownTemp=function(search)
    {
         $scope.onownPageChange(1,search);
    }
    
    // 模板部署选择集群弹出框
    $scope.opendeploy = function (params) {
        ngDialog.open({
            template: 'app/views/dialog_deploytemp.html'+'?action='+(new Date().getTime()),
            className: 'ngdialog-theme-default ngdialog-sm',
            scope: $scope,
            cache: false,
            data:{uuid:params},
            controller:'tempchosecluster'
        });
   };
   
   // 模板资源删除
   
   $scope.deltempresource=function(param){
	   ngDialog.openConfirm({
	         template:
	              '<p class="modal-header">您确定要删除此模板吗?</p>' +
	              '<div class="modal-body text-right">' +
	                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
	                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
	              '</button></div>',
	        plain: true,
	        className: 'ngdialog-theme-default'
	   }) .then(
		    function(){
		     $rootScope.app.layout.isShadow=true;
		      $http.delete('/cloudui/ws/apps/template/deleteTemplateInfo'+'?v='+(new Date().getTime()),{
		 		   params:{
		 			   templateInfoUUID:param 
		 		   }
		 	   }).success(function(data){
		 		  $rootScope.app.layout.isShadow=false;
		 	      if(data.result)
		 		  {
		 	    	  Notify.alert(
		                '<em class="fa fa-check"></em> '+data.message ,
		                {status: 'success'}
		 	          );  
		 		      $state.go('app.template.list',{},{reload:true});
		 		  }else
		 		  {
		 			  Notify.alert(
		                '<em class="fa fa-times"></em> '+data.message ,
		                {status: 'danger'}
		 	          ); 
		 		  }
		 	   })    
	   })
   }
   
   
}])

/* 部署模板选择集群 */

mControllers.controller('tempchosecluster',['$rootScope','$scope','$http','Notify','ngDialog','$state',function($rootScope,$scope,$http,Notify,ngDialog,$state){
	 // 集群列表
	 $http.get('/cloudui/ws/apps/getUserCluster'+'?v=' + (new Date().getTime())).success(function(data){
	    $scope.userCluster=data; 
	    $scope.clusterId=data[0].id;
	 })
	 
	 // 部署模板
	 $scope.deployFn=function(){
		 if($scope.createclusterForm.$valid) {
			 ngDialog.close();
			 $rootScope.app.layout.isShadow=true;
			 $http.get('/cloudui/ws/apps/template/deployTemplate'+'?v='+(new Date().getTime()),{
				 params:{
					 "templateInfoUUID":$scope.ngDialogData.uuid,
					 "clusterId":$scope.clusterId,
					 "templateName":$scope.templateName
				 }
			 }). success(function(data){
			   if(data.result)
			   {
				   $http.get('/cloudui/ws/apps/template/deployAppsInTemplate'+'?v='+(new Date().getTime()),{
					  params:{
						  "templateUUID":data.templateUUID
					  }  
				   }).success(function(res){
					   $rootScope.app.layout.isShadow=false;
					   if(res.result)
					   { 
						   Notify.alert(
				               '<em class="fa fa-check"></em> '+res.message ,
				               {status: 'success'}
					        );  
						   $state.go('app.template.deploy',{},{reload:true});
					   }else
					   {
						   Notify.alert(
				               '<em class="fa fa-times"></em> '+res.message ,
				               {status: 'danger'}
					        );  
					   }
				   })
			   }else
			   {
				   ngDialog.close();
				   $rootScope.app.layout.isShadow=false;
				   Notify.alert(
		               '<em class="fa fa-times"></em> '+data.message ,
		               {status: 'danger'}
			        );  
			   }
			 })
		 }else{
			 $scope.createclusterForm.templatename.$dirty = true;
		 } 
	 }
}])

/* 已部署模板 */

mControllers.controller('templateDeployController',['$rootScope','$scope','$http','ngDialog','Notify','$state','$interval',function($rootScope,$scope,$http,ngDialog,Notify,$state,$interval){

	$scope.$on('$destroy', function() {
		 $interval.cancel($scope.timer);  
	});
	
	
	// 模板列表
    $scope.pageSize=10;

    $scope.onPageChange = function (pageNum)
    {   
      $http.get('/cloudui/ws/apps/template/listDeployedTemplates'+'?v=' + (new Date().getTime()),{
      params:
          {
            pageNum:pageNum,
            pageSize:$scope.pageSize,
            templateName:$scope.searchval
          }
     }).success(function(data){
        $scope.templist = data;
        $scope.pageCount=Math.ceil($scope.templist.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
     })
    }
    
    $scope.timer=$interval(function(){
    	$scope.onPageChange($scope.pageNum);
    },3000)

    // 搜素模板
    $scope.searchTemp=function()
    {
         $scope.pageNum=1;
         $scope.onPageChange();
    }
    
    // 模板启动
    
    $scope.startTemp=function(param){
    	$rootScope.app.layout.isShadow=true;
    	$http.get('/cloudui/ws/apps/template/startTemplate'+'?v='+(new Date().getTime()),{
    		params:{
    			templateUUID:param
    		}
    	}).success(function(data){
    		$rootScope.app.layout.isShadow=false;
    		if(data.result)
    	    {
    			Notify.alert(
	              '<em class="fa fa-check"></em> '+data.message ,
	              {status: 'success'}
	            );
    			$state.go('app.template.deploy',{},{reload:true});
    	    }else{
    	    	Notify.alert(
	                '<em class="fa fa-times"></em> '+data.message ,
	                {status: 'danger'}
	             );
    	    }
    	})
    }
    
    // 模板停止
    $scope.stopTemp=function(param){
    	$rootScope.app.layout.isShadow=true;
    	$http.get('/cloudui/ws/apps/template/stopTemplate'+'?v='+(new Date().getTime()),{
    		params:{
    			templateUUID:param
    		}
    	}).success(function(data){
    		$rootScope.app.layout.isShadow=false;
    		if(data.result)
    	    {
    			Notify.alert(
	              '<em class="fa fa-check"></em> '+data.message ,
	              {status: 'success'}
	            );
    	    }else{
    	    	Notify.alert(
	                '<em class="fa fa-times"></em> '+data.message ,
	                {status: 'danger'}
	             );
    	    }
    	})
    }
    // 模板卸载
    $scope.uninstallTemp=function(param){
    	$rootScope.app.layout.isShadow=true;
    	$http.get('/cloudui/ws/apps/template/destroyTemplate'+'?v='+(new Date().getTime()),{
    		params:{
    			templateUUID:param
    		}
    	}).success(function(data){
    		$rootScope.app.layout.isShadow=false;
    		if(data.result)
    	    {
    			Notify.alert(
	              '<em class="fa fa-check"></em> '+data.message ,
	              {status: 'success'}
	            );
    	    }else{
    	    	Notify.alert(
	                '<em class="fa fa-times"></em> '+data.message ,
	                {status: 'danger'}
	             );
    	    }
    	})
    }
    // 模板删除
    $scope.delTemp=function(param){
    	ngDialog.openConfirm({
	         template:
	              '<p class="modal-header">您确定要删除此模板吗?</p>' +
	              '<div class="modal-body text-right">' +
	                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
	                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
	              '</button></div>',
	        plain: true,
	        className: 'ngdialog-theme-default'
	   }) .then(
		    function(){
		     $rootScope.app.layout.isShadow=true;
		      $http.delete('/cloudui/ws/apps/template/deleteTemplate'+'?v='+(new Date().getTime()),{
		 		   params:{
		 			  templateUUID:param 
		 		   }
		 	   }).success(function(data){
		 		  $rootScope.app.layout.isShadow=false;
		 	      if(data.result)
		 		  {
		 	    	  Notify.alert(
		                '<em class="fa fa-check"></em> '+data.message ,
		                {status: 'success'}
		 	          );  
		 		      $state.go('app.template.deploy',{},{reload:true});
		 		  }else
		 		  {
		 			  Notify.alert(
		                '<em class="fa fa-times"></em> '+data.message ,
		                {status: 'danger'}
		 	          ); 
		 		  }
		 	   })    
	   })
    }
}])

/* 创建模板 */
mControllers.controller('createtemplate', ['$rootScope','$scope', '$http', '$ocLazyLoad','$state','Notify','$filter','$timeout',function ($rootScope,$scope, $http, $ocLazyLoad,$state,Notify,$filter,$timeout) {
   
  $scope.editorOpts = {
    mode: 'javascript',
    lineNumbers: true,
    matchBrackets: true,
    theme: 'night',
    viewportMargin: Infinity
  };

  $scope.refreshEditor = 0;

  $scope.loadTheme = function() {
    var BASE = 'vendor/codemirror/theme/';
    $ocLazyLoad.load(BASE + $scope.editorOpts.theme + '.css');
    $scope.refreshEditor = !$scope.refreshEditor;
  };
  
  $scope.loadTheme($scope.editorOpts.theme);
  
  $scope.temp={};
  
  $scope.job_params=[];
  
  $scope.publicparam={
	 'isPublic':false
  }
  
  //验证表单
  $scope.submitted = false;
  $scope.validateInput = function(name, type) {
      var input = $scope.formValidate[name];
      return (input.$dirty || $scope.submitted) && input.$error[type];
  };
 
  //添加参数
  $scope.add=function(arr,name,param,index){
	  arr.push(param);
	  $scope.jobchosearr[index].paramvalue=''
  }
  // 删除参数
  $scope.del=function(list,idx){
	  list.splice(idx,1);
  }
  
  //添加标签
  $scope.addlabel=function(arr){
	  var obj={};
      arr.push(obj);
  }
  
  // 创建方式
  $scope.createStyles=[
      {'value':1,'text':'手动模式'},
      {'value':2,'text':'文本模式'}
  ]
  
  $scope.chosestyle= $scope.createStyles[0].value;
  
  // 方式改变
  
  $scope.changestyle=function(){
	  $scope.appchosearr=[];
	  $scope.jobchosearr=[];
  }
  
  $scope.search={};
  
  $scope.checkappId=[]; // 选中的应用
 
  // 获取应用列表 
  $scope.pageSize=5;
  $scope.onappPageChange = function (pageNum)
  {  
    $http.get('/cloudui/ws/apps/listOperationApps'+'?v=' + (new Date().getTime()),{
    params:
        {
          pageNum:pageNum,
          pageSize:$scope.pageSize,
          appName:$scope.search.searchappval||''
        }
   }).success(function(data){
  	
  	 angular.forEach(data.rows,function(val,key){
  		 var ischecked=$filter('filter')($scope.checkappId,val.appId).length>0?true:false;
  		 data.rows[key].ischecked=ischecked;
  	 })

  	 $scope.applist = data;
     $scope.apppageCount=Math.ceil($scope.applist.total/$scope.pageSize);
     if($scope.apppageCount==0){
         $scope.apppageCount=1;
     }
   })
  }
  
  //搜素应用
  $scope.searchApp=function(e)
  {
	  var keycode = window.event?e.keyCode:e.which;
	  if(keycode==13)
	  {
		  $scope.onappPageChange(1); 
	  }
  }
  
  $scope.checkjobId=[]; // 选中的任务
  // 获取任务列表 
  $scope.onjobPageChange = function (pageNum)
  {   
	  $http.get('/cloudui/ws/apps/jobs/listJobs'+'?v=' + (new Date().getTime()),{
	      params:
	          {
	            pageNum:pageNum,
	            pageSize:$scope.pageSize,
	            name:$scope.search.searchjobval||''
	          }
	   }).success(function(data){
	      
	       angular.forEach(data.rows,function(val,key){
	         var ischecked=$filter('filter')($scope.checkjobId,val.uuid).length>0?true:false;
	         data.rows[key].ischecked=ischecked;
	       })

	       $scope.joblist = data;
	       $scope.jobpageCount=Math.ceil($scope.joblist.total/$scope.pageSize);
	       if($scope.jobpageCount==0){
	           $scope.jobpageCount=1;
	       }
	     })
  }
  
  //搜素任务
  $scope.searchJob=function(e)
  {
	  var keycode = window.event?e.keyCode:e.which;
	  if(keycode==13)
	  {
		  $scope.onjobPageChange(1); 
	  }
  }
  
  //依赖
  $scope.depsFn=function(data,id)
  {
	  $timeout(function(){
		  for(var i = 0; i< data.length; i++){  
	          $("<option value='"+data[i].id+"'>"+data[i].name+"</option>").appendTo(id); 
	      } 
		  $(id).chosen({
		      no_results_text:"没有搜索到"
		  }); 
	  }); 
  }
  
  
  // 添加应用/任务
  
  $scope.addappFn=function(apparr,jobarr){
    $scope.appjobchosearr=[];
	$scope.appchosearr=[];
	$scope.jobchosearr=[];
	angular.forEach(apparr,function(val,key){
		var obj={};
		obj.id=val.split('&')[0];
		obj.name=val.split('&')[1];
		obj.type="app";
		$scope.appchosearr.push(obj);
		$scope.appjobchosearr.push(obj);
	})
	
	angular.forEach(jobarr,function(val,key){
		var obj={};
		obj.id=val.split('&')[0];
		obj.name=val.split('&')[1];
		obj.type="job";
		obj.dep=[];
		obj.args=[];
		obj.labelsarr=[];
		$scope.jobchosearr.push(obj);
		$scope.appjobchosearr.push(obj);
	})
	
	
	for(var i=0;i<$scope.appchosearr.length;i++)
	{
		 var arrappdata=[];
		 for(var j=0;j<$scope.appjobchosearr.length;j++)
		 {
			 var equal=angular.equals($scope.appchosearr[i],$scope.appjobchosearr[j])
			 if(!equal)
		     {
				 arrappdata.push($scope.appjobchosearr[j]) 
		     } 
		 }
		 $scope.depsFn(arrappdata,'#st'+i);
	}
	
	for(var i=0;i<$scope.jobchosearr.length;i++)
	{
		 var arrjobdata=[];
		 for(var j=0;j<$scope.appjobchosearr.length;j++)
		 {
			 var equal=angular.equals($scope.jobchosearr[i],$scope.appjobchosearr[j])
			 if(!equal)
		     {
				 arrjobdata.push($scope.appjobchosearr[j]) 
		     }
		 }
		 $scope.depsFn(arrjobdata,'#stjob'+i);
	}
	
	
	 
 }
  
  
  
  // 创建模板
  
  $scope.createTemp=function(type){
	 if(type==1){
       
        angular.forEach($scope.appjobchosearr,function(val,key){
        	if(val.type=='job')
        	{
        		val.labels={};
        		angular.forEach(val.labelsarr,function(labelval,labelkey){
        			val.labels[labelval.key]=labelval.val
        		})
        	}
        })
      
		 $http.post('/cloudui/ws/apps/template/createTemplateManually',{
	        "templateName":$scope.templateName,
	        "description":$scope.description,
	        "source":$scope.appjobchosearr,
	        "isPublic":$scope.publicparam.isPublic
	     }).success(function(data){
	    	 if(data.result)
		       {
		    	   Notify.alert(
		               '<em class="fa fa-check"></em> 创建成功！' ,
		               {status: 'success'}
		           );
		    	   $state.go('app.template.list',{},{reload:true}); 
		       }else
		       {
		    	   Notify.alert(
		               '<em class="fa fa-times"></em> 创建失败！' ,
		               {status: 'danger'}
		           );
		       }
	     })
	 }else{
		 $http.post('/cloudui/ws/apps/template/createTemplate',{
	        "templateName":$scope.templateName,
	        "description":$scope.description,
	        "source":$scope.temp.code,
	        "isPublic":$scope.publicparam.isPublic
	     }).success(function(data){
	       if(data.result)
	       {
	    	   Notify.alert(
	               '<em class="fa fa-check"></em> 创建成功！' ,
	               {status: 'success'}
	           );
	    	   $state.go('app.template.list',{},{reload:true}); 
	       }else
	       {
	    	   Notify.alert(
	               '<em class="fa fa-times"></em> 创建失败！' ,
	               {status: 'danger'}
	           );
	       }
	    })
	 }
     
  }

}])

/* 模板资源详情 */
mControllers.controller('templateDetailController',['$scope','$http','$stateParams','$ocLazyLoad','$filter',function($scope,$http,$stateParams,$ocLazyLoad,$filter){
  
	$scope.editorOpts = {
	    mode: 'javascript',
	    lineNumbers: true,
	    matchBrackets: true,
	    theme: 'night',
	    viewportMargin: Infinity
	};

    $scope.refreshEditor = 0;

    $scope.loadTheme = function() {
	    var BASE = 'vendor/codemirror/theme/';
	    $ocLazyLoad.load(BASE + $scope.editorOpts.theme + '.css');
	    $scope.refreshEditor = !$scope.refreshEditor;
   };
		  
    $scope.loadTheme($scope.editorOpts.theme);
    
	$http.get('/cloudui/ws/apps/template/getTemplateInfoDetail'+'?v='+(new Date().getTime()),{
    params:{
       templateInfoUUID:$stateParams.templateid
    }
   }).
   success(function(data){
       $scope.templateName=data.templateName;
	   $scope.description=data.description;
	   $scope.updateTime=data.updateTime;
       $scope.code=$filter('json')(data.source);
   })
}])

/* 已部署模板详情 */
mControllers.controller('templateDeployDetailController',['$rootScope','$scope','$http','$stateParams','ngDialog','$state','Notify',function($rootScope,$scope,$http,$stateParams,ngDialog,$state,Notify){

	$http.get('/cloudui/ws/apps/template/getTemplateDetail'+'?v='+(new Date().getTime()),{
		params:{
			templateUUID:$stateParams.templateid
		}
	}).
	success(function(data){
		$scope.tempdetail=data;
	})
	
	// 部署模板上的应用
	
	$http.get('/cloudui/ws/apps/template/listTemplateApps'+'?v='+(new Date().getTime()),{
		params:{
			templateUUID:$stateParams.templateid
		}
	}).
	success(function(data){
		$scope.tempapp=data;
	})
	
 // 模板启动
    
    $scope.startTemp=function(param){
    	$rootScope.app.layout.isShadow=true;
    	$http.get('/cloudui/ws/apps/template/startTemplate'+'?v='+(new Date().getTime()),{
    		params:{
    			templateUUID:param
    		}
    	}).success(function(data){
    		$rootScope.app.layout.isShadow=false;
    		if(data.result)
    	    {
    			Notify.alert(
	              '<em class="fa fa-check"></em> '+data.message ,
	              {status: 'success'}
	            );
    			$state.go('app.template.deploy',{},{reload:true});
    	    }else{
    	    	Notify.alert(
	                '<em class="fa fa-times"></em> '+data.message ,
	                {status: 'danger'}
	             );
    	    }
    	})
    }
    
    // 模板停止
    $scope.stopTemp=function(param){
    	$rootScope.app.layout.isShadow=true;
    	$http.get('/cloudui/ws/apps/template/stopTemplate'+'?v='+(new Date().getTime()),{
    		params:{
    			templateUUID:param
    		}
    	}).success(function(data){
    		$rootScope.app.layout.isShadow=false;
    		if(data.result)
    	    {
    			Notify.alert(
	              '<em class="fa fa-check"></em> '+data.message ,
	              {status: 'success'}
	            );
    	    }else{
    	    	Notify.alert(
	                '<em class="fa fa-times"></em> '+data.message ,
	                {status: 'danger'}
	             );
    	    }
    	})
    }
    // 模板卸载
    $scope.uninstallTemp=function(param){
    	$rootScope.app.layout.isShadow=true;
    	$http.get('/cloudui/ws/apps/template/destroyTemplate'+'?v='+(new Date().getTime()),{
    		params:{
    			templateUUID:param
    		}
    	}).success(function(data){
    		$rootScope.app.layout.isShadow=false;
    		if(data.result)
    	    {
    			Notify.alert(
	              '<em class="fa fa-check"></em> '+data.message ,
	              {status: 'success'}
	            );
    	    }else{
    	    	Notify.alert(
	                '<em class="fa fa-times"></em> '+data.message ,
	                {status: 'danger'}
	             );
    	    }
    	})
    }
    // 模板删除
    $scope.delTemp=function(param){
    	ngDialog.openConfirm({
	         template:
	              '<p class="modal-header">您确定要删除此模板吗?</p>' +
	              '<div class="modal-body text-right">' +
	                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
	                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
	              '</button></div>',
	        plain: true,
	        className: 'ngdialog-theme-default'
	   }) .then(
		    function(){
		      $rootScope.app.layout.isShadow=true;
		      $http.delete('/cloudui/ws/apps/template/deleteTemplate'+'?v='+(new Date().getTime()),{
		 		   params:{
		 			  templateUUID:param 
		 		   }
		 	   }).success(function(data){
		 		  $rootScope.app.layout.isShadow=false;
		 	      if(data.result)
		 		  {
		 	    	  Notify.alert(
		                '<em class="fa fa-check"></em> '+data.message ,
		                {status: 'success'}
		 	          );  
		 		      $state.go('app.template.deploy',{},{reload:true});
		 		  }else
		 		  {
		 			  Notify.alert(
		                '<em class="fa fa-times"></em> '+data.message ,
		                {status: 'danger'}
		 	          ); 
		 		  }
		 	   })    
	   })
    }
}])

/* 已部署模板上的应用 */
/*mControllers.controller('templateDeployDetailAppController',['$scope','$http','$stateParams',function($scope,$http,$stateParams){
	$http.get('/cloudui/ws/apps/template/listTemplateApps'+'?v='+(new Date().getTime()),{
		params:{
			templateUUID:$stateParams.templateid
		}
	}).
	success(function(data){
		$scope.tempapp=data;
	})
}])*/

/* 已部署编排模板 */
/*mControllers.controller('templateDeployDetailYamlController', ['$scope', '$http', '$ocLazyLoad','$state', function ($scope, $http, $ocLazyLoad,$state) {
   $scope.editorOpts = {
    mode: 'javascript',
    lineNumbers: true,
    matchBrackets: true,
    theme: 'night',
    viewportMargin: Infinity
  };

  $scope.refreshEditor = 0;

  $scope.loadTheme = function() {
    var BASE = 'vendor/codemirror/theme/';
    $ocLazyLoad.load(BASE + $scope.editorOpts.theme + '.css');
    $scope.refreshEditor = !$scope.refreshEditor;
  };
  
  $scope.loadTheme($scope.editorOpts.theme);
  
}])

 部署模板 
mControllers.controller('deploytempController',['$scope','$http',function($scope,$http){
	// 集群列表
	$http.get('/cloudui/ws/apps/getUserCluster'+'?v=' + (new Date().getTime())).success(function(data){
	    $scope.userCluster=data; 
	    $scope.clusterId=data[0].id;
	})
}])*/
 

/* 镜像页 */

mControllers.controller('imageController',['$scope','ngDialog',function($scope,ngDialog){
      
      // 新建镜像弹出框

      $scope.openCreateImage = function () {
        ngDialog.open({
          template: 'app/views/dialog_createimage.html'+'?action='+(new Date().getTime()),
          className: 'ngdialog-theme-default ngdialog-lg',
          scope: $scope,
          cache:false,
          controller:'createImage'
        });
      };

}])

// 私有镜像列表
mControllers.controller('ownimageController',['$scope','$http',function($scope,$http){
         
      $scope.pageSize=5;
      $scope.onPageChange = function ()
      {
          $http.get('/cloudui/ws/apps/registry/getImagesByPage'+ '?v=' + (new Date().getTime()),{
          params:
              {
                pageNum:$scope.pageNum,
                pageSize:5,
                registryId:1,
                keyword:$scope.searchval
              }
         }).success(function(data){
            $scope.myimage = data;
            $scope.pageCount=Math.ceil($scope.myimage.total/$scope.pageSize);
            if($scope.pageCount==0){
            	$scope.pageCount=1;
            }
         })
     }
     //搜素私有镜像
     $scope.searchOwnImage=function()
     {
         $scope.pageNum=1;
         $scope.onPageChange();
     }
}])
// 公有镜像列表
mControllers.controller('commonimageController',['$scope','$http',function($scope,$http){
         
      $scope.pageSize=5;
      $scope.onPageChange = function ()
      {
          $http.get('/cloudui/ws/apps/registry/getImagesByPage'+ '?v=' + (new Date().getTime()),{
          params:
              {
                pageNum:$scope.pageNum,
                pageSize:5,
                registryId:2,
                keyword:$scope.searchval
              }
         }).success(function(data){
            $scope.myimage = data;
            $scope.pageCount=Math.ceil($scope.myimage.total/$scope.pageSize);
            if($scope.pageCount==0){
            	$scope.pageCount=1;
            }
         })
     }
     //搜素公有镜像
     $scope.searchComImage=function()
     {
         $scope.pageNum=1;
         $scope.onPageChange();
     }
}])

// 创建镜像
mControllers.controller('createImage',['$scope','$http','$state','ngDialog','Notify',function($scope,$http,$state,ngDialog,Notify){
   // 镜像仓库  
   $http.get('/cloudui/ws/apps/registry/list'+'?v='+(new Date().getTime())).success(function(data){
      $scope.registrylist=data;
   })
   // 镜像名称   
   $scope.getImages=function(){
      $scope.image='';
      $scope.tag='';
      var registryId=$scope.registry.split(',')[0];
      $http.get('/cloudui/ws/apps/registry/real/allImages'+'?v='+(new Date().getTime()),{params:{registryId:registryId}}).success(function(data){
          $scope.allImages=data;
      }) 
   }
   // 版本  
   $scope.getTags=function(){
      $scope.tag='';
      var registryId=$scope.registry.split(',')[0];
      $http.get('/cloudui/ws/apps/registry/real/allTags'+'?v='+(new Date().getTime()),{params:{
         registryId:registryId,
         image:$scope.image
      }}).success(function(data){
         $scope.allTags=data.rows;
         $scope.description_resource=data.description_resource;
      })
   }
   // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.createimageForm[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
     };
   // 创建镜像
   $scope.createImageFn=function(){
     $scope.submitted = true;
     if ($scope.createimageForm.$valid) {
       $http.post('/cloudui/ws/apps/registry/registResource',{
           registry:$scope.registry.split(',')[1],
           image:$scope.image,
           tag:$scope.tag,
           startPort:$scope.startPort,
           startScript:$scope.startScript,
           deploy_timeout:$scope.deploy_timeout,
           start_timeout:$scope.start_timeout,
           stop_timeout:$scope.stop_timeout,
           destroy_timeout:$scope.destroy_timeout,
           description:$scope.description,
           description_resource:$scope.description_resource   
       }).success(function(data){
          if(data.result)
          {
        	  Notify.alert(
                 '<em class="fa fa-check"></em> 创建成功!',
                  {status: 'success'}
              );
        	  ngDialog.close();
        	  $state.go('app.image.myown',{},{ reload: true });
          }else
          {
            Notify.alert(
                '<em class="fa fa-times"></em> '+data.reason ,
                {status: 'danger'}
            );
          }
       })
     }
     
   }
}])

/* 镜像详情 */
mControllers.controller('imageDetailController',['$scope','$http','$stateParams',function($scope,$http,$stateParams){
	// 详情信息
	$http.get('/cloudui/ws/apps/registry/imageInfo'+'?v='+(new Date().getTime()),{
		params:{
			registryId:$stateParams.registryId,  
			imageName:$stateParams.imagename   
		} 
	}).success(function(data){
	   $scope.imageDetail=data;
	})
}])

/* 镜像版本列表 */
mControllers.controller('imageDetailvController',['$scope','$http','$filter','$stateParams','ngDialog','Notify','$state',function($scope,$http,$filter,$stateParams,ngDialog,Notify,$state){
	// 镜像版本列表 
    $scope.pageSize=30;
    $scope.keyword='';

    $scope.onPageChange = function ()
    {   
      $http.get('/cloudui/ws/apps/registry/getTagListByPage'+'?v=' + (new Date().getTime()),{
      params:
          {
    	    registryId:$stateParams.registryId,  
    	    imageName:$stateParams.imagename,   
    		pageSize:10,
    		pageNum:$scope.pageNum,
    		keyword:$scope.keyword
          }
     }).success(function(data){
        $scope.imagevlist = data;
        $scope.pageCount=Math.ceil($scope.imagevlist.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
     })
    }

    // 搜素应用
    $scope.searchV=function()
    {
         $scope.pageNum=1;
         $scope.onPageChange();
    }
    // 查看版本信息弹出框
    $scope.dialogImagev = function (param) {
        ngDialog.open({
          template: 'app/views/dialog_imagetag.html'+'?action='+(new Date().getTime()),
          className: 'ngdialog-theme-default ngdialog-lg',
          scope: $scope,
          data:{imagevDetail:param},
          cache:false,
          controller:'imageTagDetail'
        });
    };
    
    // 删除镜像版本
    
    $scope.delversion=function(param){
    	$http.get('/cloudui/ws/apps/registry/deleteVersion'+'?v='+(new Date().getTime()),{params:{
    		versionId:param
    	}}).success(function(data){
    		if(data.result)
    		{
    			Notify.alert(
                    '<em class="fa fa-check"></em> 删除成功！' ,
                    {status: 'success'}
                );
    			$state.go('app.image.myown',{},{reload:true});
    		}else
    		{
    			 Notify.alert(
                     '<em class="fa fa-times"></em> 删除失败',
                     {status: 'danger'}
                  );
    		}
    	})
    }
}])

/* 镜像版本详情 */
mControllers.controller('imageTagDetail',['$scope','$http','Notify','$state','ngDialog',function($scope,$http,Notify,$state,ngDialog){
	//版本信息
	$scope.imagetag=$scope.ngDialogData.imagevDetail;
	 
	$scope.startPort=$scope.imagetag.startPort;
	$scope.startScript=$scope.imagetag.startScript;
	$scope.deploy_timeout=Number($scope.imagetag.deploy_timeout);
	$scope.start_timeout=Number($scope.imagetag.start_timeout);
	$scope.stop_timeout=Number($scope.imagetag.stop_timeout);
	$scope.destroy_timeout=Number($scope.imagetag.destroy_timeout);
	$scope.description=$scope.imagetag.description;
	
	// 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.createimageForm[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };
     
    // 更新信息
    $scope.updateImageFn=function(){
        $scope.submitted = true;
        if ($scope.createimageForm.$valid) {
        	$http({
          	  method:'post',
          	  url:'/cloudui/ws/apps/registry/updateVersionInfo',
          	  data: $.param({
          		versionId:$scope.imagetag.id,
          		startPort:$scope.startPort,
          		startScript:$scope.startScript,
          		deploy_timeout:$scope.deploy_timeout,
          		start_timeout:$scope.start_timeout,
          		stop_timeout:$scope.stop_timeout,
          		destroy_timeout:$scope.destroy_timeout,
          		description:$scope.description
          	  }),
          	  headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
            }).success(function(data){
            	if(data.result)
            	{
            		ngDialog.close();
            		Notify.alert(
                        '<em class="fa fa-check"></em> 更新成功！' ,
                        {status: 'success'}
                    );
            		
            		$state.go('app.imagedetail.version',{},{reload:true});
            	}else
            	{
            		Notify.alert(
                        '<em class="fa fa-times"></em> '+data.reason ,
                        {status: 'danger'}
                    );
            	}
            })
        }
    }
}])

/* 策略列表页 */

mControllers.controller('tacticscontroller',['$rootScope','$scope','$http','$state','ngDialog','Notify',function($rootScope,$scope,$http,$state,ngDialog,Notify){
   
   // 策略列表  
   $scope.pageSize=10;
   
   $scope.onPageChange = function (url)
   {
	     if($scope.searchval)
	     {
	        $scope.tacticlisturl='/cloudui/ws/monitor/category/name/'+$scope.searchval;
	     }else{
	        $scope.tacticlisturl='/cloudui/ws/monitor/categories/'+$rootScope.user.id;
	     }
	     
	     $http.get($scope.tacticlisturl+'/'+$scope.pageNum+'/'+$scope.pageSize+'?v=' + (new Date().getTime())).success(function(data){
	         $scope.warningtactics = data;
	         $scope.pageCount=Math.ceil($scope.warningtactics.total/$scope.pageSize);
	         if($scope.pageCount==0){
	        	 $scope.pageCount=1;
	         }
	     })
   }
   
   $scope.typetext=function(type){
	   switch(type)
	   {
	      case 1:
		  return '组件';
		  break;
	      case 0:
	      return '主机';
	      break;
	      case 3:
	      return '平台组件';
	      case 4:
		  return '自定义';
	   }
   }

   // 搜素策略 
   $scope.searchTactic=function(params)
   {  
      $scope.pageNum=1;
      $scope.onPageChange();
   }
   
   // 创建策略-选择资源类型
   
   $scope.choseresourceType=function(){
	   ngDialog.open({
	         template:
	              '<p class="modal-header">请选择资源类型</p><div class="modal-body"><div class="row"><div class="col-sm-6 text-center"><a class="btn btn-info radius_a" ui-sref="app.createtactic({resourcetype:1})" ng-click="closeThisDialog(0)">组件</a></div><div class="col-sm-6 text-center"><a class="btn btn-info radius_a" ui-sref="app.createtactic({resourcetype:0})" ng-click="closeThisDialog(0)">主机</a></div></div></div>',
	        plain: true,
	        className: 'ngdialog-theme-default'
	   })
   }

   // 删除策略
   $scope.deltactic=function(index,id){
      ngDialog.openConfirm({
         template:
              '<p class="modal-header">您确定要删除此策略吗?</p>' +
              '<div class="modal-body text-right">' +
                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
              '</button></div>',
        plain: true,
        className: 'ngdialog-theme-default'
      })
      .then(
        function(){
           $http({
              method:'DELETE',
              url:'/cloudui/ws/monitor/category/'+id
           }).success(function(data){
               if(data.result)
               {
                 Notify.alert(
                    '<em class="fa fa-check"></em> 删除成功！' ,
                    {status: 'success'}
                 );
                 $scope.warningtactics.rows.splice(index, 1);
               }else
               {
                 Notify.alert(
                   '<em class="fa fa-times"></em> 删除失败！' ,
                   {status: 'danger'}
                 );
               }
           })
        }
      )
  }

  // 启动策略
  $scope.startTactic=function(params)
  {
    $http({
       method:'get',
       url:'/cloudui/ws/monitor/alarm/start/'+params
    }).success(function(data){
       if(data.result)
       {
         Notify.alert(
             '<em class="fa fa-check"></em> 启动成功！' ,
             {status: 'success'}
         );
         $state.go('app.warning.tactics',{},{reload:true});
       }else
       {
         Notify.alert(
            '<em class="fa fa-times"></em> 启动失败！' ,
            {status: 'danger'}
         );
       }
    })
  }

   // 停止策略
  $scope.stopTactic=function(params)
  {
    $http({
       method:'get',
       url:'/cloudui/ws/monitor/alarm/stop/'+params
    }).success(function(data){
       if(data.result)
       {
         Notify.alert(
            '<em class="fa fa-check"></em> 停止成功！' ,
            {status: 'success'}
         );
         $state.go('app.warning.tactics',{},{reload:true});
       }else
       {
    	   Notify.alert(
    	     '<em class="fa fa-times"></em> 停止失败！' ,
    	     {status: 'danger'}
    	   );
       }
    })
  }
  
  // 编辑策略
  $scope.edittactic=function(params1,params2){
 
	  if(params2==0)
	  {
		  if(params1.type==4)
		  {
			  $state.go('app.updateUserDefinedTactic',{tacticid:params1.id},{reload:true}); 
		  }else{
			  $state.go('app.updatetactic',{tacticid:params1.id},{reload:true});
		  }
		  
	  }else
	  {
		  Notify.alert(
              '策略正在运行中，无法编辑，请先停止策略再编辑' ,
              {status: 'info'}
          );
	  }
  }

}])

mControllers.controller('personController',['$rootScope','$scope','$http','ngDialog','$state','Notify',function($rootScope,$scope,$http,ngDialog,$state,Notify){


   // 所有人列表 
   $scope.pageSize=10;
   $scope.onPageChange = function (url)
   {
     if($scope.searchval)
     {
         $scope.personurl='/cloudui/ws/monitor/person/name/'+$scope.searchval;
     }else{
        $scope.personurl= '/cloudui/ws/monitor/persons/'+$rootScope.user.id;
     }

     $http.get($scope.personurl+'/'+$scope.pageNum+'/'+$scope.pageSize+'?v=' + (new Date().getTime())).success(function(data){
        $scope.warningNotifier = data;
        $scope.pageCount=Math.ceil($scope.warningNotifier.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
     })
   }

   // 搜素人员 
   $scope.searchperson=function(params)
   {
	  $scope.pageNum=1;
      $scope.onPageChange();
   }

   // 删除通知人
   $scope.delNotifier=function(params){
	  $http.get('/cloudui/ws/monitor/person/'+params+'/getRunningCategoryByPersonId'+'?v='+(new Date().getTime()))
	  .success(function(data){
		  if(data.length>0)
		  {
			  var tacticarr=[];
			  
			  angular.forEach(data,function(val,key){
				  tacticarr.push(val.name)
			  })
			  
			  var tacticstr=tacticarr.join(',');
			  
			  Notify.alert(
	               '策略'+tacticstr+'关联此通知人，无法删除！' ,
	               {status: 'info'}
              ); 
		  }else{
		      ngDialog.openConfirm({
		          template:
		               '<p class="modal-header">您确定要删除此通知人吗?</p>' +
		               '<div class="modal-body text-right">' +
		                 '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
		                 '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
		               '</button></div>',
		         plain: true,
		         className: 'ngdialog-theme-default'
		       })
		       .then(
		         function(){
		            $http({
		               method:'DELETE',
		               url:'/cloudui/ws/monitor/person/'+params
		            }).success(function(data){
		                if(data.result)
		                {
		                  Notify.alert(
		                    '<em class="fa fa-check"></em> 删除成功！' ,
		                    {status: 'success'}
		                  );
		                  $state.go('app.warning.notifier',{},{reload:true});
		                }else
		                {
		                  Notify.alert(
		                    '<em class="fa fa-times"></em> 删除失败！' ,
		                    {status: 'danger'}
		                  );
		                }
		            })
		         }
		       )
		  }
	  })
  }
 

   // 新建通知人弹出框

   $scope.openCreateNotifier = function () {
    ngDialog.open({
      template: 'app/views/dialog_createnotifier.html'+'?action='+(new Date().getTime()),
      className: 'ngdialog-theme-default ngdialog-sm',
      scope: $scope,
      cache: false,
      controller:'createNotifier'
    });
   };
   
  // 更新通知人弹出框

   $scope.openUpdateNotifier = function (params) {
	   $http.get('/cloudui/ws/monitor/person/'+params.id+'/getRunningCategoryByPersonId'+'?v='+(new Date().getTime()))
	   .success(function(data){
		   
		   var isrunningdata=[];
		   
		   for(var i=0;i<data.length;i++)
		   {
			   if(data[i].isrunning==1)
			   {
				   isrunningdata.push(data[i]); 
			   }
		   }
		   
		   if(isrunningdata.length>0)
		   {
			  var tacticarr=[];
			  
			  angular.forEach(isrunningdata,function(val,key){
				  tacticarr.push(val.name)
			  })
			  
			  var tacticstr=tacticarr.join(',');
			  
			  Notify.alert(
	               '正在运行的策略'+tacticstr+'关联此通知人，无法更新，请先停止这些策略再更新！' ,
	               {status: 'info'}
              );
		   }else{
			    ngDialog.open({
			        template: 'app/views/dialog_updateNotifier.html'+'?action='+(new Date().getTime()),
			        className: 'ngdialog-theme-default ngdialog-sm',
			        scope: $scope,
			        cache: false,
			        data:{person:params},
			        controller:'updateNotifier'
			      }); 
		   }
	   })

   };

}])

/* 创建策略 */
mControllers.controller('createTactic',['$rootScope','$scope','$http','$filter','$state','$stateParams','Notify','$timeout',function($rootScope,$scope,$http,$filter,$state,$stateParams,Notify,$timeout){
   
	$scope.resourcetype=$stateParams.resourcetype;  // 策略类型
 
	// 资源列表
	
	$scope.getResources=function(type){
	    $http({
	      method:'get',
	      url:'/cloudui/ws/monitor/resources/'+type+'/user/'+$rootScope.user.id+'?v='+(new Date().getTime())
	    }).success(function(data){
	        angular.forEach(data,function(val,key){
	           val.ticked=false;
	        })
	        $scope.modernresources=data;
	    })
    }
	
	$scope.getResources($scope.resourcetype);
	
	// 通知人列表
	$scope.personList=function()
	{
	     $http.get('/cloudui/ws/monitor/persons/'+$rootScope.user.id+'?v=' + (new Date().getTime())).success(function(data){
	       if(data != null && data.length > 0){  

	          for(var i = 0; i< data.length; i++){  

	              $("<option value='"+data[i].id+"'>"+data[i].name+"</option>").appendTo("#notifierst"); 
	             
	          }  

	          $("#notifierst").chosen({
	             no_results_text:"没有搜索到此人"
	          });  
	                    
	      }  

	    })
	}
    $scope.personList();
    
    // 条件
    $scope.conditions = [
        {value: 'min', text: '小于'},
        {value: 'max', text: '大于'}
    ];

    // 条件
    $scope.conditions2 = [
        {value: 'max', text: '大于'}
    ];
    
  
    // 规则展示
    
    if($scope.resourcetype==3)
    {
    	 $scope.normcpu=false;
    	 $scope.normcomponentwarn=true;
    }else{
    	 $scope.normcpu=true;
    }

    $scope.rulelist={};
 
    
    // 元数据
    
    $scope.getRuleId=function(condition,norm){
    	if(condition) 
    	{
    		var itemcondition=norm+'_'+condition;
    	}else
    	{
    		var itemcondition=norm;
    	}
    	
    	if($scope.resourcetype==1)
        {
    		switch (itemcondition){ 
		        case 'cpu_min' : metadataId=2; break; 
		        case 'cpu_max' : metadataId=1; break;
		        case 'mem_min' : metadataId=6; break;
		        case 'mem_max' : metadataId=5; break; 
		        case 'accesstimes_min' : metadataId=13; break;
		        case 'accesstimes_max' : metadataId=14; break;
		        case 'apprunningstate' : metadataId=9; break; 
		        case 'instancerunningstate' : metadataId=10; break; 
		        case 'logscan' : metadataId=12; break; 
            } 
        }else if($scope.resourcetype==0)
        {
        	switch (itemcondition){ 
	            case 'cpu_min' : metadataId=4; break; 
	            case 'cpu_max' : metadataId=3; break;
	            case 'mem_min' : metadataId=8; break;
	            case 'mem_max' : metadataId=7; break; 
	            case 'hostrunningstate' : metadataId=11; break;
            }
        }else if($scope.resourcetype==3)
        {
        	switch (itemcondition){ 
            	case 'componentwarn' : metadataId=15; break;
            }
        }
    	return metadataId; 
    }

    
    // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formRule[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };
    
    // 提交信息
    $scope.submitRuleForm = function() {
     
        $scope.submitted = true;
        // 选择的资源
        if($scope.modernresources)
        {
           $scope.resourceids='';
           $scope.resourcelist=$filter('filter')($scope.modernresources,'true');

           angular.forEach($scope.resourcelist, function(val,key){
             if(key+1==$scope.resourcelist.length)
             {
                $scope.resourceids+=val.resourceId+'-'+val.resourceName;
             }else
             {
                $scope.resourceids+=val.resourceId+'-'+val.resourceName+',';
             }
             
           })
        }
        
     // 创建的规则
    	$scope.ruleData=[];
    	 console.log($scope.rulelist);
    	angular.forEach($scope.rulelist,function(val,key){
    		 
    		//if(val.period)
    		//{
    			if(key=='apprunningstate'||key=='instancerunningstate'||key=='hostrunningstate'||key=='componentwarn')
           		 {  
           			 var ruleObj=angular.toJson({
                     		  metadataId:$scope.getRuleId(val.condition,key),
                     		  value:'stop',
                     		  period:val.period
                     })
           		 }else if(key=='accesstimes'){
           			 
           	 
                  var ruleObj=angular.toJson({
                          metadataId:$scope.getRuleId(val.condition,key),
                          value:{
                            value:val.value,
                            time:val.thour*3600+val.tmin*60+val.tsec
                          },
                          period:val.period
                 })
           		 }else
           		 { 
           			 var ruleObj=angular.toJson({
                     		  metadataId:$scope.getRuleId(val.condition,key),
                     		  value:val.value,
                     		  period:val.period
                 }) 
           		 }
    			$scope.ruleData.push(ruleObj) 
    		//}

    	})
     
    	$scope.ruleDataS="["+$scope.ruleData+"]";
    	
    	// 通知人
    	if($scope.notifier)
        {
          $scope.personids=$scope.notifier.join(",")
        }else
        {
          $scope.personids='';
        }
        
        if(!$scope.resourceids)
    	{
    		 Notify.alert(
               '请选择资源！' ,
               {status: 'info'}
             );
    	}else if($scope.ruleData.length<=0)
    	{
    		Notify.alert(
               '请添加规则！' ,
               {status: 'info'}
             );
    	}else
    	{
    		console.log($scope.formRule.$valid);
    		if ($scope.formRule.$valid) {
            	//创建策略
                $http({
                    method:'post',
                    url:'/cloudui/ws/monitor/category',
                    data: $.param({
                  	  resourceids:$scope.resourceids,
                  	  personids:$scope.personids,
                  	  name:$scope.name,
                  	  type:$scope.resourcetype,
                  	  mtime:$scope.mtime,
                  	  /*wtime:$scope.wtime,*/
                  	  userId:$rootScope.user.id,
                  	  rules:$scope.ruleDataS
                    }),
                    headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
                }).success(function(data){
                	if(data)
                    {
                      Notify.alert(
                         '<em class="fa fa-check"></em> 创建策略成功！' ,
                         {status: 'success'}
                      );
                      $state.go('app.warning.tactics',{},{reload:true});
                    }else
                    {
                      Notify.alert(
                         '<em class="fa fa-times"></em> 创建策略失败！' ,
                          {status: 'danger'}
                      );
                    }
                })
            }
    	}
        
    }
	
}])

/* 创建自定义策略 */
mControllers.controller('createUserDefinedTactic',['$rootScope','$scope','$http','$stateParams','Notify','$state','$filter',function($rootScope,$scope,$http,$stateParams,Notify,$state,$filter){
	$scope.resourcetype=$stateParams.resourcetype;  // 策略类型
	
    // 资源列表
	
	$scope.getResources=function(type){
	    $http({
	      method:'get',
	      url:'/cloudui/ws/monitor/resources/'+type+'/user/'+$rootScope.user.id+'?v='+(new Date().getTime())
	    }).success(function(data){
	        angular.forEach(data,function(val,key){
	           val.ticked=false;
	        })
	        $scope.modernresources=data;
	    })
    }
	
	$scope.getResources($scope.resourcetype);
	
	// 通知人列表
	$scope.personList=function()
	{
	     $http.get('/cloudui/ws/monitor/persons/'+$rootScope.user.id+'?v=' + (new Date().getTime())).success(function(data){
	       if(data != null && data.length > 0){  

	          for(var i = 0; i< data.length; i++){  

	              $("<option value='"+data[i].id+"'>"+data[i].name+"</option>").appendTo("#notifierst"); 
	             
	          }  

	          $("#notifierst").chosen({
	             no_results_text:"没有搜索到此人"
	          });  
	                    
	      }  

	    })
	}
    $scope.personList();
    
    // 条件
    $scope.conditions = [
        {value: 'max', text: '大于'},
        {value: 'min', text: '小于'},
        {value: 'equal', text: '等于'},
        {value: 'avg', text: '平均值'} 
    ];
    
    $scope.rulelist=[]; 
    // 添加规则
    $scope.addRuleFn=function()
    {
      $scope.inserted = {
        name:'',
        value:'',
        condition:'max',
        period:''
      }
     
      $scope.rulelist.push($scope.inserted);
    }

    $scope.removeRuleFn=function(index){
      $scope.rulelist.splice(index, 1);
    }
    
    // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formRule[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];    
    };
    
    // 提交信息
    $scope.submitRuleForm = function() {
        $scope.submitted = true;
        
        // 选择的资源
        if($scope.modernresources)
        {
           $scope.resourceids='';
           $scope.resourcelist=$filter('filter')($scope.modernresources,'true');

           angular.forEach($scope.resourcelist, function(val,key){
             if(key+1==$scope.resourcelist.length)
             {
                $scope.resourceids+=val.resourceId+'-'+val.resourceName;
             }else
             {
                $scope.resourceids+=val.resourceId+'-'+val.resourceName+',';
             }
             
           })
        }
        
        // 通知人
    	if($scope.notifier)
        {
          $scope.personids=$scope.notifier.join(",")
        }else
        {
          $scope.personids='';
        }
    	
    	// 创建的规则
    	$scope.ruleData=[];
    	
    	angular.forEach($scope.rulelist,function(val,key){
    		 var ruleObj=angular.toJson({
        		  metadataId:16,
        		  value:{
        			  name:val.name,
        	          condition:val.condition,
        	          value:val.value
        		  },
        		  period:val.period
             })
             $scope.ruleData.push(ruleObj) 
    	})
    	
    	$scope.ruleDataS="["+$scope.ruleData+"]";
    	
    	if(!$scope.resourceids)
    	{
    		 Notify.alert(
               '请选择资源！' ,
               {status: 'info'}
             );
    	}else if($scope.rulelist.length<=0)
    	{
    		Notify.alert(
               '请添加规则！' ,
               {status: 'info'}
             );
    	}else{
    		if ($scope.formRule.$valid) {
    			//创建策略
                $http({
                    method:'post',
                    url:'/cloudui/ws/monitor/category',
                    data: $.param({
                      resourceids:$scope.resourceids,
                  	  personids:$scope.personids,
                  	  name:$scope.name,
                  	  type:$scope.resourcetype,
                  	  mtime:$scope.mtime,
                  	  userId:$rootScope.user.id,
                  	  rules:$scope.ruleDataS
                    }),
                    headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
                }).success(function(data){
                	if(data)
                    {
                      Notify.alert(
                         '<em class="fa fa-check"></em> 创建策略成功！' ,
                         {status: 'success'}
                      );
                      $state.go('app.warning.tactics',{},{reload:true});
                    }else
                    {
                      Notify.alert(
                         '<em class="fa fa-times"></em> 创建策略失败！' ,
                          {status: 'danger'}
                      );
                    }
                })
    		}
    	}
    }
}])

/* 更新策略 */

mControllers.controller('updateTactic',['$rootScope','$scope','$http','$filter','$state','$stateParams','Notify',function($rootScope,$scope,$http,$filter,$state,$stateParams,Notify){
	  // 条件
    $scope.conditions = [
        {value: 'min', text: '小于'},
        {value: 'max', text: '大于'}
    ];

    // 条件
    $scope.conditions2 = [
        {value: 'max', text: '大于'}
    ];
    
  
    // 规则展示
    
    $scope.rulelist={};

    // 元数据
    
    $scope.getRuleId=function(condition,norm){
      if(condition) 
      {
        var itemcondition=norm+'_'+condition;
      }else
      {
        var itemcondition=norm;
      }
      
      if($scope.resourcetype==1)
        {
        switch (itemcondition){ 
            case 'cpu_min' : metadataId=2; break; 
            case 'cpu_max' : metadataId=1; break;
            case 'mem_min' : metadataId=6; break;
            case 'mem_max' : metadataId=5; break; 
            case 'accesstimes_min' : metadataId=13; break;
            case 'accesstimes_max' : metadataId=14; break;
            case 'apprunningstate' : metadataId=9; break; 
            case 'instancerunningstate' : metadataId=10; break; 
            case 'logscan' : metadataId=12; break; 
            } 
        }else if($scope.resourcetype==0)
        {
          switch (itemcondition){ 
              case 'cpu_min' : metadataId=4; break; 
              case 'cpu_max' : metadataId=3; break;
              case 'mem_min' : metadataId=8; break;
              case 'mem_max' : metadataId=7; break; 
              case 'hostrunningstate' : metadataId=11; break;
            }
        }else{
           switch (itemcondition){ 
        	  case 'componentwarn' : metadataId=15; break;
           }
        }
      return metadataId; 
    }

    // 通知人 

    $scope.getperson=function(selectedArr)
    {
     $http.get('/cloudui/ws/monitor/persons/'+$rootScope.user.id+'?v=' + (new Date().getTime())).success(function(data){
       if(data != null && data.length > 0){  

          for(var i = 0; i< data.length; i++){  

             var dataSelected=$filter('filter')(selectedArr,data[i].name,true);
        

             if(dataSelected&&dataSelected.length>0)
             {
                $("<option value='"+data[i].id+"' selected>"+data[i].name+"</option>").appendTo("#notifierst"); 
             }else
             { 
                $("<option value='"+data[i].id+"'>"+data[i].name+"</option>").appendTo("#notifierst"); 
             }
             
          }  

          $("#notifierst").chosen({
             no_results_text:"没有搜索到此人"
          }); 
                    
      }  

    })
    }

    // 已有规则展示

    $scope.ruleShow=function(metadataName)
    {
       var normtype=metadataName.split('_')[0];
       switch (normtype){ 
            case 'cpu' : $scope.normcpu=true; break; 
            case 'mem' : $scope.normmem=true; break;
            case 'apprunningstate' : $scope.normapp=true; break;
            case 'instancerunningstate' : $scope.normins=true; break; 
            case 'logscan' : $scope.normlog=true; break; 
            case 'accesstimes' :$scope.normvis=true; break; 
            case 'hostrunningstate' :$scope.normnode=true; break;
            case 'componentwarn' :$scope.normcomponentwarn=true; break;
            
       }
    }

    
    // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formRule[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };

    // 展示资源

    $scope.getResources=function(type){
        var modernresources=$http({
          method:'get',
          url:'/cloudui/ws/monitor/category/'+$scope.id+'/resources/'+type+'/user/'+$rootScope.user.id+'?v='+(new Date().getTime())
        }).success(function(data){
            angular.forEach(data,function(val,key){
               var resourcearr=$filter('filter')($scope.curResource,val.resourceId);
               if(resourcearr.length>0)
               {
                 val.ticked=true; 
               }else
               {
                 val.ticked=false;
               }
               
            })
            $scope.modernresources=data;
        })
        return modernresources;
      }

   //  信息展示

   $http({
     method:'get',
     url:'/cloudui/ws/monitor/category/'+$stateParams.tacticid
  }).success(function(data){
      $scope.id=data.id;
      $scope.resourcetype=data.type;  // 类型 
      $scope.name=data.name; // 名称
      $scope.curResource=data.resource;// 资源
      $scope.getResources(data.type);
      // 资源类型
      if(data.type==1)
      {
    	  $scope.type='应用'; 
      }else if(data.type==0){
    	  $scope.type='主机'; 
      }else{
    	  $scope.type='平台组件';  
      }
      $scope.mtime=data.mtime; // 监控周期
      $scope.getperson(data.person);// 通知人
      $scope.curperson=data.person;
      
      
      // 已有规则
      angular.forEach(data.rule,function(val,key){
        $scope.ruleShow(val.metadataName);
        var ruledata=val.metadataName.split('_')[0];
        var conditiondata=val.metadataName.split('_')[1];
          
         if(ruledata=='accesstimes')
         {
        	  
            var objval=angular.fromJson(val.value);
            var thour=parseInt(objval.time/3600);
            var tmin=parseInt((objval.time-thour*3600)/60);
            var tsec=objval.time-thour*3600-tmin*60;
             
            $scope.rulelist[ruledata]={
               condition:conditiondata,
               value:objval.value,
               thour:thour,
               tmin:tmin,
               tsec:tsec,
               period:val.period
             }
            
         }else
         {
            $scope.rulelist[ruledata]={
               condition:conditiondata,
               value:val.value,
               period:val.period
             }
         }
         
      })
 
  })


  $scope.delRule=function(param){
      if(!$scope[param])
      {
         switch (param){ 
           case "normcpu" : 
           delete $scope.rulelist['cpu']; 
           break; 
           case "normmem" : 
           delete $scope.rulelist['mem']; 
           break; 
           case "normapp" : 
           delete $scope.rulelist['apprunningstate']; 
           break;
           case "normins" : 
           delete $scope.rulelist['instancerunningstate']; 
           break;
           case "normlog" : 
           delete $scope.rulelist['logscan']; 
           break;
           case "normvis" : 
           delete $scope.rulelist['accesstimes']; 
           break;
           case "normcomponentwarn" : 
           delete $scope.rulelist['componentwarn']; 
           break;
      }
  }
}

  // 提交更新信息
  $scope.submitRuleForm = function() {
      $scope.submitted = true;

      // 选择的资源
      if($scope.modernresources)
      {
         $scope.resourceids='';
         $scope.resourcelist=$filter('filter')($scope.modernresources,'true');

         angular.forEach($scope.resourcelist, function(val,key){
           if(key+1==$scope.resourcelist.length)
           {
              $scope.resourceids+=val.resourceId+'-'+val.resourceName;
           }else
           {
              $scope.resourceids+=val.resourceId+'-'+val.resourceName+',';
           }
           
         })
      }

        // 通知人
        $scope.personids='';
        if(!$scope.notifier)
        {
          angular.forEach($scope.curperson,function(val,key){
            if(key+1==$scope.curperson.length)
            {
              $scope.personids+=val.id; 
            }else
            {
              $scope.personids+=val.id+',';
            }
          })
        }else
        {
          $scope.personids=$scope.notifier.join(",")
        }


      // 创建的规则
          $scope.ruleData=[];

           

          $scope.delRule('normcpu');
          $scope.delRule('normmem');
          $scope.delRule('normapp');
          $scope.delRule('normins');
          $scope.delRule('normlog');
          $scope.delRule('normvis');
          $scope.delRule('normnode');
          $scope.delRule('normcomponentwarn'); 

          angular.forEach($scope.rulelist,function(val,key){
             
            //if(val.period)
           // {
              if(key=='apprunningstate'||key=='instancerunningstate'||key=='hostrunningstate'||key=='componentwarn')
                   {
                     var ruleObj=angular.toJson({
                              metadataId:$scope.getRuleId(val.condition,key),
                              value:'stop',
                              period:val.period
                         })
                   }else if(key=='accesstimes'){
                	   var ruleObj=angular.toJson({
                           metadataId:$scope.getRuleId(val.condition,key),
                           value:{
                             value:val.value,
                             time:val.thour*3600+val.tmin*60+val.tsec
                           },
                           period:val.period
                      })
                   }else
                   {
                     var ruleObj=angular.toJson({
                              metadataId:$scope.getRuleId(val.condition,key),
                              value:val.value,
                              period:val.period
                     }) 
                   }
              $scope.ruleData.push(ruleObj) 
            //}

          })
      
          $scope.ruleDataS="["+$scope.ruleData+"]";

         if(!$scope.resourceids)
        {
         Notify.alert(
               '请选择资源！' ,
               {status: 'info'}
             );
      }else if($scope.ruleData.length<=0)
      {
        Notify.alert(
               '请添加规则！' ,
               {status: 'info'}
             );
      }else
      {
        if ($scope.formRule.$valid) {

            $http({
                method:'PUT',
                url:'/cloudui/ws/monitor/category',
                data: $.param({
                  id:$scope.id,
                  resourceids:$scope.resourceids,
                  personids:$scope.personids,
                  name:$scope.name,
                  type:$scope.resourcetype,
                  mtime:$scope.mtime,
                  userId:$rootScope.user.id,
                  rules:$scope.ruleDataS
                }),
                headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
            }).success(function(data){
               if(data)
               {
                 Notify.alert(
                    '<em class="fa fa-check"></em> 更新策略成功！' ,
                    {status: 'success'}
                 );
                 $state.go('app.warning.tactics',{},{reload:true});
               }else
               {
                 Notify.alert(
                     '<em class="fa fa-times"></em> 更新策略失败！' ,
                      {status: 'danger'}
                 );
               }
            })
        }
      }

       
  } 
   
}])

/* 更新自定义策略 */
mControllers.controller('updateUserDefinedTactic',['$rootScope','$scope','$http','$stateParams','$filter','Notify','$state',function($rootScope,$scope,$http,$stateParams,$filter,Notify,$state){
	// 条件
    $scope.conditions = [
        {value: 'max', text: '大于'},
        {value: 'min', text: '小于'},
        {value: 'equal', text: '等于'},
        {value: 'avg', text: '平均值'}
    ];
    
    // 规则存储
    $scope.rulelist=[];
 
    // 通知人 
    $scope.getperson=function(selectedArr)
    {
     $http.get('/cloudui/ws/monitor/persons/'+$rootScope.user.id+'?v=' + (new Date().getTime())).success(function(data){
       if(data != null && data.length > 0){  

          for(var i = 0; i< data.length; i++){  

             var dataSelected=$filter('filter')(selectedArr,data[i].name,true);
        

             if(dataSelected&&dataSelected.length>0)
             {
                $("<option value='"+data[i].id+"' selected>"+data[i].name+"</option>").appendTo("#notifierst"); 
             }else
             { 
                $("<option value='"+data[i].id+"'>"+data[i].name+"</option>").appendTo("#notifierst"); 
             }
             
          }  

          $("#notifierst").chosen({
             no_results_text:"没有搜索到此人"
          }); 
                    
      }  

    })
    }
    
    // 展示资源

    $scope.getResources=function(type){
        var modernresources=$http({
          method:'get',
          url:'/cloudui/ws/monitor/category/'+$scope.id+'/resources/'+type+'/user/'+$rootScope.user.id+'?v='+(new Date().getTime())
        }).success(function(data){
            angular.forEach(data,function(val,key){
               var resourcearr=$filter('filter')($scope.curResource,val.resourceId);
               if(resourcearr.length>0)
               {
                 val.ticked=true; 
               }else
               {
                 val.ticked=false;
               }
               
            })
            $scope.modernresources=data;
        })
        return modernresources;
      }
    
    // 添加规则
    $scope.addRuleFn=function()
    {
      $scope.inserted = {
        name:'',
        value:'',
        condition:'max',
        period:''
      }
     
      $scope.rulelist.push($scope.inserted);
    }
    
    $scope.removeRuleFn=function(index){
        $scope.rulelist.splice(index, 1);
    }
    
    // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formRule[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };
    
    //  信息展示
    $http({
      method:'get',
      url:'/cloudui/ws/monitor/category/'+$stateParams.tacticid
    }).success(function(data){
    	 $scope.id=data.id;
         $scope.resourcetype=data.type;  // 类型 
         $scope.name=data.name; // 名称
         $scope.curResource=data.resource;// 资源
         $scope.getResources(data.type);
         // 资源类型
         if(data.type==1)
         {
           $scope.type='应用'; 
         }else if(data.type==0){
           $scope.type='主机'; 
         }else if(data.type==3){
           $scope.type='平台组件';  
         }else{
           $scope.type='自定义';
         }
         $scope.mtime=data.mtime; // 监控周期
         $scope.getperson(data.person);// 通知人
         $scope.curperson=data.person;  
         
         angular.forEach(data.rule,function(val,key){
        	var obj={};
        	obj.name=angular.fromJson(val.value).name;
        	obj.condition=angular.fromJson(val.value).condition;
        	obj.value=angular.fromJson(val.value).value;
        	obj.period=val.period;
        	$scope.rulelist.push(obj);
         })
    })
    
    // 提交更新信息
    $scope.submitRuleForm = function() {
    	$scope.submitted = true;
    	// 选择的资源
        if($scope.modernresources)
        {
           $scope.resourceids='';
           $scope.resourcelist=$filter('filter')($scope.modernresources,'true');

           angular.forEach($scope.resourcelist, function(val,key){
             if(key+1==$scope.resourcelist.length)
             {
                $scope.resourceids+=val.resourceId+'-'+val.resourceName;
             }else
             {
                $scope.resourceids+=val.resourceId+'-'+val.resourceName+',';
             }
             
           })
        }
    	// 通知人
        $scope.personids='';
        if(!$scope.notifier)
        {
          angular.forEach($scope.curperson,function(val,key){
            if(key+1==$scope.curperson.length)
            {
              $scope.personids+=val.id; 
            }else
            {
              $scope.personids+=val.id+',';
            }
          })
        }else
        {
          $scope.personids=$scope.notifier.join(",")
        }
        // 创建的规则
        $scope.ruleData=[];
        angular.forEach($scope.rulelist,function(val,key){
           var ruleObj=angular.toJson({
                metadataId:16,
                value:{
                  name:val.name,
                  condition:val.condition,
                  value:val.value
                },
                period:val.period
               })
               $scope.ruleData.push(ruleObj) 
        })
        $scope.ruleDataS="["+$scope.ruleData+"]";
        
        
        if(!$scope.resourceids)
        {
         Notify.alert(
               '请选择资源！' ,
               {status: 'info'}
             );
       }else if(!$scope.personids){
    	   Notify.alert(
             '请选择通知人！' ,
            {status: 'info'}
           ); 
       }else if($scope.rulelist.length<=0)
       {
             Notify.alert(
                 '请添加规则！' ,
                 {status: 'info'}
             );
        }else{
        	if ($scope.formRule.$valid) {
        		$http({
                    method:'PUT',
                    url:'/cloudui/ws/monitor/category',
                    data: $.param({
                      id:$scope.id,
                      resourceids:$scope.resourceids,
                      personids:$scope.personids,
                      name:$scope.name,
                      type:$scope.resourcetype,
                      mtime:$scope.mtime,
                      userId:$rootScope.user.id,
                      rules:$scope.ruleDataS
                    }),
                    headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
                }).success(function(data){
                   if(data)
                   {
                     Notify.alert(
                        '<em class="fa fa-check"></em> 更新策略成功！' ,
                        {status: 'success'}
                     );
                     $state.go('app.warning.tactics',{},{reload:true});
                   }else
                   {
                     Notify.alert(
                         '<em class="fa fa-times"></em> 更新策略失败！' ,
                          {status: 'danger'}
                     );
                   }
                })
        	}
        }
        
    }

}])

/* 创建通知人 */
mControllers.controller('createNotifier',['$rootScope','$scope','$http','$state','ngDialog','Notify',function($rootScope,$scope,$http,$state,ngDialog,Notify){
   $scope.formNotifierData={};
   $scope.formNotifierData.userId=$rootScope.user.id;
   
   $scope.authMsg = '';
   
   $scope.createNotiflerFn=function()
   {
	   $scope.authMsg = '';
	   if($scope.formNotifier.$valid) {
	 
		 // 验证名字  
		 $http.get('/cloudui/ws/monitor/person/exsits/'+$scope.formNotifierData.name+'?v='+(new Date().getTime())).
		 success(function(data){
			 if(data==0)
			 {
				// 新增通知人       
	              $http({
	            	  method  : 'POST',
	                  url     : '/cloudui/ws/monitor/person',
	                  data    : $.param($scope.formNotifierData),   
	                  headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
			       })
	              .then(function(response) {
	                // 通过返回数据，没通过返回错误信息
	                if ( !response.data.result ) {
	                  $scope.authMsg = '创建失败，请重新添加！';
	                }else{
	                	Notify.alert(
	                       '<em class="fa fa-check"></em> 创建成功！' ,
	                        {status: 'success'}
	                    );
	                    ngDialog.close();
	                    $state.go('app.warning.notifier',{},{reload:true});
	                }
	              }, function(x) {
	                $scope.authMsg = '服务器请求错误';
	              });
			 }else if(data==1){
	              $scope.authMsg = '此通知人已存在，请重新命名！';
	         }
		 })
	   }
   }
}])

// 更新通知人
mControllers.controller('updateNotifier',['$scope','$http','ngDialog','$state','$stateParams','Notify',function($scope,$http,ngDialog,$state,$stateParams,Notify){
   
  var person=$scope.ngDialogData.person;
  var isin=$scope.ngDialogData.isin;

  $scope.type=person.type;
  $scope.value=person.value;
  
  
   // 验证表单
  $scope.submitted = false;
  $scope.validateInput = function(name, type) {
      var input = $scope.formRule[name];
      return (input.$dirty || $scope.submitted) && input.$error[type];
  };
  // 更新通知人信息
  $scope.updateNotiflerFn = function() {
    $scope.submitted = true;   
 
    if ($scope.formRule.$valid) {
    	
    	$http.get('/cloudui/ws/monitor/person/'+person.id+'/getRunningCategoryByPersonId'+'?v='+(new Date().getTime()))
        .success(function(datatac){
        	
        	 var isrunningdata=[];
             
             for(var i=0;i<datatac.length;i++)
             {
               if(datatac[i].isrunning==1)
               {
                 isrunningdata.push(data[i]); 
               }
             }
             
        	if(isrunningdata.length>0)
            {
        		var tacticarr=[];
                
                angular.forEach(isrunningdata,function(val,key){
                  tacticarr.push(val.name)
                })
                
                var tacticstr=tacticarr.join(',');
                
                Notify.alert(
                     '正在运行的策略'+tacticstr+'关联此通知人，无法更新，请先停止这些策略再更新！' ,
                     {status: 'info'}
                  );
            }else{
                $http({
                    method:'PUT',
                    url:'/cloudui/ws/monitor/person',
                    data: $.param(
                     {
                       id:person.id,
                       name:person.name, 
                       type:$scope.type,
                       value:$scope.value
                     }
                    ),   
                    headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
                 }).success(function(data){
                    if(data.result)
                    {
                      Notify.alert(
                         '<em class="fa fa-check"></em> 更新成功！' ,
                         {status: 'success'}
                      );
                      ngDialog.close();
                      if(isin)
                      {
                         $state.go('app.tactic.notifier',{tacticid:$stateParams.tacticid},{reload:true});
                      }else
                      {
                          $state.go('app.warning.notifier',{},{reload:true});
                      } 
                      
                    }else
                    {
                      Notify.alert(
                         '<em class="fa fa-times"></em> 更新失败！' ,
                          {status: 'danger'}
                       );
                    }
                 })
            }
        })

 
    }
  }

}])

// 策略详情
mControllers.controller('tacticController',['$scope','$http','$stateParams','$state','ngDialog','Notify',function($scope,$http,$stateParams,$state,ngDialog,Notify){
	
	$http({
       method:'get', 
       url:'/cloudui/ws/monitor/category/'+$stateParams.tacticid+'?v='+(new Date().getTime())
    }).success(function(data){
       $scope.tacticdetail=data;
	})
	
	 $scope.typetext=function(type){
		   switch(type)
		   {
		      case 1:
			  return '组件';
			  break;
		      case 0:
		      return '主机';
		      break;
		      case 3:
		      return '平台组件';
		      case 4:
			  return '自定义';
		   }
	 }
	
	// 指标文本

    $scope.normtext=function(params,item)
    {
       switch(params)
       {
         case 'cpu':
         var text='CPU使用率';
         break;
         case 'mem':
         var text='内存使用率';
         break;
         case 'apprunningstate':
         var text='组件运行异常';
         break;
         case 'instancerunningstate':
         var text='实例运行异常';
         break;
         case 'hostrunningstate':
         var text='主机运行异常';
         break;
         case 'logscan':
         var text='组件日志扫描';
         break;
         case 'accesstimes':
         var text='访问次数';
         break;
         case 'componentwarn':
         var text='平台组件异常';
         break;
         case 'customresource':
         var text=angular.fromJson(item.value).name;
         break;
       }
       return text;
    }

    // 条件文本

    $scope.conditiontext=function(params,item)
    {

       if(params=='customresource')
       {
    	   var condition=angular.fromJson(item.value).condition; 
       }else{
    	   var condition=params.split('_')[1]||'无';  
       }

       switch(condition)
       {
         case 'min':
         var text='小于';
         break;
         case 'max':
         var text='大于';
         break;
         case 'equal':
         var text='等于';
         break;
         case 'avg':
         var text='平均值';
         break;
         case '无':
         var text='无';
         break;
       }
       return text;
    }

    // 阈值文本

    $scope.valtext=function(param1,param2)
    {
   
      var rulename=param1.split('_')[0]; 
  
      if(param2=='stop')
      {
        return '无';
      }else if(rulename=='accesstimes'||rulename=='customresource')
      {
        return angular.fromJson(param2).value;
      }else
      {
        return param2;
      }
    }

    // 时间文本

    $scope.timetext=function(param1,param2)
    {
    
      var rulename=param1.split('_')[0];
  
      if(rulename=='accesstimes')
      {
    	  
    	  var time=angular.fromJson(param2).time;
    	  var thour=parseInt(time/3600);
          var tmin=parseInt((time-thour*3600)/60);
          var tsec=time-thour*3600-tmin*60;
          return thour+'时'+tmin+'分'+tsec+'秒';
      }else
      {
        return '无';
      }
    }
	
	// 删除规则
	$scope.ruleDel=function(params){
		if($scope.tacticdetail.isrunning==1)
		{
			Notify.alert(
	          '<em class="fa fa-check"></em> 告警策略正在使用，不能删除，请先停止告警策略！' ,
	          {status: 'info'}
	        );
		}else{
			ngDialog.openConfirm({
		         template:
		              '<p class="modal-header">您确定要删除此规则吗?</p>' +
		              '<div class="modal-body text-right">' +
		                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
		                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
		              '</button></div>',
		        plain: true,
		        className: 'ngdialog-theme-default'
		      })
		      .then(
		        function(){
		           $http({
		              method:'DELETE', 
		              url:'/cloudui/ws/monitor/rule/'+params
		           }).success(function(data){
		               if(data.result)
		               {
		                 Notify.alert(
		                    '<em class="fa fa-check"></em> 删除成功！' ,
		                    {status: 'success'}
		                 );
		                 $state.go('app.tactic.rule',{tacticid:$stateParams.tacticid},{reload:true});
		               }else
		               {
		                 Notify.alert(
		                    '<em class="fa fa-times"></em> 删除失败！' ,
		                    {status: 'danger'}
		                 );
		               }
		           })
		        }
		      )
		}
	      
	  }
	
	// 删除通知人
	   $scope.ruleNotifier=function(params){
		   if($scope.tacticdetail.isrunning==1)
			{
				Notify.alert(
		          '<em class="fa fa-check"></em> 告警策略正在使用，不能删除，请先停止告警策略！' ,
		          {status: 'info'}
		        );
			}else{
				ngDialog.openConfirm({
			         template:
			              '<p class="modal-header">您确定要删除此通知人吗?</p>' +
			              '<div class="modal-body text-right">' +
			                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
			                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
			              '</button></div>',
			        plain: true,
			        className: 'ngdialog-theme-default'
			      })
			      .then(
			        function(){
			           $http({
			              method:'DELETE', 
			              url:'/cloudui/ws/monitor/person/'+params
			           }).success(function(data){
			               if(data.result)
			               {
			                 Notify.alert(
			                   '<em class="fa fa-check"></em> 删除成功！' ,
			                    {status: 'success'}
			                 );
			                 $state.go('app.tactic.notifier',{tacticid:$stateParams.tacticid},{reload:true});
			               }else
			               {
			                 Notify.alert(
			                    '<em class="fa fa-times"></em> 删除失败！' ,
			                    {status: 'danger'}
			                 );
			               }
			           })
			        }
			      )
			}
	      
	  }
	   
	// 更新规则弹出框

	   $scope.openUpdateRule = function (params1,params2) {
		   if($scope.tacticdetail.isrunning==1)
			{
				Notify.alert(
		          '<em class="fa fa-check"></em> 告警策略正在使用，不能更新，请先停止告警策略！' ,
		          {status: 'info'}
		        );
			}else{
				ngDialog.open({
			      template: 'app/views/dialog_updateRule.html'+'?action='+(new Date().getTime()),
			      className: 'ngdialog-theme-default ngdialog-sm',
			      scope: $scope,
			      cache: false,
			      data:{rule:params1,type:params2},
			      controller:'updateRule'
			    });
			}
	    
	   };
	   
	// 添加规则弹出框

	   $scope.openaddRule = function (params1,params2) {
		  
		if($scope.tacticdetail.isrunning==1)
		{
			Notify.alert(
	          '<em class="fa fa-check"></em> 告警策略正在使用，不能添加，请先停止告警策略！' ,
	          {status: 'info'}
	        );
		}else
		{
			if(params1==4)
			{
				ngDialog.open({
				      template: 'app/views/dialog_addUserDefinedRule.html'+'?action='+(new Date().getTime()),
				      className: 'ngdialog-theme-default ngdialog-sm',
				      scope: $scope,
				      cache: false,
				      data:{type:params1,rulelist:params2},
				      controller:'addUserDefinedRuleController'
			     });	
			}else{
				ngDialog.open({
				      template: 'app/views/dialog_addRule.html'+'?action='+(new Date().getTime()),
				      className: 'ngdialog-theme-default ngdialog-sm',
				      scope: $scope,
				      cache: false,
				      data:{type:params1,rulelist:params2},
				      controller:'addRuleController'
			     });	
			}
			
		}
	    
	   };
	   
	// 更新通知人弹出框

	   $scope.openUpdateNotifier = function (params,params2) {
		   if($scope.tacticdetail.isrunning==1)
			{
				Notify.alert(
		          '<em class="fa fa-check"></em> 告警策略正在使用，不能更新，请先停止告警策略！' ,
		          {status: 'info'}
		        );
			}else{
				ngDialog.open({
			      template: 'app/views/dialog_updateNotifier.html'+'?action='+(new Date().getTime()),
			      className: 'ngdialog-theme-default ngdialog-sm',
			      scope: $scope,
			      cache: false,
			      data:{person:params,isin:params2},
			      controller:'updateNotifier'
			    });
			}
	    
	   };


	   // 修改通知人弹出框

	   $scope.openChangeNotifier = function (params1,params2) {
		    if($scope.tacticdetail.isrunning==1)
			{
				Notify.alert(
		          '<em class="fa fa-check"></em> 告警策略正在使用，不能修改，请先停止告警策略！' ,
		          {status: 'info'}
		        );
			}else{
				 ngDialog.open({
				      template: 'app/views/dialog_changeNotifier.html'+'?action='+(new Date().getTime()),
				      className: 'ngdialog-theme-default ngdialog-sm',
				      scope: $scope,
				      cache: false,
				      data:{id:params1,person:params2},
				      controller:'changeNotifier'
				 });
			}
	   };
	   
	// 修改资源弹出框

	   $scope.openChangeResource = function (params1,params2,params3) {
		   if($scope.tacticdetail.isrunning==1)
			{
				Notify.alert(
		          '<em class="fa fa-check"></em> 告警策略正在使用，不能修改，请先停止告警策略！' ,
		          {status: 'info'}
		        );
			}else{
				ngDialog.open({
			      template: 'app/views/dialog_changeResource.html'+'?action='+(new Date().getTime()),
			      className: 'ngdialog-theme-default ngdialog-sm',
			      scope: $scope,
			      cache: false,
			      data:{id:params1,type:params2,resource:params3},
			      controller:'changeResource'
			    });
			} 
	   };

	   
}])

// 更新规则
mControllers.controller('updateRule',['$scope','$http','$state','$stateParams','ngDialog','Notify',function($scope,$http,$state,$stateParams,ngDialog,Notify){
  
  // 元数据id
  $scope.getRuleId=function(datanorm,datacondition){
    var type=Number($scope.ngDialogData.type);
    var itemcondition=datanorm+'_'+datacondition;
    var itemnocondition=datanorm;
    var metadataId=null;
    if(type==1)
    {
      switch (itemcondition){ 
        case 'cpu_min' : metadataId=2; break; 
        case 'cpu_max' : metadataId=1; break;
        case 'mem_min' : metadataId=6; break;
        case 'mem_max' : metadataId=5; break; 
        case 'accesstimes_min' : metadataId=13; break; 
        case 'accesstimes_max' : metadataId=14; break; 
      } 

      switch (itemnocondition){
        case 'apprunningstate' : metadataId=9; break; 
        case 'instancerunningstate' : metadataId=10; break; 
        case 'logscan' : metadataId=12; break; 
      }
    }else if(type==0)
    {
      switch (itemcondition){ 
          case 'cpu_min' : metadataId=4; break; 
          case 'cpu_max' : metadataId=3; break;
          case 'mem_min' : metadataId=8; break;
          case 'mem_max' : metadataId=7; break; 
      }

      switch (itemnocondition){
        case 'hostrunningstate' : metadataId=11; break;
      }
    }else if(type==3){
      switch (itemnocondition){
        case 'componentwarn' : metadataId=15; break;
      }
    }else if(type==4){
      switch (itemnocondition){
        case 'customresource' : metadataId=16; break;
      }
    }
    return metadataId;
  }
  
  $scope.model ={};

  var ruledata=$scope.ngDialogData.rule;

  $scope.rulename=ruledata.metadataName.split('_')[0]


  if($scope.rulename=='accesstimes')
  {
    $scope.conditions = [
       {value: 'max', text: '大于'}
    ];
    
    $scope.model={
      value:angular.fromJson(ruledata.value).value,
      rulecondition:ruledata.metadataName.split('_')[1]
    }
    
    var time=angular.fromJson(ruledata.value).time;
    
    $scope.model.thour=parseInt(time/3600);
    $scope.model.tmin=parseInt((time-$scope.model.thour*3600)/60);
    $scope.model.tsec=time-$scope.model.thour*3600-$scope.model.tmin*60;
    
    $scope.rulevisoff=true;
    
  }else if($scope.rulename=='customresource'){
	  $scope.conditions = [
        {value: 'max', text: '大于'},
	    {value: 'min', text: '小于'},
	    {value: 'equal', text: '等于'},
	    {value: 'avg', text: '平均值'} 
      ];
	  
	  $scope.model={
        value:angular.fromJson(ruledata.value).value,
        rulecondition:angular.fromJson(ruledata.value).condition
      } 
  }else
  {
	 $scope.conditions = [
        {value: 'max', text: '大于'},
        {value: 'min', text: '小于'}
     ];
	 
     $scope.model = {  
         value:ruledata.value,
         rulecondition:ruledata.metadataName.split('_')[1]
    } 
  }

  $scope.model.ruleperiod=ruledata.period;

  if($scope.model.rulecondition)
  {
    $scope.ruleconditionoff=true;
  }
  if($scope.model.value&&$scope.model.value!=='stop')
  {
    $scope.rulevalueoff=true; 
  }

  // 验证表单
  $scope.submitted = false;
  $scope.validateInput = function(name, type) {
      var input = $scope.formRule[name];
      return (input.$dirty || $scope.submitted) && input.$error[type];
  };
  // 更新规则信息
  $scope.updateRuleFn = function() {
    $scope.submitted = true; 

    $scope.metadataId=$scope.getRuleId($scope.rulename,$scope.model.rulecondition);

    if($scope.rulename=='accesstimes')
    {
       var ruleData=angular.toJson({
                value:$scope.model.value,
                time:$scope.model.thour*3600+$scope.model.tmin*60+$scope.model.tsec
       })
    }else if($scope.rulename=='customresource'){
       var ruleData=angular.toJson({
    	    name:angular.fromJson(ruledata.value).name,
            value:$scope.model.value,
            condition:$scope.model.rulecondition
       })
    }else
    {
      var ruleData=$scope.model.value
    }
    
    if ($scope.formRule.$valid) {
       
        $http({
           method:'PUT',
           url:'/cloudui/ws/monitor/rule',
           data: $.param({
             id:ruledata.id,
             metadataId:$scope.metadataId,
             value:ruleData,
             period:$scope.model.ruleperiod
          }),   
           headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
        }).success(function(data){
           if(data.result)
           {
             Notify.alert(
               '<em class="fa fa-check"></em> 更新成功！' ,
               {status: 'success'}
             );
             ngDialog.close();
             $state.go('app.tactic.rule',{tacticid:$stateParams.tacticid},{reload:true})
           }else
           {
             Notify.alert(
                  '<em class="fa fa-times"></em> 更新失败！' ,
                  {status: 'danger'}
                );
           }
        })
    }
  }

}])

// 添加规则

mControllers.controller('addRuleController',['$scope','$http','$state','ngDialog','$stateParams','Notify','$filter',function($scope,$http,$state,ngDialog,$stateParams,Notify,$filter){
 
   // 默认规则
  $scope.addnorm='cpu';
  $scope.addcondition='min';

  var type=$scope.ngDialogData.type;
  var rulelist=$scope.ngDialogData.rulelist;
  var ruleids='';
  
  if(rulelist)
  {
	  angular.forEach(rulelist,function(val,key){
		  ruleids+=val.id+','
	  })
  }else
  {
	  var ruleids='';
  }
  
  
  // 指标
  if(type==1)
  {
    $scope.norms = [
      {value: 'cpu', text: 'CPU使用率'},
      {value: 'mem', text: '内存使用率'},
      {value: 'apprunningstate', text: '应用运行异常'},
      {value: 'instancerunningstate', text: '实例运行异常'},
      {value: 'logscan', text: '应用日志扫描'},
      {value: 'accesstimes', text: '访问次数'}
    ];
  }else if(type==0)
  {
    $scope.norms = [
      {value: 'cpu', text: 'CPU使用率'},
      {value: 'mem', text: '内存使用率'},
      {value: 'hostrunningstate', text: '主机运行异常'}
    ];
  } 
  
  // 条件
  $scope.conditions = [
      {value: 'max', text: '大于'},
      {value: 'min', text: '小于'}
  ];
   $scope.conditions2 = [
      {value: 'max', text: '大于'}
  ];


 $scope.model={};
    
 

  // 指标改变 

  $scope.normChange=function(params){
 
     switch(params)
     {
       case "apprunningstate":
          return false;
       break;
       case "instancerunningstate":
          return false;
       break;
       case "hostrunningstate":
          return false;
       break;
       case "logscan":
          return false;
       break;
       default :
          return true;
       break; 
     }
  }

  // 元数据id

  $scope.getRuleId=function(norm,condition){

    var itemcondition=norm+'_'+condition;
    var itemnocondition=norm;

    var metadataId=null;
    if(type==1)
    {
      switch (itemcondition){ 
        case 'cpu_min' : metadataId=2; break; 
        case 'cpu_max' : metadataId=1; break;
        case 'mem_min' : metadataId=6; break;
        case 'mem_max' : metadataId=5; break; 
        case 'accesstimes_min' : metadataId=13; break; 
        case 'accesstimes_max' : metadataId=14; break; 
      } 

      switch (itemnocondition){
        case 'apprunningstate' : metadataId=9; break; 
        case 'instancerunningstate' : metadataId=10; break; 
        case 'logscan' : metadataId=12; break; 
      }
    }else if(type==0)
    {
      switch (itemcondition){ 
          case 'cpu_min' : metadataId=4; break; 
          case 'cpu_max' : metadataId=3; break;
          case 'mem_min' : metadataId=8; break;
          case 'mem_max' : metadataId=7; break; 
      }

      switch (itemnocondition){
        case 'hostrunningstate' : metadataId=11; break;
      }
    }
    return metadataId;
  }

  // 验证表单
  $scope.submitted = false;
  $scope.validateInput = function(name, type) {
      var input = $scope.formRule[name];
      return (input.$dirty || $scope.submitted) && input.$error[type];
  };

  // 规则是否存在

  $scope.ruleExitFn=function(arr,val){
     switch (val){
      case 'apprunningstate' : var exitrule=$scope.addnorm; break; 
      case 'instancerunningstate' : var exitrule=$scope.addnorm; break; 
      case 'hostrunningstate' : var exitrule=$scope.addnorm; break; 
      case 'hostrunningstate' : var exitrule=$scope.addnorm; break; 
      case 'logscan' : var exitrule=$scope.addnorm; break; 
      default: var exitrule=$scope.addnorm+'_'+$scope.addcondition;
    } 
    return $filter('filter')(arr,exitrule,true).length>0?true:false;
  }

  // 提交规则信息
  $scope.addRuleForm = function() {
    $scope.submitted = true;

    switch ($scope.addnorm.split(',')[0]){
	    case 'apprunningstate' : $scope.formRule.$valid=true;  break; 
	    case 'instancerunningstate' : $scope.formRule.$valid=true;  break; 
	    case 'hostrunningstate' : $scope.formRule.$valid=true;  break; 
	    default:$scope.formRule.$valid; 
    } 
  
    
    if ($scope.formRule.$valid) {

      if($scope.ruleExitFn(rulelist,$scope.addnorm.split(',')[0]))
      {
         Notify.alert(
              '此项指标规则已存在，请重新添加！' ,
               {status: 'info'}
          );
         return false;
      }else{
          var metadataId=$scope.getRuleId($scope.addnorm,$scope.addcondition);
          var paramsval='';
          switch ($scope.addnorm.split(',')[0]){
            case 'apprunningstate' : paramsval='stop'; break; 
            case 'instancerunningstate' : paramsval='stop'; break; 
            case 'hostrunningstate' : paramsval='stop'; break; 
            case 'accesstimes' : paramsval=angular.toJson({
                    value:$scope.addvalue,
                    time:$scope.model.thour*3600+$scope.model.tmin*60+$scope.model.tsec
           }); break; 
            default:paramsval=$scope.addvalue;
          } 

          $http({
           method: 'POST', 
           url: '/cloudui/ws/monitor/category/rule',
           data:$.param({
              id:$stateParams.tacticid,
              metadataId:metadataId,
              value:paramsval,
              period:$scope.model.addperiod
           }),
           headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
            }).success(function(data){
            if(data.result)
            {
              Notify.alert(
                        '<em class="fa fa-check"></em> 添加成功！' ,
                         {status: 'success'}
                    );
              ngDialog.close();
              $state.go('app.tactic.rule',{tacticid:$stateParams.tacticid},{reload:true});
            }
          })
      }    
    }
  }
 
}])

/* 添加自定义规则 */
mControllers.controller('addUserDefinedRuleController',['$scope','$http','$filter','Notify','$stateParams','ngDialog','$state',function($scope,$http,$filter,Notify,$stateParams,ngDialog,$state){
	var type=$scope.ngDialogData.type;
	var rulelist=$scope.ngDialogData.rulelist;
	$scope.conditions = [
     {value: 'max', text: '大于'},
     {value: 'min', text: '小于'},
     {value: 'equal', text: '等于'},
     {value: 'avg', text: '平均值'}
    ];
	
	$scope.condition=$scope.conditions[0].value;
	
	// 规则是否存在

	$scope.ruleExitFn=function(arr,val){
	   
	    angular.forEach(arr,function(val2,key2){
	    	val2.value=angular.fromJson(val2.value)
	    })

	    return $filter('filter')(arr,val,true).length>0?true:false;
    }
	
   // 验证表单
   $scope.submitted = false;
   $scope.validateInput = function(name, type) {
      var input = $scope.formRule[name];
      return (input.$dirty || $scope.submitted) && input.$error[type];
   };
   
   // 提交规则信息
   $scope.addRuleForm = function() {
	   $scope.submitted = true;
	   if ($scope.formRule.$valid) {
		   if($scope.ruleExitFn(rulelist,$scope.name))
	       {
	         Notify.alert(
              '此项指标规则已存在，请重新添加！' ,
               {status: 'info'}
	          );
	         return false;
	       }else{
	    	   $http({
	               method: 'POST', 
	               url: '/cloudui/ws/monitor/category/rule',
	               data:$.param({
	                  id:$stateParams.tacticid,
	                  metadataId:16,
	                  value:angular.toJson({
	                      value:$scope.value,
	                      name:$scope.name,
	                      condition:$scope.condition
	                  }),
	                  period:$scope.period
	           }),
	               headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
	                }).success(function(data){
	                if(data.result)
	                {
	                  Notify.alert(
                        '<em class="fa fa-check"></em> 添加成功！' ,
                         {status: 'success'}
	                  );
	                  ngDialog.close();
	                  $state.go('app.tactic.rule',{tacticid:$stateParams.tacticid},{reload:true});
	                }
	              })  
		   }
	   }
   }
   
}])
// 更新通知人
mControllers.controller('updateNotifier',['$scope','$http','ngDialog','$state','$stateParams','Notify',function($scope,$http,ngDialog,$state,$stateParams,Notify){
   
  var person=$scope.ngDialogData.person;
  var isin=$scope.ngDialogData.isin;

  $scope.type=person.type;
  $scope.value=person.value;
  
  
   // 验证表单
  $scope.submitted = false;
  $scope.validateInput = function(name, type) {
      var input = $scope.formRule[name];
      return (input.$dirty || $scope.submitted) && input.$error[type];
  };
  // 更新通知人信息
  $scope.updateNotiflerFn = function() {
    $scope.submitted = true;   
 
    if ($scope.formRule.$valid) {
      $http({
         method:'PUT',
         url:'/cloudui/ws/monitor/person',
         data: $.param(
          {
            id:person.id,
            name:person.name, 
            type:$scope.type,
            value:$scope.value
          }
         ),   
         headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
      }).success(function(data){
         if(data.result)
         {
           Notify.alert(
               '<em class="fa fa-check"></em> 更新成功！' ,
               {status: 'success'}
           );
           ngDialog.close();
           if(isin)
    	   {
        	  $state.go('app.tactic.notifier',{tacticid:$stateParams.tacticid},{reload:true});
    	   }else
		   {
    		   $state.go('app.warning.notifier',{},{reload:true});
		   } 
           
         }else
         {
          Notify.alert(
              '<em class="fa fa-times"></em> 更新失败！' ,
              {status: 'danger'}
           );
         }
      })
 
    }
  }

}])

// 修改通知人  

mControllers.controller('changeNotifier',['$rootScope','$scope','$http','ngDialog','$filter','$state','Notify',function($rootScope,$scope,$http,ngDialog,$filter,$state,Notify){
  
	// 通知人列表
	 $scope.getperson=function(selectedArr)
	  {
	   $http.get('/cloudui/ws/monitor/persons/'+$rootScope.user.id+'?v=' + (new Date().getTime())).success(function(data){
	     if(data != null && data.length > 0){  

	        for(var i = 0; i< data.length; i++){  
	        	  
	           var dataSelected=$filter('filter')(selectedArr,data[i].name,true);
	            

	           if(dataSelected&&dataSelected.length>0)
	           {
	              $("<option value='"+data[i].id+"' selected>"+data[i].name+"</option>").appendTo("#notifierst"); 
	           }else
	           { 
	              $("<option value='"+data[i].id+"'>"+data[i].name+"</option>").appendTo("#notifierst"); 
	           }
	           
	        }  

	        $("#notifierst").chosen({
	           no_results_text:"没有搜索到此人"
	        }); 
	                  
	    }  

	  })
	  }
   
	 $scope.getperson($scope.ngDialogData.person);// 通知人
	 
	 $scope.changeNotiflerFn=function(){
		 $scope.notifierS='';
		 if($scope.notifier)
		 {
			 $scope.notifierS=$scope.notifier.join(",")
		 }else
		 {
			 angular.forEach($scope.ngDialogData.person,function(val,key){
 				if(key+1==$scope.ngDialogData.person.length)
 				{
 					$scope.notifierS+=val.id;	
 				}else
 				{
 					$scope.notifierS+=val.id+',';
 				}
 			})
		 }
		
		 $http({
			 method:'PUT',
			 url:'/cloudui/ws/monitor/category/person',
			 data:$.param({
				 id:$scope.ngDialogData.id,
				 personids:$scope.notifierS
			 }),
			 headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
		 }).success(function(data){
			 if(data.result)
			 {
				 Notify.alert(
	                '<em class="fa fa-check"></em> 修改成功！' ,
	                 {status: 'success'}
	             );
				 ngDialog.close();
				 $state.go('app.tactic.notifier',{tacticid:$scope.ngDialogData.id},{reload:true})
			 }else
			 {
				 Notify.alert(
			        '<em class="fa fa-times"></em> 修改失败！' ,
			         {status: 'danger'}
			     );
			 }
		 })
		 
	 }
  
}])

// 修改资源

mControllers.controller('changeResource',['$rootScope','$scope','$http','ngDialog','$filter','$state','Notify',function($rootScope,$scope,$http,ngDialog,$filter,$state,Notify){
    
	// 资源列表
	 $scope.getResource=function(selectedArr)
	  {
	   $http.get('/cloudui/ws/monitor/category/'+$scope.ngDialogData.id+'/resources/'+$scope.ngDialogData.type+'/user/'+$rootScope.user.id+'?v=' + (new Date().getTime())).success(function(data){
	     if(data != null && data.length > 0){  

	        for(var i = 0; i< data.length; i++){  
	        	  
	           var dataSelected=$filter('filter')(selectedArr,data[i].resourceId,true);
	             

	           if(dataSelected&&dataSelected.length>0)
	           {
	              $("<option value='"+data[i].resourceId+"-"+data[i].resourceName+"' selected>"+data[i].resourceName+"</option>").appendTo("#resource"); 
	           }else
	           { 
	              $("<option value='"+data[i].resourceId+"-"+data[i].resourceName+"'>"+data[i].resourceName+"</option>").appendTo("#resource"); 
	           }
	           
	        }  

	        $("#resource").chosen({
	           no_results_text:"没有搜索到此人"
	        }); 
	                  
	    }  

	  })
	  }
   
	 $scope.getResource($scope.ngDialogData.resource);// 资源
	 
	 $scope.changeResourceFn=function(){
		 $scope.resourceS='';

		 if($scope.resource)
		 {
			 $scope.resourceS=$scope.resource.join(",")
		 }else
		 {
			 angular.forEach($scope.ngDialogData.resource,function(val,key){
 				if(key+1==$scope.ngDialogData.resource.length)
 				{
 					$scope.resourceS+=val.resourceId+'-'+val.resourceName;	
 				}else
 				{
 					$scope.resourceS+=val.resourceId+'-'+val.resourceName+',';
 				}
 			})
		 }
		
		 $http({
			 method:'PUT',
			 url:'/cloudui/ws/monitor/category/resource',
			 data:$.param({
				 id:$scope.ngDialogData.id,
				 resourceids:$scope.resourceS
			 }),
			 headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
		 }).success(function(data){
			 if(data.result)
			 {
				 Notify.alert(
	                      '<em class="fa fa-check"></em> 修改成功！' ,
	                      {status: 'success'}
	             );
				 ngDialog.close();
				 $state.go('app.tactic.source',{tacticid:$scope.ngDialogData.id},{reload:true})
			 }else
			 {
				 Notify.alert(
	                      '<em class="fa fa-times"></em> 修改失败！' ,
	                      {status: 'danger'}
	              );
			 }
		 })
		 
	 }
  
}])
/* log */

mControllers.controller('logController',['$scope','$http',function($scope,$http){
      var logJson = 'server/log.json',
          menuURL  = logJson + '?v=' + (new Date().getTime()); 

      $http.get(menuURL)
        .success(function(items) {
           $scope.log = items;
           
        })
}])

/* use */

mControllers.controller('useController',['$scope','$http',function($scope,$http){
      var useJson = 'server/use.json',
          menuURL  = useJson + '?v=' + (new Date().getTime()); 

      $http.get(menuURL)
        .success(function(items) {
           $scope.use = items;
           
        })
}])

/* 配置列表 */

mControllers.controller('configController',['$scope','$http','Notify','$state','ngDialog',function($scope,$http,Notify,$state,ngDialog){
	$scope.pageSize=10;
    $scope.onPageChange = function ()
    {
      $http.get('/cloudui/ws/apps/configs/getAppsByPage'+'?v=' + (new Date().getTime()),{
      params:
          {
            pageNum:$scope.pageNum,
            pageSize:10,
            keyword:$scope.searchval
          }
     }).success(function(data){
        $scope.configlist = data;
        $scope.pageCount=Math.ceil($scope.configlist.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
     })
    }  
    
   // 搜素配置
    $scope.searchConfig=function()
    {
         $scope.pageNum=1;
         $scope.onPageChange();
    }
    
    $scope.opendelConfig=function(params){
        ngDialog.openConfirm({
           template:
                '<p class="modal-header">您确定要删除此配置吗?</p>' +
                '<div class="modal-body text-right">' +
                  '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                  '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
                '</button></div>',
          plain: true,
          className: 'ngdialog-theme-default'
        })
        .then(
          function(){
        	  $http.get('/cloudui/ws/apps/configs/clearForApp'+'?v='+(new Date().getTime()),{
          		params:{
          			versionId:params
          		}
          	  }).success(function(data){
          	   if(data.result)
          	   {
          		   Notify.alert(
                         '删除成功!' ,
                         {status: 'success'}
                      );
          		   $state.go('app.config',{},{reload:true});
          	   }else
          	   {
          		   Notify.alert(
                         '删除失败!' ,
                         {status: 'danger'}
                      ); 
          	   }
          	 }) 
          }
        )
    }
    
   
}])

/* 新建配置 */
mControllers.controller('addConfig',['$scope','$http','$state','Notify',function($scope,$http,$state,Notify){
	
	$scope.configparams=[{
		key: '',
        value: '',
        description:''
	}];
	
	// 添加配置
    $scope.addConfig = function() {
      $scope.inserted = {
        key: '',
        value: '',
        description:''
      };
      $scope.configparams.push($scope.inserted);
    };

    // 删除配置
    $scope.delConfig=function(idx){
      $scope.configparams.splice(idx,1);
    }
	
	// 应用列表
    var applist=$http.get('/cloudui/ws/apps/configs/getApps'+'?v='+(new Date().getTime())).
    success(function(data){
    	$scope.applist=data;
    })
    applist.then(function(respon){
    	$scope.configapp=respon.data[0].id;
    	
    	// 应用下版本列表
    	
    	$scope.getVer=function()
    	{
    		$http.get('/cloudui/ws/apps/configs/getVersions',{params:{
        		appId:$scope.configapp
        	}}).success(function(data){
        		$scope.appversionlist=data;
        	
        		$scope.configversion=$scope.appversionlist[0].versionId;
        	})
    	}
    	
    	$scope.getVer();
    	
    })
    
    $scope.submitconfigForm=function(){
    	
    	$http.post('/cloudui/ws/apps/configs/create',{
    		appId:$scope.configapp,
			versionId:$scope.configversion,
			description:$scope.description,
			configs:$scope.configparams
    	})
    	.success(function(data){
    		if(data.result)
    		{
    		  Notify.alert(
                '<em class="fa fa-check"></em> 创建成功！' ,
                {status: 'success'}
              );
    		  $state.go('app.config',{},{reload:true});
    		}else
    		{
    			Notify.alert(
    	           '<em class="fa fa-times"></em> '+data.msg ,
    	            {status: 'danger'}
    	        );
    		}
    	}) 
    	 
    }
}])

/* 配置详情 */
mControllers.controller('configDetail',['$scope','$http','$stateParams','$state','ngDialog','Notify',function($scope,$http,$stateParams,$state,ngDialog,Notify){
	// 更新添加
	$scope.saveConfig = function(data, id) {

	    $http.post('/cloudui/ws/apps/configs/updateLine',{
	    	versionId:$stateParams.configid,
	    	id:id,
	    	key:data.key,
	    	value:data.value,
	    	description:data.description
	    }).success(function(data){
	    	if(data.result)
	    	{
	    		Notify.alert(
	                 '<em class="fa fa-check"></em> 保存成功！' ,
	                 {status: 'success'}
	            );
	    	}else
	    	{
	    		Notify.alert(
		           '<em class="fa fa-times"></em> '+data.msg ,
		            {status: 'danger'}
		        );
	    		$state.go('app.configdetail',{configid:$stateParams.configid},{reload:true});
	    	}
	    })
	  };

	  // 删除
	  $scope.removeConfig = function(id) {
		  $http.post('/cloudui/ws/apps/configs/deleteLine',{
			  id:id,
			  versionId:$stateParams.configid
		  }).success(function(data){
			 if(data.result)
			 {
				Notify.alert(
                  '<em class="fa fa-check"></em> 删除成功！' ,
                  {status: 'success'}
	            );
				$state.go('app.configdetail',{configid:$stateParams.configid},{reload:true});
			 }else
			 {
				 Notify.alert(
                  '<em class="fa fa-times"></em> '+data.msg ,
                  {status: 'danger'}
	             );
			 }
		  })
	  };

	  // 添加一行
	  $scope.addConfig = function() {
	    $scope.inserted = {
	      key: '',
	      value: '',
	      description: '',
	    };
	    $scope.configlists.push($scope.inserted);
	  };
	  
	  // 下发
	  $scope.send=function()
	  {
		  $http.get('/cloudui/ws/apps/configs/send'+'?v='+(new Date().getTime()),{
			 params:{
			    versionId:$stateParams.configid
			 } 
		  }).success(function(data){
			  if(data.result)
			  {
				  Notify.alert(
	                 '<em class="fa fa-check"></em> 下发成功！' ,
	                 {status: 'success'}
	               );
			  }else
			  {
				 Notify.alert(
	                  '<em class="fa fa-times"></em> '+data.msg ,
	                  {status: 'danger'}
	             );
			  }
		  })
		  
	  }
	  
	  // 导入
	  
	  $scope.openinject = function () {
		    ngDialog.open({
		      template: 'app/views/dialog_inject.html'+'?action='+(new Date().getTime()),
		      className: 'ngdialog-theme-default ngdialog-lg',
		      scope: $scope,
		      cache: false,
		      controller:'inject'
		    });
	 };
	 
	 // 导出
	 $scope.outForm=function()
	 {
		 $('#outform').submit(); 	 
	 }
	 
	 $scope.$on('ngDialog.closed', function () {
		 $state.go('app.configdetail',{configid:$stateParams.configid},{reload:true});
	 });
	  
	$http.get('/cloudui/ws/apps/configs/getConfigList'+'?v='+(new Date().getTime()),{params:{
		versionId:$stateParams.configid
	}}).
	success(function(data){
		$scope.config=data;
		$scope.configlists=data.rows;
		$scope.out_filename=$scope.config.appName+'_'+$stateParams.configid+'.properties';
		$scope.$watch('configlists',function(newdata,olddata){
			$scope.datarr=[]
			angular.forEach(newdata,function(val,key){
				 
				 var dataobj=angular.toJson({
					 key:val.key,
					 value:val.value,
					 description:val.description
	              })
	              
	        	  
	        	  $scope.datarr.push(dataobj)
			 })
			
			 $scope.dataS='{"rows":['+$scope.datarr+']}';
			 $scope.out_data= $scope.dataS ;
		
		 },true)
	})
}])

/* 导入 */
mControllers.controller('inject',['$scope','$http','$stateParams','Notify','ngDialog',function($scope,$http,$stateParams,Notify,ngDialog){
	
	$scope.injectFn=function()
	{
	   if($scope.content.indexOf('<reason>')==-1)
	   {
		   $http.post('/cloudui/ws/apps/configs/inject',{
				versionId:$stateParams.configid,
				content:$scope.content
			}).success(function(data){
				if(data.result)
				{
					Notify.alert(
                      '<em class="fa fa-check"></em> 更新'+data.updatenum+'条，插入'+data.insertnum+'条' ,
                      {status: 'success'}
		            );
					$scope.content='';
					ngDialog.close();
				}else
				{
					Notify.alert(
	                  '<em class="fa fa-times"></em> 更新'+data.updatenum+'条，插入'+data.insertnum+'条,错误'+data.errornum+'条,请在解决错误后移除reason标签',
	                  {status: 'danger'}
		            );
					$scope.content='';
					angular.forEach(data.error,function(val,key){
						if(val.reason=='format_error')
						{
							$scope.content+=val.line+'<reason>'+'格式错误'+'</reason>'+'\n';	
						}else
						{
							$scope.content+=val.line+'<reason>'+val.reason+'</reason>'+'\n';
						}
						
					})
				}
			}) 
	   }else
	   {
		   Notify.alert(
                   '问题未解决，请在解决错误后移除reason标签' ,
                   {status: 'info'}
           );
	   }
	   
	}
}])

/*  持续集成   */
mControllers.controller('tasklistCon',['$rootScope','$scope','$http','ngDialog','$state','Notify',function($rootScope,$scope,$http,ngDialog,$state,Notify){
	
	// 任务列表
	$scope.pageSize=10;
 
    $scope.onPageChange = function ()
    {   
	   $http.get('/cloudui/ws/jenkins/jobsGet'+'?v=' + (new Date().getTime()),{
          params:
              { 
        	   pageno:$scope.pageNum,
        	   pagesize:$scope.pageSize
              }
         }).success(function(data){
            $scope.tasklist = data;
            
            $scope.pageCount=Math.ceil($scope.tasklist.total/$scope.pageSize);
            if($scope.pageCount==0){
            	$scope.pageCount=1;
            }
         })
    }
    
    // 任务详情弹出框
    $scope.taskDetail = function (params) {
    	console.log(params);
	    ngDialog.open({
	      template: 'app/views/dialog_task.html'+'?action='+(new Date().getTime()),
	      className: 'ngdialog-theme-default ngdialog-lg',
	      scope: $scope,
	      cache: false,
	      data:{jobname:params},
	      controller:'task'
	    });
	};
	
	// 删除任务
	$scope.opendelTask=function(params){
     ngDialog.openConfirm({
         template:
              '<p class="modal-header">您确定要删除此任务吗?</p>' +
              '<div class="modal-body text-right">' +
                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
              '</button></div>',
        plain: true,
        className: 'ngdialog-theme-default'
      })
      .then(
        function(){
            $http({
              method:'post',
              url:'/cloudui/ws/jenkins/jobDelete',
              data: $.param({jobname:params}),   
	          headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
            }).success(function(data){
            	if(data.message=='success')
            	{
            		Notify.alert(
	                    '<em class="fa fa-check"></em> 删除成功！' ,
	                    {status: 'success'}
                    );
            		$state.go('app.integration',{},{reload:true})
            	}else
            	{
            		Notify.alert(
                        '<em class="fa fa-times"></em> '+data.message ,
                        {status: 'danger'}
                    );
            	}
            })
        }
      )
  }
	
  // 触发build
  $scope.touchbuild=function(params){
	 $rootScope.app.layout.isShadow=true;
	 $http({
		 method:'post',
		 url:'/cloudui/ws/jenkins/build',
		 data: $.param({jobname:params}),   
         headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
	 }).success(function(data){
		 $rootScope.app.layout.isShadow=false;
		 if(data.message=='success')
		 {
			 Notify.alert(
                     '<em class="fa fa-check"></em> 触发成功！' ,
                     {status: 'success'}
             );

		 }else
		 {
			 Notify.alert(
                     '<em class="fa fa-times"></em> '+data.message ,
                     {status: 'danger'}
             );
		 }
	 }) 
  }
	
}]) 

/* 创建任务 */
mControllers.controller('createtask',['$scope','$http','$state','Notify',function($scope,$http,$state,Notify){
	// 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formValidate[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };
    // 提交任务信息
    $scope.submitForm = function() {  
       $scope.submitted = true;
       if ($scope.formValidate.$valid) {
        	$http({
        		method:'post',
        		url:'/cloudui/ws/jenkins/jobCreate',
	        	data: $.param({
	        		jobname:$scope.jobname,
	        		reptype:$scope.reptype,
	        		repurl:$scope.repurl,
	        		commands:$scope.commands,
	        		params:$scope.params,
	        		username:$scope.username,
	        		password:$scope.password
	            }),
                headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
        	}).success(function(data){
        		if(data.message=='success')
        		{
        			Notify.alert(
                        '<em class="fa fa-check"></em> 创建成功！' ,
                        {status: 'success'}
                    );
        			$state.go('app.integration',{},{reload:true})
        		}else
        		{
        			Notify.alert(
                        '<em class="fa fa-times"></em> '+data.message ,
                        {status: 'danger'}
                    );
        		}
        	})
       }
    }          
}])

/* build */
mControllers.controller('build',['$scope','$http','$stateParams','ngDialog',function($scope,$http,$stateParams,ngDialog){
	$scope.pageSize=10;
	 
    $scope.onPageChange = function ()
    {   
	   $http.get('/cloudui/ws/jenkins/buildsGet'+'?v=' + (new Date().getTime()),{
          params:
              { 
        	   pageno:$scope.pageNum,
        	   pagesize:$scope.pageSize,
        	   jobname:$stateParams.jobname
              }
         }).success(function(data){
            $scope.buildlist = data;
            
            $scope.pageCount=Math.ceil($scope.buildlist.total/$scope.pageSize);
            if($scope.pageCount==0){
            	$scope.pageCount=1;
            }
         })
    }
    
    $scope.openbuildLog=function(params){
    	ngDialog.open({
            template: 'app/views/dialog_buildlog.html'+'?action='+(new Date().getTime()),
            className: 'ngdialog-theme-default ngdialog-lg',
            scope: $scope,
            cache: false,
            data:{jobname:$stateParams.jobname,buildId:params},
            controller:'buildLog'
        });
    }
}])

/* 任务详情 */
mControllers.controller('task',['$scope','$http',function($scope,$http){
  $http.get('/cloudui/ws/jenkins/configGet'+'?v='+(new Date().getTime()),{
	  params:{
		  jobname:$scope.ngDialogData.jobname
	  }
  }).
  success(function(data){
	  $scope.task=data;
  })
}])

/* build日志 */
mControllers.controller('buildLog',['$scope','$http',function($scope,$http){
  
	$http.get('/cloudui/ws/jenkins/buildLog'+'?v='+(new Date().getTime()),{
	  params:{
		  jobname:$scope.ngDialogData.jobname,
		  buildId:$scope.ngDialogData.buildId
	  }
  }).
  success(function(data){
	  $('.logcont').html(data);
  })
}])

/* edit */

mControllers.controller('FormxEditableController', ['$scope', 'editableOptions', 'editableThemes',
  function($scope, editableOptions, editableThemes) {

    editableOptions.theme = 'bs3';
    
    editableThemes.bs3.inputClass = 'input-sm';
    editableThemes.bs3.buttonsClass = 'btn-sm';
    editableThemes.bs3.submitTpl = '<button type="submit" class="btn btn-success" ng-click="save();editlabel($data);"><span class="fa fa-check"></span></button>';
    editableThemes.bs3.cancelTpl = '<button type="button" class="btn btn-default" ng-click="$form.$cancel()">'+
                                     '<span class="fa fa-times text-muted"></span>'+
                                   '</button>';    
}]);

/* IAAS接入列表 */
mControllers.controller('iaas',['$scope','$http','Notify','ngDialog','$state','$filter',function($scope,$http,Notify,ngDialog,$state,$filter){
	$scope.checkappId=[]; // 选中的IAAS
    $scope.pageSize=10;
    $scope.onPageChange = function ()
    {   
      $http.get('/cloudui/ws/iaas'+'?v=' + (new Date().getTime()),{
      params:
          {
            pageNum:$scope.pageNum,
            pageSize:$scope.pageSize
          }
     }).success(function(data){
        angular.forEach(data.rows,function(val,key){
             var ischecked=$filter('filter')($scope.checkappId,val.id).length>0?true:false;
             data.rows[key].ischecked=ischecked;
        })
        $scope.iaaslist = data;
        $scope.pageCount=Math.ceil($scope.iaaslist.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
     })
    }


    // 删除IAAS
    $scope.delIaasFn=function(params,index){
        ngDialog.openConfirm({
           template:
               '<p class="modal-header">您确定要删除吗?</p>' +
               '<div class="modal-body text-right">' +
                 '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                 '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
               '</button></div>',
           plain: true,
           className: 'ngdialog-theme-default'
       })
       .then(
       function(){
            var ids='';
            if(angular.isObject(params))
            {
            	ids=params.join(',');
                $scope.delIaasHttp(ids);
            }else
            {
                ids=params;
                $scope.delIaasHttp(ids,index);
            }
             
              
          }
       )
    }
    
    $scope.delIaasHttp=function(ids,index){
    	$http({
            method:'DELETE',
            url:'/cloudui/ws/iaas',
            data: $.param({iaas_ids:ids}),   
            headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
         }).success(function(data){
             if(data.result)
             {
               Notify.alert(
                 '<em class="fa fa-check"></em> 删除成功！' ,
                 {status: 'success'}
               );
               
               if(index)
               {
                  $scope.iaaslist.rows.splice(index, 1);
               }else{
            	  $state.go('app.iaas',{},{reload:true});
               }
               
             }else
             {
               Notify.alert(
                 '<em class="fa fa-check"></em> 删除失败！' ,
                 {status: 'danger'}
               );
             }
         })
    }

    $scope.openDelIaasFn=function(params,index){
       if(params)
       {
          $scope.delIaasFn(params,index);
       }else
       {
    	   var checkbox = $scope.checkappId;
          if(checkbox.length==0)
          {
             Notify.alert(
                '请选择您要删除的项!' ,
                {status: 'info'}
             );
          }else
          {
             $scope.delIaasFn(checkbox);
          }
       }
   } 

    
}])

/* IAAS接入 */
mControllers.controller('createIaas',['$scope','$http','$state','Notify',function($scope,$http,$state,Notify){
    // 添加变量
    $scope.add=function(list){
      var obj={};
     $scope[list].push(obj);   
    }
    // 删除变量
    $scope.del=function(list,idx){
        $scope[list].splice(idx,1);
    }
   // 接入类型  
   $http.get('/cloudui/ws/iaas/type'+'?v='+(new Date().getTime())).
   success(function(data){
      $scope.type=data[0];
      $scope.typelist=data;
   })
   // 验证表单
   $scope.submitted = false;
   $scope.validateInput = function(name, type) {
       var input = $scope.formiaasValidate[name];
       return (input.$dirty || $scope.submitted) && input.$error[type];
   };

   $scope.properties=[];

   // 提交应用信息
   $scope.submitForm = function() {
      $scope.submitted = true;
      if ($scope.formiaasValidate.$valid) {
          // 自定义参数传值
          $scope.propertiesdata='';
          angular.forEach($scope.properties,function(val,key){
              if(key+1==$scope.properties.length)
              {
                $scope.propertiesdata+=val.key+'='+val.val;
              }else{
                $scope.propertiesdata+=val.key+'='+val.val+',';
              } 
          })
           
          $http({
              method  : 'POST',
              url     : '/cloudui/ws/iaas', 
              data    : $.param({
            	name:$scope.name,
                url:$scope.url,
                username:$scope.username,
                userpwd:$scope.userpwd,
                type:$scope.type,
                template_id:$scope.template_id,
                cpu:$scope.cpu,
                memory:$scope.memory,
                disk:$scope.disk,
                min:$scope.min,
                max:$scope.max,
                properties:$scope.propertiesdata
              }),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
          })
          .then(function(response) {
             if(response.data.result)
             {
                Notify.alert(
                  '<em class="fa fa-check"></em> 接入成功!' ,
                   {status: 'success'}
                );
                $state.go('app.iaas',{},{reload:true});
             }else
             {
               Notify.alert(
                  '<em class="fa fa-check"></em> 接入失败!' ,
                  {status: 'success'}
               );
             }
          })
      }
   }
}])

/* IAAS更新 */
mControllers.controller('updateIaas',['$scope','$http','$stateParams','Notify','$state',function($scope,$http,$stateParams,Notify,$state){
	// 信息展示
	$http.get('/cloudui/ws/iaas/'+$stateParams.id+'?v='+(new Date().getTime())).
	success(function(data){
		$scope.name=data.name;
		$scope.template_id=data.template_id;
		$scope.cpu=data.cpu;
		$scope.memory=data.memory;
		$scope.disk=data.disk;
		$scope.min=data.min;
		$scope.max=data.max;
		$scope.properties=data.properties;	
	})
	
	// 删除变量
    $scope.del=function(list,idx){
        $scope[list].splice(idx,1);
    }
	
	// 添加变量
    $scope.add=function(list){
      var obj={};
     $scope[list].push(obj);   
    }
    
   // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formiaasValidate[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };
    // 更新信息
    $scope.submitForm = function() {
        $scope.submitted = true;
        if ($scope.formiaasValidate.$valid) {

        	$scope.propertiesdata="";
        	angular.forEach($scope.properties,function(val,key){
                if(key+1==$scope.properties.length)
                {
                  $scope.propertiesdata+=val.key+'='+val.value;
                }else{
                  $scope.propertiesdata+=val.key+'='+val.value+',';
                } 
            })
           
        	$http({
                method  : 'PUT',
                url     : '/cloudui/ws/iaas/'+$stateParams.id, 
                data    : $.param({
                  name:$scope.name,
                  template_id:$scope.template_id,
                  cpu:$scope.cpu,
                  memory:$scope.memory,
                  disk:$scope.disk,
                  min:$scope.min,
                  max:$scope.max,
                  properties:$scope.propertiesdata
                }),   
                headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
            })
            .then(function(response) {
            	if(response.data.result)
            	{
            		Notify.alert(
    	               '<em class="fa fa-check"></em> 更新成功！' ,
    	               {status: 'success'}
    	            );
            		$state.go('app.iaasinfo',{id:$stateParams.id},{reload:true});
            	}else
            	{
            		Notify.alert(
    	               '<em class="fa fa-times"></em> 更新失败！' ,
    	               {status: 'danger'}
    	            );
            	}
            })
          
        }
    }   
}])

/* IAAS详情 */
mControllers.controller('iaasinfo',['$scope','$http','$stateParams','Notify','ngDialog','$filter',function($scope,$http,$stateParams,Notify,ngDialog,$filter){
  
   $http.get('/cloudui/ws/iaas/'+$stateParams.id+'?v='+(new Date().getTime())).
   success(function(data){
       $scope.iaasinfo=data;
   })
   
   $scope.checkappId=[]; // 选中的虚机
   
   // 虚拟机列表  
    $scope.pageSize=10;
    $scope.onPageChangeVm = function ()
    {    
      $http.get('/cloudui/ws/iaas/'+$stateParams.id+'/vm'+'?v=' + (new Date().getTime()),{
      params:
          {
            pageNum:$scope.pageNum,
            pageSize:$scope.pageSize
          }
     }).success(function(data){
    	 
    	angular.forEach(data.rows,function(val,key){
             var ischecked=$filter('filter')($scope.checkappId,val.id).length>0?true:false;
             data.rows[key].ischecked=ischecked;
        })
        
        $scope.vmlist = data;
        $scope.pageCount=Math.ceil($scope.vmlist.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
     })
    }
   // 加入集群
   $scope.joinClusterFn=function(){
	  var checkbox = $scope.checkappId;
      if(checkbox.length==0)
      {
         Notify.alert(
            '请选择要加入集群的虚拟机!' ,
            {status: 'info'}
         );
      }else
      {
         var vm_ids='';
         vm_ids=checkbox.join(',');
         ngDialog.open({
            template: 'app/views/dialog_vmjoincluster.html'+'?action='+(new Date().getTime()),
            className: 'ngdialog-theme-default',
            scope: $scope,
            cache:false,
            data:{vm_ids:vm_ids},
            controller:'vmJoinCluster'
         }); 
      }
   }
}])

/* 虚机加入集群 */
mControllers.controller('vmJoinCluster',['$scope','$http','$stateParams','Notify','$state',function($scope,$http,$stateParams,Notify,$state){
   // 集群列表 
   $http.get('/cloudui/ws/iaas/'+$stateParams.id+'/cluster'+'?v='+(new Date().getTime())).
   success(function(data){
      $scope.joinclusters=data;
      $scope.chosecluster=data[0].id;
   })
 
   // 加入集群
   $scope.joinClusterFn=function(){
      $http({
              method  : 'PUT',
              url     : '/cloudui/ws/iaas/'+$stateParams.id+'/vm', 
              data    : $.param({
                 vm_ids:$scope.ngDialogData.vm_ids,
                 cluster_id:$scope.chosecluster
              }),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
      }).success(function(data){
         if(data.result)
         {
            Notify.alert(
              '加入集群成功!' ,
              {status: 'success'}
            );
            $state.go('app.iaasinfo',{id:$stateParams.id},{reload:true})
         }else
         {
           Notify.alert(
              '加入集群失败!' ,
              {status: 'danger'}
           );
         }
      })
   }
}])

/* 任务管理 */

mControllers.controller('joblistController',['$scope','$http','Notify','$filter','ngDialog',function($scope,$http,Notify,$filter,ngDialog){
   
   $scope.checkappId=[]; // 选中的任务

   // 获取任务列表 
   $scope.pageSize=10;

   $scope.onPageChange = function ()
    {    
      $http.get('/cloudui/ws/apps/jobs/listJobs'+'?v=' + (new Date().getTime()),{
      params:
          {
            pageNum:$scope.pageNum,
            pageSize:$scope.pageSize,
            name:$scope.searchval
          }
     }).success(function(data){
      
       angular.forEach(data.rows,function(val,key){
         var ischecked=$filter('filter')($scope.checkappId,val.UUID).length>0?true:false;
         data.rows[key].ischecked=ischecked;
       })

       $scope.tasklist = data;
       $scope.pageCount=Math.ceil($scope.tasklist.total/$scope.pageSize);
       if($scope.pageCount==0){
    	   $scope.pageCount=1;
       }
     })
    }

    // 搜素任务
    $scope.searchTask=function()
    {
         $scope.pageNum=1;
         $scope.onPageChange();
    }

    // 删除任务 
    $scope.delTask=function(index,taskid)
    {
      ngDialog.openConfirm({
            template:
                 '<p class="modal-header">您确定要删除此任务吗?</p>' +
                 '<div class="modal-body text-right">' +
                   '<button type="button" class="btn btn-default mr20"  ng-click="closeThisDialog(0)">取消' +
                   '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
                 '</button></div>',
           plain: true,
           className: 'ngdialog-theme-default'
         }).then(function(){
        	 $http.delete('/cloudui/ws/apps/jobs/deleteJob'+'?v='+(new Date().getTime()),{
		 		   params:{
		 			  uuid:taskid
		 		   }
		 	 }).success(function(data){
                 if(data.result)
                 {
                   Notify.alert(
                     '<em class="fa fa-check"></em> '+data.message ,
                     {status: 'success'}
                   );
                   $scope.tasklist.rows.splice(index, 1);
                 }else
                 {
                   Notify.alert(
                     '<em class="fa fa-times"></em> '+data.message ,
                     {status: 'danger'}
                   );
                 }
              }) 
   
         })
    }  

    // 执行任务
    $scope.actionTask=function(params){
    	if(params.type=='host')
        {
    		ngDialog.open({
    	        template: 'app/views/dialog_hostname.html'+'?action='+(new Date().getTime()),
    	        className: 'ngdialog-theme-default',
    	        scope: $scope,
    	        cache:false,
    	        data:{job:params},
    	        controller:'hostNameAction'
    	    });
    		
        }else if(params.type=='docker'){
        	
        }else 
        {
        	ngDialog.open({
    	        template: 'app/views/dialog_choseapp.html'+'?action='+(new Date().getTime()),
    	        className: 'ngdialog-theme-default',
    	        scope: $scope,
    	        cache:false,
    	        data:{job:params},
    	        controller:'containerAction'
    	    });
        	
        }
    }

}])

/* 执行任务host */
mControllers.controller('hostNameAction',['$scope','$http','Notify','ngDialog','$state',function($scope,$http,Notify,ngDialog,$state){
    $scope.type='host';
    // 应用列表
	$scope.apppageSize=5;
    $scope.radioApp={};
	$scope.onappPageChange = function (pageNum)
	{ 
		$http.get('/cloudui/ws/apps/listOperationApps'+'?v=' + (new Date().getTime()),{
    	    params:
    	        {
    	          pageNum:pageNum,
    	          pageSize:$scope.apppageSize,
    	          appName:$scope.searchappval||''
    	        }
         }).success(function(data){
        	 $scope.applist=data;
        	 $scope.apppageCount=Math.ceil($scope.applist.total/$scope.apppageSize);
             if($scope.apppageCount==0){
                 $scope.apppageCount=1;
             }
         })
	}
	
	//搜素应用
	$scope.searchApp=function(e)
	{
	  var keycode = window.event?e.keyCode:e.which;
	  if(keycode==13)
	  {
		  $scope.onappPageChange(1); 
	  }
	  if($scope.searchappval.length==0)
      {
		$scope.apppageNum=1;
   	    $scope.onappPageChange(1); 
      }
	}
	// 主机
	$scope.host = {};
	$scope.authMsg = '';
	
    $scope.actionHostFn= function() {
    	if($scope.type=='host')
        {
    		   if($scope.hostNameForm.$valid) {
        		$http.get('/cloudui/ws/apps/executeHostJob',{params:{
        			jobUUID:$scope.ngDialogData.job.uuid,
        			hostname:$scope.host.name
        		}}).success(function(data){
        		    if(data.result)
        			{
        		    	Notify.alert(
    	                   data.message,
    	                 {status: 'success'}
    	                );
        		    	ngDialog.close();
        		    	$state.go('app.module.running',{},{reload:true});
        			}else{
        				Notify.alert(
        				 data.message,
    	                 {status: 'danger'}
    	                );
        			}
        		})
        	}
        }else{
        	$http.get('/cloudui/ws/apps/executeHostJob'+'?v='+(new Date().getTime()),{
    			params:{
    				jobUUID:$scope.ngDialogData.job.uuid,
    				appId:$scope.radioApp.val
    			}
    		}).success(function(data){
    			if(data.result)
    			{
    		    	Notify.alert(
                       data.message,
                     {status: 'success'}
                    );
    		    	ngDialog.close();
    		    	$state.go('app.module.running',{},{reload:true});
    			}else{
    				Notify.alert(
    				 data.message,
                     {status: 'danger'}
                    );
    			}
    		})
        }
	}
}])

/* 执行任务container */
mControllers.controller('containerAction',['$scope','$http','Notify','ngDialog','$state',function($scope,$http,Notify,ngDialog,$state){
    $scope.apppageSize=5;
    $scope.radioApp={};
	$scope.onappPageChange = function (pageNum)
	{ 
		$http.get('/cloudui/ws/apps/listOperationApps'+'?v=' + (new Date().getTime()),{
    	    params:
    	        {
    	          pageNum:pageNum,
    	          pageSize:$scope.apppageSize,
    	          appName:$scope.searchappval||''
    	        }
         }).success(function(data){
        	 $scope.applist=data;
        	 $scope.apppageCount=Math.ceil($scope.applist.total/$scope.apppageSize);
             if($scope.apppageCount==0){
                 $scope.apppageCount=1;
             }
         })
	}
	
	//搜素应用
	$scope.searchApp=function(e)
	{
	  var keycode = window.event?e.keyCode:e.which;
	  if(keycode==13)
	  {
		  $scope.onappPageChange(1); 
	  }
	  if($scope.searchappval.length==0)
      {
		$scope.apppageNum=1;
   	    $scope.onappPageChange(1); 
      }
	}

	
	$scope.containerstormActionFn=function(){
		if($scope.ngDialogData.job.type=='container')
		{
			var url='/cloudui/ws/apps/executeContainerJob';
		}else if($scope.ngDialogData.job.type=='storm'){
			var url='/cloudui/ws/apps/executeStormJob';
		}
		$http.get(url+'?v='+(new Date().getTime()),{
			params:{
				jobUUID:$scope.ngDialogData.job.uuid,
				appId:$scope.radioApp.val
			}
		}).success(function(data){
			if(data.result)
			{
		    	Notify.alert(
                   data.message,
                 {status: 'success'}
                );
		    	ngDialog.close();
		    	$state.go('app.module.running',{},{reload:true});
			}else{
				Notify.alert(
				 data.message,
                 {status: 'danger'}
                );
			}
		})
	}
}])

/* 创建任务 */
mControllers.controller('createjobController',['$rootScope','$scope','$http','$filter','$modal','$state','$stateParams','Notify',function($rootScope,$scope,$http,$filter,$modal,$state,$stateParams,Notify){
    var scope = $rootScope.$new(); 
    scope.radio = {};
    $scope.image;
    $scope.imageversion;

    $scope.volumes=[];  // 挂载路径集
    
    // 网络模式
	$scope.netModelList=[
	   {value:'none',text:'默认模式'},
	   {value:'host',text:'主机模式'}
	]
	
	 // 任务类型
	$scope.typeList=[
	   {value:'docker',text:'docker'},
	   {value:'host',text:'host'},
	   {value:'container',text:'container'}
	]
	$scope.type=$scope.typeList[0].value;
	
	$scope.$watch('type',function(newval,oldval){
		if(newval=='docker')
		{
			$scope.volumeoff=true;
		}else{
			$scope.volumeoff=false;
		}
	})
	
	$scope.network=$scope.netModelList[0].value;

    $scope.cpu={};
    
    
    // 推荐镜像
    $scope.openModal=function(size){
 
    	$http.get('/cloudui/ws/apps/registry/getResourceListForDeploy'+'?v=' + (new Date().getTime()),{
          params:{registryId:3}
        }).success(function(data){
         scope.resourceList=data;
        })

      var modalInstance = $modal.open({
        templateUrl: '/myModalContent.html',
        controller: ModalInstanceCtrl,
        size: size,
        scope:scope
      });

      modalInstance.result.then(function () {
    	  $scope.resource=scope.radio.item;
          
           
    	  // 资源版本号
          $http.get('/cloudui/ws/apps/registry/getResourceVersionListForDeploy'+'?v=' + (new Date().getTime()),{params:{
             registryId:3,
             resourceName:$scope.resource
          }}).success(function(data){
              $scope.resource_version=data;
              $scope.showport=true;
              $scope.resourceversion=$scope.resource_version[0];
              
          })
          
          $scope.$watch('resourceversion',function(newval,oldval){
            if(newval)
            {
              $scope.accessPort=newval.startPort;
              $scope.cmd=newval.startScript; 
              $scope.taskCmd=newval.startScript||'';    
            }
          })


      }, function () {
          return false;
      });


    }

    // 添加变量
    $scope.add=function(list){
      var obj={};
        $scope[list].push(obj);   
    }
    // 删除变量
    $scope.del=function(list,idx){
        $scope[list].splice(idx,1);
    }

    // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formValidate[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };

    // 提交任务信息
    $scope.submitForm = function() {
         $scope.submitted = true;
         if ($scope.formValidate.$valid) {
 
             
             $scope.data={
                     "name":$scope.name,
                     "type":'host',
                     "description":$scope.description,
                     "network":'host',
                     "outerConnect":'',
                     "innerConnect":'',
                     "taskCmd":$scope.taskCmd||'',
                     "shareCpu":true,
                     "cpuQuota":'',
                     "cpuNumber":'',
                     "optionsMmx":128,
                     "versionId":$scope.resourceversion.id,
                     "dockerVolumes":[]
           }
 

             //创建任务
            $http.post('/cloudui/ws/apps/jobs/saveJob',$scope.data).then(function(response) {   
               //$rootScope.app.layout.isShadow=false;
                // 通过返回数据，没通过返回错误信息
                if(response.data.result)
                {
                  
                  Notify.alert(
                      '<em class="fa fa-check"></em> '+response.data.message ,
                      {status: 'success'}
                  );
                  $state.go('app.module.list',{},{reload:true});

                }else{
                  Notify.alert(
                      '<em class="fa fa-times"></em> '+response.data.message ,
                      {status: 'danger'}
                  );
                }
   
            }, function(x) {
              $scope.authMsg = '服务器请求错误';
            });

         }
    }

}])

/* 运行任务 */
mControllers.controller('runningJob',['$scope','$http','$filter','ngDialog',function($scope,$http,$filter,ngDialog){
	    $scope.checkappId=[]; // 选中的任务

	   // 获取任务列表 
	   $scope.pageSize=10;

	   $scope.onPageChange = function ()
	    {    
	      $http.get('/cloudui/ws/apps/listRuntimeJobs'+'?v=' + (new Date().getTime()),{
	      params:
	          {
	            pageNum:$scope.pageNum,
	            pageSize:$scope.pageSize,
	            name:$scope.searchval||''
	          }
	     }).success(function(data){
	      
	       angular.forEach(data.rows,function(val,key){
	         var ischecked=$filter('filter')($scope.checkappId,val.UUID).length>0?true:false;
	         data.rows[key].ischecked=ischecked;
	       })

	       $scope.tasklist = data;
	       $scope.pageCount=Math.ceil($scope.tasklist.total/$scope.pageSize);

	       if($scope.pageCount==0){
	    	   $scope.pageCount=1;
	       }
	     })
	    }

	    // 搜素任务
	    $scope.searchTask=function()
	    {
	         $scope.pageNum=1;
	         $scope.onPageChange();
	    }
	    // 查看运行中的任务
	    $scope.viewjob=function(params){
	    	ngDialog.open({
	            template: 'app/views/dialog_runningjob.html'+'?action='+(new Date().getTime()),
	            className: 'ngdialog-theme-default ngdialog-lg',
	            scope: $scope,
	            cache: false,
	            data:{uuid:params},
	            controller:'viewJob'
	        });
	    }
}])

/* 查看运行中的任务 */
mControllers.controller('viewJob',['$scope','$http',function($scope,$http){
  
	$http.get('/cloudui/ws/apps/findRuntimeJob'+'?v='+(new Date().getTime()),{
	  params:{
		  uuid:$scope.ngDialogData.uuid
	  }
    }).
    success(function(data){
    	var msg=data.RESULT;
    	msg=msg.replace(/\r\n/ig,"<br/>")
	    $('.logcont').html(msg);
    })
}])
/* 更新任务 */
mControllers.controller('updatejobController',['$rootScope','$scope','$http','$filter','$modal','$state','$stateParams','Notify',function($rootScope,$scope,$http,$filter,$modal,$state,$stateParams,Notify){
     var scope = $rootScope.$new(); 
    scope.radio = {};   
   $scope.volumes=[];  // 挂载路径集
    $scope.cpu={};
    // 网络模式
	$scope.netModelList=[
	   {value:'none',text:'默认模式'},
	   {value:'host',text:'主机模式'}
	]
   // 添加变量
    $scope.add=function(list){
      var obj={};
      $scope[list].push(obj); 
    }
    // 删除变量
    $scope.del=function(list,idx){
        $scope[list].splice(idx,1);
    }
    // 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formValidate[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };
 
    // 信息展示  
    $http.get('/cloudui/ws/apps/jobs/getJob'+'?v='+(new Date().getTime()),{
    	params:{
    		uuid:$stateParams.id
    	}
    }).success(function(data){
       $scope.id=data.id;
       $scope.uuid=data.uuid;
       $scope.name=data.name;
       $scope.description=data.description;
	   $scope.resourceversion=data.versionName;
	   $scope.taskCmd=data.taskCmd;
 
	   $scope.resource=data.resource;
       
       // 资源版本
	    
       $http.get('/cloudui/ws/apps/registry/getResourceVersionListForDeploy'+'?v=' + (new Date().getTime()),{params:{
           registryId:3,
           resourceName:data.resourceName
        }}).success(function(vdata){
            $scope.resource_version=vdata;
            $scope.resourceversion=$filter('filter')(vdata,data.versionName)[0];   
        })
		
		  
       
  
    })
    // 更新任务信息
    $scope.submitForm = function() {
       $scope.submitted = true;
      
       if ($scope.formValidate.$valid) {
 
             
   
             // 提交的数据
              $scope.data={
                 "id":$scope.id,
                 "uuid":$scope.uuid,
                 "name":$scope.name,
                 "type":'host',
                 "description":$scope.description,
                 "network":'host',
                 "outerConnect":'',
                 "innerConnect":'',
                 "taskCmd":$scope.taskCmd||'',
                 "shareCpu":true,
                 "cpuQuota":'',
                 "cpuNumber":'',
                 "optionsMmx":128,
                 "versionId":$scope.resourceversion.id,
                 "dockerVolumes":[]
             }
             
 
 

             //更新任务
            $http.post('/cloudui/ws/apps/jobs/updateJob',$scope.data).then(function(response) {   
               //$rootScope.app.layout.isShadow=false;
                // 通过返回数据，没通过返回错误信息
                if(response.data.result)
                {
                  
                  Notify.alert(
                      '<em class="fa fa-check"></em> '+response.data.message ,
                      {status: 'success'}
                  );
                  $state.go('app.module.list',{},{reload:true});

                }else{
                  Notify.alert(
                      '<em class="fa fa-times"></em> '+response.data.message ,
                      {status: 'danger'}
                  );
                  $state.go('app.module.list',{},{reload:true});
                }
   
            }, function(x) {
              $scope.authMsg = '服务器请求错误';
            });
      }
    }

}])

/* 平台组件配置 */
 
mControllers.controller('platformConfig',['$rootScope','$scope','$http','ngDialog','Notify',function($rootScope,$scope,$http,ngDialog,Notify){
  // 配置列表 
   $scope.pageSize=10;
   $scope.onPageChange = function ()
   {
     $http.get('/cloudui/ws/monitor/component/address/get/'+$scope.pageNum+'/'+$scope.pageSize+'?v=' + (new Date().getTime())).success(function(data){
        $scope.configdata = data;
        $scope.pageCount=Math.ceil($scope.configdata.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
     })
   }
   // 添加平台组件主机
  $scope.addmainframe=function(){
      ngDialog.open({
        template: 'app/views/dialog_addmainframe.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        scope: $scope,
        cache:false,
        controller:'addmainframe'
      });
  }
   // 删除平台组件主机
   $scope.delModule=function(index,item){
      ngDialog.openConfirm({
         template:
              '<p class="modal-header">您确定要删除此平台组件主机吗?</p>' +
              '<div class="modal-body text-right">' +
                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
              '</button></div>',
        plain: true,
        className: 'ngdialog-theme-default'
      })
      .then(
        function(){
        	$rootScope.app.layout.isShadow=true;
           $http({
              method:'post',
              url:'/cloudui/ws/monitor/component/address/delete',
              data: $.param({ip:item.ip,port:item.port}), 
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
           }).success(function(data){
               if(data=='success')
               {
            	 $rootScope.app.layout.isShadow=false;
                 Notify.alert(
                    '<em class="fa fa-check"></em> 删除成功！' ,
                    {status: 'success'}
                 );
                 $scope.configdata.rows.splice(index, 1);
               }else
               {
                 Notify.alert(
                   '<em class="fa fa-times"></em> 删除失败！' ,
                   {status: 'danger'}
                 );
               }
           })
        }
      )
   }
}])

// 添加平台组件主机
mControllers.controller('addmainframe',['$rootScope','$scope','$http','ngDialog','$state',function($rootScope,$scope,$http,ngDialog,$state){
    
   $scope.mainframe = {};
 
   $scope.authMsg = '';
   
   $scope.submitted = false;
   
   $scope.validateInput = function(name, type) {
       var input = $scope.createMainframe[name];
       return (input.$dirty || $scope.submitted) && input.$error[type];
   };

   $scope.createMainframeFn = function(obj) {
     
    $scope.authMsg = '';
    
    $scope.submitted = true;
   
    if($scope.createMainframe.$valid) {
    	   $rootScope.app.layout.isShadow=true;
           // 创建主机  
            $http({
              method  : 'post',
              url     : '/cloudui/ws/monitor/component/address/add',
              data    : $.param({
                name:$scope.mainframe.name,
                ip:$scope.mainframe.ip,
                port:$scope.mainframe.port
              }),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
           }).then(function(response) {  
                if (response.data=='success') {
                    ngDialog.close();
                    $rootScope.app.layout.isShadow=false;
                    $state.go('app.platform.allocation',{},{ reload: true });
                }else{
                   $scope.authMsg ='添加失败';  
                }  
           },function(x) {
                $scope.authMsg = '服务器请求错误';
           })
    }
    else { 
      $scope.createMainframe.name.$dirty = true;
      $scope.createMainframe.ip.$dirty = true;
      $scope.createMainframe.port.$dirty = true;
    }
  }; 
}])

/* 平台组件监控 */

mControllers.controller('platformMonitor',['$scope','$http',function($scope,$http){
  // 监控列表 
   $scope.pageSize=10;
   $scope.onPageChange = function ()
   {
     $http.get('/cloudui/ws/monitor/component/status/'+$scope.pageNum+'/'+$scope.pageSize+'?v=' + (new Date().getTime())).success(function(data){
        $scope.monitordata = data;
        $scope.pageCount=Math.ceil($scope.monitordata.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
     })
   }
}])

/* 平台组件告警历史 */
mControllers.controller('platformHistory',['$rootScope','$scope','$http','$stateParams',function($rootScope,$scope,$http,$stateParams){
    
	$scope.pageSize=10;
    $scope.content='';
    $scope.onPageChange = function (cont,pageNum)
    {  
      
      if(!cont)
      {
    	  cont='*'
      }
      $http.get('/cloudui/ws/monitor/history/3/'+$stateParams.id+'/user/'+$rootScope.user.id+'/content/'+cont+'/'+pageNum+'/'+$scope.pageSize+'?v=' + (new Date().getTime())).success(function(data){
        $scope.platformHisrory = data;
        $scope.pageCount=Math.ceil($scope.platformHisrory.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
       })
    }
    
    // 搜素历史
    $scope.searchHistory=function(params)
    {  
       $scope.onPageChange(params,1);
    }
    
}])

/* 自定义数据源 */
 
mControllers.controller('userdefinedData',['$rootScope','$scope','$http','ngDialog','Notify',function($rootScope,$scope,$http,ngDialog,Notify){
  // 数据源列表 
   $scope.pageSize=10;
   $scope.onPageChange = function ()
   {
     $http.get('/cloudui/ws/monitor/customResource/'+$scope.pageNum+'/'+$scope.pageSize+'?v=' + (new Date().getTime())).success(function(data){
        $scope.userdefineddata = data;
        $scope.pageCount=Math.ceil($scope.userdefineddata.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
     })
   }
   // 添加数据弹窗
  $scope.adddata=function(){
      ngDialog.open({
        template: 'app/views/dialog_adddata.html'+'?action='+(new Date().getTime()),
        className: 'ngdialog-theme-default',
        scope: $scope,
        cache:false,
        controller:'addData'
      });
  }
   // 删除数据
   $scope.delData=function(index,item){
      ngDialog.openConfirm({
         template:
              '<p class="modal-header">您确定要删除此数据吗?</p>' +
              '<div class="modal-body text-right">' +
                '<button type="button" class="btn btn-default mr20" ng-click="closeThisDialog(0)">取消' +
                '<button type="button" class="btn btn-primary" ng-click="confirm(1)">确定' +
              '</button></div>',
        plain: true,
        className: 'ngdialog-theme-default'
      })
      .then(
        function(){
        	$rootScope.app.layout.isShadow=true;
           $http({
              method:'post',
              url:'/cloudui/ws/monitor/customResource/delete',
              data: $.param({id:item.id}), 
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
           }).success(function(data){
               if(data=='success')
               {
            	 $rootScope.app.layout.isShadow=false;
                 Notify.alert(
                    '<em class="fa fa-check"></em> 删除成功！' ,
                    {status: 'success'}
                 );
                 $scope.userdefineddata.rows.splice(index, 1);
               }else
               {
                 Notify.alert(
                   '<em class="fa fa-times"></em> 删除失败！' ,
                   {status: 'danger'}
                 );
               }
           })
        }
      )
   }
}])

// 添加数据
mControllers.controller('addData',['$rootScope','$scope','$http','ngDialog','$state',function($rootScope,$scope,$http,ngDialog,$state){
    
   $scope.data = {};
 
   $scope.authMsg = '';
   
   $scope.submitted = false;
   
   $scope.validateInput = function(name, type) {
       var input = $scope.createData[name];
       return (input.$dirty || $scope.submitted) && input.$error[type];
   };

   $scope.createDataFn = function(obj) {
     
    $scope.authMsg = '';
    
    $scope.submitted = true;
   
    if($scope.createData.$valid) {
    	   $rootScope.app.layout.isShadow=true;
           // 创建主机  
            $http({
              method  : 'post',
              url     : '/cloudui/ws/monitor/customResource/save',
              data    : $.param({
                name:$scope.data.name,
                description:$scope.data.description
              }),   
              headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  
           }).then(function(response) {  
                if (response) {
                    ngDialog.close();
                    $rootScope.app.layout.isShadow=false;
                    $state.go('app.userdefinedData',{},{ reload: true });
                }else{
                   $scope.authMsg ='添加失败';  
                }  
           },function(x) {
                $scope.authMsg = '服务器请求错误';
           })
    }
    else { 
      $scope.createData.name.$dirty = true;
      $scope.createData.ip.$dirty = true;
      $scope.createData.port.$dirty = true;
    }
  }; 
}])

/* 数据源告警历史 */
mControllers.controller('dataHistory',['$rootScope','$scope','$http','$stateParams',function($rootScope,$scope,$http,$stateParams){
    
	$scope.pageSize=10;
    $scope.content='';
    $scope.onPageChange = function (cont,pageNum)
    {  
      
      if(!cont)
      {
    	  cont='*'
      }
      $http.get('/cloudui/ws/monitor/history/4/'+$stateParams.id+'/user/'+$rootScope.user.id+'/content/'+cont+'/'+pageNum+'/'+$scope.pageSize+'?v=' + (new Date().getTime())).success(function(data){
        $scope.dataHistory = data;
        $scope.pageCount=Math.ceil($scope.dataHistory.total/$scope.pageSize);
        if($scope.pageCount==0){
        	$scope.pageCount=1;
        }
       })
    }
    
    // 搜素历史
    $scope.searchHistory=function(params)
    {  
       $scope.onPageChange(params,1);
    }
    
}])

/* 资源列表 */
mControllers.controller('resourceController',['$scope','$http',function($scope,$http){
	 $scope.pageSize=5;
     $scope.onPageChange = function ()
     {
         $http.get('/cloudui/ws/apps/registry/getResourcesByPage'+ '?v=' + (new Date().getTime()),{
         params:
             {
               pageNum:$scope.pageNum,
               pageSize:$scope.pageSize,
               registryId:3,
               keyword:$scope.searchval
             }
        }).success(function(data){
           $scope.myresource = data;
           $scope.pageCount=Math.ceil($scope.myresource.total/$scope.pageSize);
           if($scope.pageCount==0){
             $scope.pageCount=1;
           }
        })
    }
    //搜素私有镜像
    $scope.searchResource=function()
    {
        $scope.pageNum=1;
        $scope.onPageChange();
    }
}])

/* 资源详情 */
mControllers.controller('resourceDetailController',['$scope','$http','$stateParams',function($scope,$http,$stateParams){
  // 详情信息
  $http.get('/cloudui/ws/apps/registry/resourceInfo'+'?v='+(new Date().getTime()),{
    params:{
      registryId:3,  
      resourceName:$stateParams.resourcename   
    } 
  }).success(function(data){
     $scope.resourceDetail=data;
  })
}])

/* 资源版本列表 */
mControllers.controller('resourceDetailvController',['$scope','$http','$filter','$stateParams','ngDialog','Notify','$state',function($scope,$http,$filter,$stateParams,ngDialog,Notify,$state){
	  
    $scope.pageSize=10;
    $scope.keyword='';

    $scope.onPageChange = function ()
    {   
      $http.get('/cloudui/ws/apps/registry/getResourceTagListByPage'+'?v=' + (new Date().getTime()),{
      params:
          {
          registryId:$stateParams.registryId,  
          resourceName:$stateParams.resourcename,   
          pageSize:10,
          pageNum:$scope.pageNum,
          keyword:$scope.keyword
          }
     }).success(function(data){
        $scope.resourcevlist = data;
        $scope.pageCount=Math.ceil($scope.resourcevlist.total/$scope.pageSize);
        if($scope.pageCount==0){
          $scope.pageCount=1;
        }
        
        if($scope.resourcevlist.rows.length==0){
        	$state.go('app.resource',{},{reload:true});
        }
     })
    }

    // 搜素应用
    $scope.searchV=function()
    {
         $scope.pageNum=1;
         $scope.onPageChange();
    }
    // 查看版本信息弹出框
    $scope.dialogresourcev = function (param) {
        ngDialog.open({
          template: 'app/views/dialog_resourcetag.html'+'?action='+(new Date().getTime()),
          className: 'ngdialog-theme-default',
          scope: $scope,
          data:{resourceDetail:param},
          cache:false,
          controller:'resourceTagDetail'
        });
    };
    
    // 删除资源版本
    
    $scope.delversion=function(param){
      $http.get('/cloudui/ws/apps/registry/deleteVersion'+'?v='+(new Date().getTime()),{params:{
        versionId:param
      }}).success(function(data){
        if(data.result)
        {
          Notify.alert(
                    '<em class="fa fa-check"></em> 删除成功！' ,
                    {status: 'success'}
                );
          $state.go('app.resourcedetail.version',{},{reload:true});
         
        }else
        {
           Notify.alert(
                     '<em class="fa fa-times"></em> 删除失败',
                     {status: 'danger'}
                  );
        }
      })
    }
}])


/* 资源版本详情 */
mControllers.controller('resourceTagDetail',['$scope','$http','Notify','$state','ngDialog',function($scope,$http,Notify,$state,ngDialog){
	//版本信息
	$scope.resourcetag=$scope.ngDialogData.resourceDetail;
	 
	$scope.startPort=$scope.resourcetag.startPort||'';
	$scope.startScript=$scope.resourcetag.startScript||'';
	$scope.description=$scope.resourcetag.description||'';
	
	// 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.createResourceForm[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };
     
    // 更新信息
    $scope.updateResourceFn=function(){
        $scope.submitted = true;
        if ($scope.createResourceForm.$valid) {
        	$http({
          	  method:'post',
          	  url:'/cloudui/ws/apps/registry/updateVersionInfo',
          	  data: $.param({
          		versionId:$scope.resourcetag.id,
          		startPort:$scope.startPort,
          		startScript:$scope.startScript,
          		description:$scope.description
          	  }),
          	  headers : { 'Content-Type': 'application/x-www-form-urlencoded' }
            }).success(function(data){
            	if(data.result)
            	{
            		ngDialog.close();
            		Notify.alert(
                        '<em class="fa fa-check"></em> 更新成功！' ,
                        {status: 'success'}
                    );
            		
            		$state.go('app.resourcedetail.version',{},{reload:true});
            	}else
            	{
            		Notify.alert(
                        '<em class="fa fa-times"></em> '+data.reason ,
                        {status: 'danger'}
                    );
            	}
            })
        }
    }
}])

/* 新建资源 */
mControllers.controller('createResource',['$scope','$http','$state','Notify',function($scope,$http,$state,Notify){
	// 验证表单
    $scope.submitted = false;
    $scope.validateInput = function(name, type) {
        var input = $scope.formResource[name];
        return (input.$dirty || $scope.submitted) && input.$error[type];
    };
    // 创建资源
    $scope.createResourceFn=function(){
       $scope.submitted = true;
       if ($scope.formResource.$valid) {
    	   $http.post('/cloudui/ws/apps/registry/registResourceNew',{
    		   resourceName:$scope.resourceName,
    		   versionName:$scope.versionName,
    		   packagePath:$scope.packagePath,
    		   startScript:$scope.startScript,
    		   startPort:$scope.startPort,
    		   description:$scope.description,
               description_resource:$scope.description_resource
    	   }).success(function(data){
	          if(data.result)
	          {
	        	  Notify.alert(
	                 '<em class="fa fa-check"></em> 创建成功!',
	                  {status: 'success'}
	              );
	        	  $state.go('app.resource',{},{ reload: true });
	          }else
	          {
	              Notify.alert(
	                '<em class="fa fa-times"></em> '+data.reason ,
	                {status: 'danger'}
	              );
	          }
	      })
       }
    }
}])
/* modal */


var ModalInstanceCtrl = function ($scope, $modalInstance,items) {

   
    $scope.ok = function () {
      $modalInstance.close('closed');
    };

    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };
  };
  ModalInstanceCtrl.$inject = ["$scope", "$modalInstance"];


(function($, window, document){

    var containers = {},
        messages   = {},

        notify     =  function(options){

            if ($.type(options) == 'string') {
                options = { message: options };
            }

            if (arguments[1]) {
                options = $.extend(options, $.type(arguments[1]) == 'string' ? {status:arguments[1]} : arguments[1]);
            }

            return (new Message(options)).show();
        },
        closeAll  = function(group, instantly){
            if(group) {
                for(var id in messages) { if(group===messages[id].group) messages[id].close(instantly); }
            } else {
                for(var id in messages) { messages[id].close(instantly); }
            }
        };

    var Message = function(options){

        var $this = this;

        this.options = $.extend({}, Message.defaults, options);

        this.uuid    = "ID"+(new Date().getTime())+"RAND"+(Math.ceil(Math.random() * 100000));
        this.element = $([
            // @geedmo: alert-dismissable enables bs close icon
            '<div class="uk-notify-message alert-dismissable">',
                '<a class="close">&times;</a>',
                '<div>'+this.options.message+'</div>',
            '</div>'

        ].join('')).data("notifyMessage", this);

        // status
        if (this.options.status) {
            this.element.addClass('alert alert-'+this.options.status);
            this.currentstatus = this.options.status;
        }

        this.group = this.options.group;

        messages[this.uuid] = this;

        if(!containers[this.options.pos]) {
            containers[this.options.pos] = $('<div class="uk-notify uk-notify-'+this.options.pos+'"></div>').appendTo('body').on("click", ".uk-notify-message", function(){
                $(this).data("notifyMessage").close();
            });
        }
    };


    $.extend(Message.prototype, {

        uuid: false,
        element: false,
        timout: false,
        currentstatus: "",
        group: false,

        show: function() {

            if (this.element.is(":visible")) return;

            var $this = this;

            containers[this.options.pos].show().prepend(this.element);

            var marginbottom = parseInt(this.element.css("margin-bottom"), 10);

            this.element.css({"opacity":0, "margin-top": -1*this.element.outerHeight(), "margin-bottom":0}).animate({"opacity":1, "margin-top": 0, "margin-bottom":marginbottom}, function(){

                if ($this.options.timeout) {

                    var closefn = function(){ $this.close(); };

                    $this.timeout = setTimeout(closefn, $this.options.timeout);

                    $this.element.hover(
                        function() { clearTimeout($this.timeout); },
                        function() { $this.timeout = setTimeout(closefn, $this.options.timeout);  }
                    );
                }

            });

            return this;
        },

        close: function(instantly) {

            var $this    = this,
                finalize = function(){
                    $this.element.remove();

                    if(!containers[$this.options.pos].children().length) {
                        containers[$this.options.pos].hide();
                    }

                    delete messages[$this.uuid];
                };

            if(this.timeout) clearTimeout(this.timeout);

            if(instantly) {
                finalize();
            } else {
                this.element.animate({"opacity":0, "margin-top": -1* this.element.outerHeight(), "margin-bottom":0}, function(){
                    finalize();
                });
            }
        },

        content: function(html){

            var container = this.element.find(">div");

            if(!html) {
                return container.html();
            }

            container.html(html);

            return this;
        },

        status: function(status) {

            if(!status) {
                return this.currentstatus;
            }

            this.element.removeClass('alert alert-'+this.currentstatus).addClass('alert alert-'+status);

            this.currentstatus = status;

            return this;
        }
    });

    Message.defaults = {
        message: "",
        status: "normal",
        timeout: 1000,
        group: null,
        pos: 'top-center'
    };


    $["notify"]          = notify;
    $["notify"].message  = Message;
    $["notify"].closeAll = closeAll;

    return notify;

}(jQuery, window, document));









